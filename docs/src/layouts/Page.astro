---
import NavigationBar from "./NavigationBar.astro";
import Sidebar from "./Sidebar.astro";
import MobileSidebar from "./MobileSidebar.astro";
import Search from "../components/Search.astro";

import "placer-toolkit/dist/default.css";
import "placer-toolkit/dist/native-styles.css";
import "placer-toolkit/dist/style-utilities/style-utilities.css";
import "../styles/main.css";

const {
    title = "Untitled",
    description = "The go‚Äêto web component library for the web! üõ†Ô∏è",
    hero = false,
    overflow = true,
} = Astro.props;
---

<!doctype html>
<html lang="en" class="pc-cloak">
    <head>
        <meta charset="UTF-8" />
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <meta name="generator" content={Astro.generator} />
        <meta name="description" content={description} />
        <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
        <!-- Google Fonts -->
        <link rel="preconnect" href="https://fonts.googleapis.com" />
        <link
            rel="preconnect"
            href="https://fonts.gstatic.com"
            crossorigin="anonymous"
        />
        <link
            rel="stylesheet"
            href="https://fonts.googleapis.com/css2?family=IBM+Plex+Mono:ital,wght@0,100..700&family=JetBrains+Mono:ital,wght@0,100..800&family=Playfair+Display:ital,wght@0,400..900&family=Quicksand:wght@300..700&display=swap"
        />
        <!-- Placer Toolkit -->
        <script>
            import "placer-toolkit/dist/placer.js";
        </script>
        <!-- Cabin Analytics -->
        <script src="https://scripts.withcabin.com/hello.js" async is:inline
        ></script>
        <title>{!hero ? `${title} | Placer Toolkit` : title}</title>
    </head>
    <body>
        <div class="layout-container">
            <pc-button
                href="#main-content"
                class="skip-to-main-content pc-visually-hidden"
            >
                Skip to main content
            </pc-button>

            <NavigationBar />

            <Search />

            <MobileSidebar />

            <Sidebar />

            <noscript>
                This page requires JavaScript to function properly, as it uses
                JavaScript‚Äêreliant web technologies.
            </noscript>

            <main
                class={[hero && "hero", !overflow && "no-overflow"]
                    .filter(Boolean)
                    .join(" ")}
                id="main-content"
                tabindex="-1"
            >
                {
                    !hero ? (
                        <div class="content-layout">
                            <article>
                                <pc-button
                                    href="#table-of-contents"
                                    size="small"
                                    class="skip-to-toc pc-desktop-only pc-visually-hidden"
                                >
                                    Skip to table of contents
                                </pc-button>

                                <pc-details
                                    class="toc-mobile"
                                    summary="On this page"
                                >
                                    <ul class="toc-ul" />
                                </pc-details>

                                <header id="_top">
                                    <h1>{title}</h1>
                                </header>

                                <slot />
                            </article>

                            <aside
                                class="toc toc-desktop"
                                id="table-of-contents"
                            >
                                <pc-button
                                    href="#_top"
                                    size="small"
                                    class="return-to-main-content pc-desktop-only pc-visually-hidden"
                                >
                                    Return to main content
                                </pc-button>
                                <h3 class="toc-heading">On this page</h3>
                                <div class="toc-scroll-fade">
                                    <ul class="toc-ul" />
                                </div>
                            </aside>
                        </div>
                    ) : (
                        <slot />
                    )
                }
            </main>
        </div>

        <script>
            // Theme
            const prefersDark =
                window.matchMedia &&
                window.matchMedia("(prefers-color-scheme: dark)").matches;

            document.documentElement.classList.add(
                prefersDark ? "pc-theme-dark" : "pc-theme-light",
            );
            document.documentElement.classList.remove(
                prefersDark ? "pc-theme-light" : "pc-theme-dark",
            );

            // Mobile sidebar
            const mobileSidebar = document.querySelector(
                ".mobile-sidebar",
            ) as HTMLDialogElement;
            const sidebarToggle = document.querySelector(".sidebar-toggle");

            sidebarToggle?.addEventListener("click", () =>
                mobileSidebar?.show(),
            );

            // Search
            const searchDialog = document.querySelector(
                ".search-dialog",
            ) as HTMLDialogElement;
            const searchButton = document.getElementById("open-search-dialog");

            searchButton?.addEventListener("click", () => searchDialog?.show());

            // TOC scroll masks
            function updateTOCFade(container: HTMLElement) {
                const { scrollTop, scrollHeight, clientHeight } = container;
                const none = "none";
                const topFade =
                    "linear-gradient(to bottom, var(--pc-color-neutral-0) 90%, transparent)";
                const bottomFade =
                    "linear-gradient(to bottom, transparent, var(--pc-color-neutral-0) 10%)";
                const bothFade =
                    "linear-gradient(to bottom, transparent, var(--pc-color-neutral-0) 10%, var(--pc-color-neutral-0) 90%, transparent)";

                if (scrollHeight <= clientHeight) {
                    container.style.maskImage = none;
                } else if (scrollTop === 0) {
                    container.style.maskImage = topFade;
                } else if (scrollTop + clientHeight >= scrollHeight - 1) {
                    container.style.maskImage = bottomFade;
                } else {
                    container.style.maskImage = bothFade;
                }
            }

            window.addEventListener("load", () => {
                const tocScroll: HTMLDivElement | null =
                    document.querySelector(".toc-scroll-fade");
                if (!tocScroll) return;

                updateTOCFade(tocScroll);

                tocScroll.addEventListener("scroll", () => {
                    updateTOCFade(tocScroll);
                });

                window.addEventListener("resize", () => {
                    updateTOCFade(tocScroll);
                });
            });

            // TOC generation
            document.addEventListener("DOMContentLoaded", () => {
                const tocMobile = document.querySelector(".toc-mobile .toc-ul");
                const tocDesktop = document.querySelector(
                    ".toc-desktop .toc-ul",
                );

                const headings = Array.from(
                    document.querySelectorAll("h2[id], h3[id]"),
                );
                const items = headings.map((element) => ({
                    depth: element.tagName === "H2" ? 2 : 3,
                    slug: element.id,
                    text: element.textContent?.trim() || "",
                }));

                function createTOCItem({
                    depth,
                    slug,
                    text,
                }: {
                    depth: number;
                    slug: string;
                    text: string;
                }) {
                    const li = document.createElement("li");
                    li.className = `toc-item depth-${depth}`;
                    const a = document.createElement("a");
                    a.href = `#${slug}`;
                    a.textContent = text;
                    li.appendChild(a);
                    return li;
                }

                const overviewItem = document.createElement("li");
                overviewItem.className = "toc-item depth-2";
                const overviewLink = document.createElement("a");
                overviewLink.href = "#_top";
                overviewLink.textContent = "Overview";
                overviewItem.appendChild(overviewLink);

                [tocMobile, tocDesktop].forEach((toc) => {
                    if (!toc) {
                        return;
                    }

                    toc.innerHTML = "";
                    toc.appendChild(overviewItem.cloneNode(true));

                    items.forEach((item) => {
                        if (item.depth > 1 && item.depth < 4) {
                            toc.appendChild(createTOCItem(item));
                        }
                    });
                });
            });

            // TOC scrollspy
            document.addEventListener("DOMContentLoaded", () => {
                const toc = document.querySelector(".toc-desktop");
                if (!toc) return;
                const links = Array.from(toc.querySelectorAll(".toc-ul a"));
                const idToLink = new Map(
                    links.map((link) => [
                        link.getAttribute("href")?.slice(1),
                        link,
                    ]),
                );

                const observer = new IntersectionObserver(
                    (entries) => {
                        entries.forEach((entry) => {
                            if (entry.isIntersecting) {
                                const id = entry.target.id;
                                if (!id) return;
                                links.forEach((link) =>
                                    link.classList.toggle(
                                        "active",
                                        link.getAttribute("href") === `#${id}`,
                                    ),
                                );
                            }
                        });
                    },
                    {
                        root: null,
                        rootMargin: "0px 0px -60% 0px",
                        threshold: 0,
                    },
                );

                idToLink.forEach((_link, id) => {
                    if (!id) {
                        return;
                    }

                    const heading = document.getElementById(id);

                    if (heading) {
                        observer.observe(heading);
                    }
                });
            });
        </script>
    </body>
</html>
