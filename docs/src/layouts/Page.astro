---
import NavigationBar from "./NavigationBar.astro";
import Sidebar from "./Sidebar.astro";
import MobileSidebar from "./MobileSidebar.astro";

import ComponentInfo from "../components/ComponentInfo.astro";
import Search from "../components/Search.astro";

import "placer-toolkit/dist/styles/placer.css";
import "placer-toolkit/dist/styles/themes/utility.css";
import "placer-toolkit/dist/styles/themes/serene.css";
import "../styles/main.css";
import "../styles/utilities.css";

const {
    title = "Untitled",
    description = "Flexible. Accessible. Web Components.",
    component = "",
    hero = false,
    pagefindIgnore = false,
} = Astro.props;
---

<!doctype html>
<html lang="en-gb" class="pc-light pc-cloak">
    <head>
        <meta charset="UTF-8" />
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <meta name="generator" content={Astro.generator} />
        <meta name="description" content={description} />
        <meta
            name="keywords"
            content="lit, placer, toolkit, litelement, components, placer-toolkit, web-components, custom-elements"
        />
        <meta name="author" content="randomguy-2650" />
        <meta name="robots" content="index, follow" />
        <meta property="og:title" content="Placer Toolkit" />
        <meta
            property="og:description"
            content="Flexible. Accessible. Web Components."
        />
        <meta
            property="og:url"
            content={new URL(Astro.url.pathname, Astro.site).href}
        />
        <meta property="og:type" content="website" />
        <meta property="og:site_name" content="Placer Toolkit" />
        <link rel="icon" type="image/svg+xml" href="/brand/favicon.svg" />
        <link rel="apple-touch-icon" href="/apple-touch-icon.png" />
        <!-- Bunny Fonts -->
        <link
            rel="stylesheet"
            href="https://fonts.bunny.net/css?family=ibm-plex-mono:100,100i,200,200i,300,300i,400,400i,500,500i,600,600i,700,700i|inter:100,100i,200,200i,300,300i,400,400i,500,500i,600,600i,700,700i,800,800i,900,900i|jetbrains-mono:100,100i,200,200i,300,300i,400,400i,500,500i,600,600i,700,700i,800,800i|lora:400,400i,500,500i,600,600i,700,700i|montserrat:100,100i,200,200i,300,300i,400,400i,500,500i,600,600i,700,700i,800,800i,900,900i|nunito:200,200i,300,300i,400,400i,500,500i,600,600i,700,700i,800,800i,900,900i|playfair-display:400,400i,500,500i,600,600i,700,700i,800,800i,900,900i|source-code-pro:200,200i,300,300i,400,400i,500,500i,600,600i,700,700i,800,800i,900,900i"
        />
        <!-- Placer Toolkit -->
        <script>
            import "placer-toolkit";
            import "placer-toolkit/dist/translations/en-gb.js";
        </script>
        <!-- Cabin Analytics -->
        <script src="https://scripts.withcabin.com/hello.js" async is:inline
        ></script>
        <title>{hero ? title : `${title} | Placer Toolkit`}</title>
    </head>
    <body>
        <div class="layout-container">
            <pc-button
                href="#main-content"
                appearance="neutral"
                variant="filled outlined"
                class="skip-to-main-content pc-visually-hidden"
                data-pagefind-ignore
            >
                Skip to main content
            </pc-button>

            <NavigationBar />

            <MobileSidebar />

            <Sidebar />

            <Search />

            <noscript>
                This site requires JavaScript to function properly, as it uses
                JavaScript‚Äêreliant web technologies.
            </noscript>

            <main
                class:list={[{ hero: hero }]}
                id="main-content"
                tabindex="-1"
                data-pagefind-ignore={pagefindIgnore ? true : undefined}
            >
                {
                    !hero ? (
                        <div class="content-layout">
                            <article>
                                <pc-button
                                    href="#table-of-contents"
                                    appearance="neutral"
                                    variant="filled outlined"
                                    size="small"
                                    class="skip-to-toc pc-desktop-only pc-visually-hidden"
                                    data-pagefind-ignore
                                >
                                    Skip to table of contents
                                </pc-button>

                                <pc-callout class="hero-callout" appearance="warning">
                                    <pc-icon
                                        library="default"
                                        icon-style="solid"
                                        name="circle-radiation"
                                        slot="icon"
                                    />
                                    <div class="pc-split">
                                        <p style="flex: 1">
                                            <strong>
                                                The Placer Toolkit alpha has
                                                arrived!¬†üéâ
                                            </strong>
                                            <br />
                                            Plenty of changes are coming your
                                            way‚Äîsome big, some breaking, some
                                            even nuclear! Beware the changelog‚Ä¶
                                        </p>
                                        <pc-button
                                            appearance="warning"
                                            href="/resources/changelog"
                                        >
                                            Bring it on!
                                        </pc-button>
                                    </div>
                                </pc-callout>

                                <pc-details
                                    class="toc-mobile"
                                    summary="On this page"
                                    data-pagefind-ignore
                                >
                                    <ul class="toc-ul" />
                                </pc-details>

                                    <header id="_top">
                                        <h1>{title}</h1>
                                        {component ? (
                                            <ComponentInfo componentName={component} />
                                        ) : ""}
                                    </header>
                                <slot />
                            </article>

                            <aside
                                class="toc toc-desktop"
                                id="table-of-contents"
                                data-pagefind-ignore
                            >
                                <pc-button
                                    href="#_top"
                                    appearance="neutral"
                                    variant="filled outlined"
                                    size="small"
                                    class="return-to-main-content pc-desktop-only pc-visually-hidden"
                                    data-pagefind-ignore
                                >
                                    Return to main content
                                </pc-button>
                                <h3 class="toc-heading">On this page</h3>
                                <pc-scroller
                                    class="toc-scroll-fade"
                                    orientation="vertical"
                                >
                                    <ul class="toc-ul" />
                                </pc-scroller>
                            </aside>
                        </div>
                    ) : (
                        <pc-callout class="hero-callout" appearance="warning">
                            <pc-icon
                                library="default"
                                icon-style="solid"
                                name="circle-radiation"
                                slot="icon"
                            />
                            <div class="pc-split">
                                <p style="flex: 1">
                                    <strong>
                                        The Placer Toolkit alpha has
                                        arrived!¬†üéâ
                                    </strong>
                                    <br />
                                    Plenty of changes are coming your
                                    way‚Äîsome big, some breaking, some
                                    even nuclear! Beware the changelog‚Ä¶
                                </p>
                                <pc-button
                                    appearance="warning"
                                    href="/resources/changelog"
                                >
                                    Bring it on!
                                </pc-button>
                            </div>
                        </pc-callout>

                        <slot />
                    )
                }
            </main>
        </div>

        <script>
            // Theme
            const prefersDark =
                window.matchMedia &&
                window.matchMedia("(prefers-color-scheme: dark)").matches;

            document.documentElement.classList.add(
                prefersDark ? "pc-dark" : "pc-light",
            );
            document.documentElement.classList.remove(
                prefersDark ? "pc-light" : "pc-dark",
            );

            // Mobile sidebar
            const mobileSidebar = document.querySelector(
                ".mobile-sidebar",
            ) as HTMLDialogElement;
            const sidebarToggle = document.querySelector(".sidebar-toggle");

            sidebarToggle?.addEventListener("click", () =>
                mobileSidebar.open = true,
            );

            // TOC generation
            document.addEventListener("DOMContentLoaded", () => {
                const tocMobile = document.querySelector(".toc-mobile .toc-ul");
                const tocDesktop = document.querySelector(
                    ".toc-desktop .toc-ul",
                );

                const headings = Array.from(
                    document.querySelectorAll("h2[id], h3[id]"),
                );
                const items = headings.map((element) => ({
                    depth: element.tagName === "H2" ? 2 : 3,
                    slug: element.id,
                    text: (() => {
                        let text = element.textContent?.trim() || "";
                        if (text.endsWith("#")) {
                            text = text.slice(0, -1).trim();
                        }
                        return text;
                    })(),
                }));

                function createTOCItem({
                    depth,
                    slug,
                    text,
                }: {
                    depth: number;
                    slug: string;
                    text: string;
                }) {
                    const li = document.createElement("li");
                    li.className = `toc-item depth-${depth}`;
                    const a = document.createElement("a");
                    a.href = `#${slug}`;
                    a.textContent = text;
                    li.appendChild(a);
                    return li;
                }

                const overviewItem = document.createElement("li");
                overviewItem.className = "toc-item depth-2";
                const overviewLink = document.createElement("a");
                overviewLink.href = "#_top";
                overviewLink.textContent = "Overview";
                overviewItem.appendChild(overviewLink);

                [tocMobile, tocDesktop].forEach((toc) => {
                    if (!toc) {
                        return;
                    }

                    toc.innerHTML = "";
                    toc.appendChild(overviewItem.cloneNode(true));

                    items.forEach((item) => {
                        if (item.depth > 1 && item.depth < 4) {
                            toc.appendChild(createTOCItem(item));
                        }
                    });
                });
            });

            // TOC scrollspy
            document.addEventListener("DOMContentLoaded", () => {
                const toc = document.querySelector(".toc-desktop");

                if (!toc) {
                    return;
                }

                const links = Array.from(toc.querySelectorAll(".toc-ul a"));
                const idToLink = new Map(
                    links.map((link) => [
                        link.getAttribute("href")?.slice(1),
                        link,
                    ]),
                );

                const observer = new IntersectionObserver(
                    (entries) => {
                        entries.forEach((entry) => {
                            if (entry.isIntersecting) {
                                const id = entry.target.id;

                                if (!id) {
                                    return;
                                }

                                links.forEach((link) =>
                                    link.classList.toggle(
                                        "active",
                                        link.getAttribute("href") === `#${id}`,
                                    ),
                                );
                            }
                        });
                    },
                    {
                        root: null,
                        rootMargin: "0px 0px -60% 0px",
                        threshold: 0,
                    },
                );

                idToLink.forEach((_link, id) => {
                    if (!id) {
                        return;
                    }

                    const heading = document.getElementById(id);

                    if (heading) {
                        observer.observe(heading);
                    }
                });

                function determineActiveFromPosition() {
                    const targetLine = window.innerHeight * 0.18;
                    let chosenId: string | null = null;
                    let chosenTop = -Infinity;

                    idToLink.forEach((_link, id) => {
                        if (!id) {
                            return;
                        }

                        const element = document.getElementById(id);

                        if (!element) {
                            return;
                        }

                        const top = element.getBoundingClientRect().top;

                        if (top <= targetLine && top > chosenTop) {
                            chosenTop = top;
                            chosenId = id;
                        }
                    });

                    if (!chosenId) {
                        let nearestId: string | null = null;
                        let nearestDistance = Infinity;

                        idToLink.forEach((_link, id) => {
                            if (!id) {
                                return;
                            }

                            const element = document.getElementById(id);

                            if (!element) {
                                return;
                            }

                            const distance = Math.abs(element.getBoundingClientRect().top - targetLine);

                            if (distance < nearestDistance) {
                                nearestDistance = distance;
                                nearestId = id;
                            }
                        });
                        chosenId = nearestId;
                    }

                    if (chosenId) {
                        links.forEach((link) =>
                            link.classList.toggle(
                                "active",
                                link.getAttribute("href") === `#${chosenId}`,
                            ),
                        );
                    }
                }

                determineActiveFromPosition();

                window.addEventListener("load", determineActiveFromPosition);
                window.addEventListener("resize", determineActiveFromPosition);
            });
        </script>
    </body>
</html>
