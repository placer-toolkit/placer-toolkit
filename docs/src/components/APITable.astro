---
import CodeBlock from "./CodeBlock.astro";

export interface Props {
    componentName: string;
}

interface CEMType {
    text?: string;
}

interface CEMParameter {
    name: string;
    type: CEMType | string;
}

interface CEMProperty {
    name: string;
    attribute?: string;
    description?: string;
    type?: CEMType | string;
    reflects?: boolean;
    default?: string;
    kind: string;
    privacy?: string;
}

interface CEMMethod {
    name: string;
    description?: string;
    parameters?: CEMParameter[];
    kind: string;
    privacy?: string;
}

interface CEMEvent {
    name: string;
    description?: string;
    type?: CEMType | string;
}

interface CEMSlot {
    name: string;
    description?: string;
}

interface CEMCSSProperty {
    name: string;
    description?: string;
    default?: string;
}

interface CEMCSSPart {
    name: string;
    description?: string;
}

interface CEMAnimation {
    name: string;
    description?: string;
}

interface CEMDeclaration {
    name: string;
    tagName?: string;
    members?: (CEMProperty | CEMMethod)[];
    events?: CEMEvent[];
    slots?: CEMSlot[];
    cssProperties?: CEMCSSProperty[];
    cssParts?: CEMCSSPart[];
    animations?: CEMAnimation[];
    dependencies?: string[];
}

interface CEMModule {
    declarations?: CEMDeclaration[];
}

interface CEMManifest {
    package?: {
        version?: string;
    };
    modules?: CEMModule[];
}

interface ReflectsIconProps {
    attribute?: string;
    reflects?: boolean;
}

const { componentName } = Astro.props;

<<<<<<< Updated upstream
const packageVersion = "0.5.0";
const cdnBaseURL = "https://cdn.jsdelivr.net/npm/placer-toolkit@" + packageVersion;

const loadManifest = async (): Promise<CEMManifest | null> => {
=======
>>>>>>> Stashed changes
    try {
        const manifestModule = await import("placer-toolkit/dist/custom-elements.json", {
            assert: { type: "json" }
        });
        const manifest = manifestModule.default ?? manifestModule;
        return manifest as CEMManifest & { package?: { version?: string } };
    } catch (error) {
        console.error(`Couldn’t load the CEM file: ${error}`);
        return null;
    }
};

const findComponentData = (
    manifest: CEMManifest,
    componentName: string,
): CEMDeclaration | null => {
    if (!manifest.modules) {
        return null;
    }

    for (const module of manifest.modules) {
        const declaration = module.declarations?.find(
            (decl) =>
                decl.name === componentName || decl.tagName === componentName,
        );
        if (declaration) {
            return declaration;
        }
    }
    return null;
};

const formatType = (type: CEMType | string | undefined): string => {
    if (!type) {
        return "";
    }

    if (typeof type === "string") {
        return type.replace(/^\|\s/, "");
    }

    if (typeof type === "object" && type.text) {
        return type.text.replace(/^\|\s/, "");
    }

    return JSON.stringify(type);
};

const getReflectsIcon = ({
    attribute,
    reflects,
}: ReflectsIconProps): string => {
    const hasReflection = attribute || reflects;
    const iconName = hasReflection ? "check" : "xmark";
    const className = hasReflection ? "reflects" : "does-not-reflect";
    const iconLabel = hasReflection ? "Reflects" : "Does not reflect";

    return `
        <pc-icon
            class="${className}"
            library="default"
            icon-style="solid"
            name="${iconName}"
            label="${iconLabel}"
        ></pc-icon>
    `;
};

const escapeHTML = (text: string): string =>
    text
        .replace(/&/g, "&amp;")
        .replace(/</g, "&lt;")
        .replace(/>/g, "&gt;")
        .replace(/"/g, "&quot;")
        .replace(/'/g, "&#39;");

const renderInline = (text: string): string => {
    if (!text) {
        return "";
    }

    text = text.replace(
        /`([^`]+?)`/g,
        (_, code) => `<code>${escapeHTML(code)}</code>`,
    );

    text = text.replace(
        /\[([^\]]+?)\]\(([^)]+?)\)/g,
        (_, label, href) =>
            `<a href="${escapeHTML(href)}">${renderInline(label)}</a>`,
    );

    text = text.replace(
        /!\[([^\]]*?)\]\(([^)]+?)\)/g,
        (_, alt, src) =>
            `<img src="${escapeHTML(src)}" alt="${escapeHTML(alt)}">`,
    );

    text = text.replace(
        /(\*\*|__)(.+?)\1/g,
        (_, __, content) => `<strong>${renderInline(content)}</strong>`,
    );

    text = text.replace(
        /(\*|_)(.+?)\1/g,
        (_, __, content) => `<em>${renderInline(content)}</em>`,
    );

    text = text.replace(
        /~~(.+?)~~/g,
        (_, content) => `<del>${renderInline(content)}</del>`,
    );

    return text;
};

const renderMarkdown = (text: string): string => {
    if (!text) {
        return "";
    }

    const lines = text.split(/\r?\n/);
    const html: string[] = [];
    let listBuffer: string[] = [];
    let inOrdered = false;
    let inUnordered = false;
    let inBlockquote = false;

    const flushList = () => {
        if (listBuffer.length) {
            if (inOrdered) {
                html.push("<ol>" + listBuffer.join("") + "</ol>");
            } else {
                html.push("<ul>" + listBuffer.join("") + "</ul>");
            }
        }
        listBuffer = [];
        inOrdered = false;
        inUnordered = false;
    };

    for (let rawLine of lines) {
        const line = rawLine.trim();

        if (!line) {
            flushList();
            inBlockquote = false;
            html.push("");
            continue;
        }

        if (/^(\*\s*\*\s*\*|-\s*-\s*-|_\s*_\s*)$/.test(line)) {
            flushList();
            html.push("<hr />");
            continue;
        }

        if (/^>\s*(.*)$/.test(line)) {
            flushList();
            const quote = line.replace(/^>\s?/, "");
            if (!inBlockquote) {
                html.push("<blockquote>");
                inBlockquote = true;
            }
            html.push(renderInline(quote));
            continue;
        } else if (inBlockquote) {
            html.push("</blockquote>");
            inBlockquote = false;
        }

        if (/^\d+\.\s+/.test(line)) {
            const item = line.replace(/^\d+\.\s+/, "");
            if (!inOrdered) {
                flushList();
                inOrdered = true;
            }
            listBuffer.push(`<li>${renderInline(item)}</li>`);
            continue;
        }

        if (/^[-+*]\s+/.test(line)) {
            const item = line.replace(/^[-+*]\s+/, "");
            if (!inUnordered) {
                flushList();
                inUnordered = true;
            }
            listBuffer.push(`<li>${renderInline(item)}</li>`);
            continue;
        }

        flushList();
        html.push(renderInline(line));
    }

    flushList();

    if (inBlockquote) {
        html.push("</blockquote>");
    }

    return html.join("\n");
};

const convertComponentNameToPath = (componentName: string): string => {
    return componentName
        .substring(2)
        .replace(/^./, (match) => match.toLowerCase())
        .replace(/([A-Z])/g, "-$1")
        .toLowerCase();
};

const formatComponentDisplayName = (dependency: string): string => {
    return dependency
        .replace(/^pc-/i, "")
        .split("-")
        .map((word) => word.charAt(0).toUpperCase() + word.slice(1))
        .join(" ");
};

// Load the manifest and version
const manifest = await loadManifest();
const packageVersion = manifest?.package?.version ?? "unknown";

const cdnBaseURL = `https://cdn.jsdelivr.net/npm/placer-toolkit@${packageVersion}`;

const componentData = manifest
    ? findComponentData(manifest, componentName)
    : null;

// Filter and organise data
const properties =
    componentData?.members?.filter(
        (member): member is CEMProperty =>
            member.kind === "field" && member.privacy !== "private",
    ) || [];

const methods =
    componentData?.members?.filter(
        (member): member is CEMMethod =>
            member.kind === "method" && member.privacy !== "private",
    ) || [];

const events = componentData?.events || [];
const slots = componentData?.slots || [];
const cssProperties = componentData?.cssProperties || [];
const cssParts = componentData?.cssParts || [];
const animations = componentData?.animations || [];
const dependencies = componentData?.dependencies || [];

// Generate import paths
const componentPath = convertComponentNameToPath(componentName);
const cdnURL = `${cdnBaseURL}/cdn/components/${componentPath}/${componentPath}.js`;
const importPath = `placer-toolkit/dist/components/${componentPath}/${componentPath}.js`;
---

{
    componentData && (
        <div class="api-documentation">
            {properties.length > 0 && (
                <section class="api-section">
                    <h2 id="properties">
                        Properties<a
                            class="heading-anchor"
                            href="#properties"
                            aria-label="Jump to this heading"
                            data-pagefind-ignore
                        >#</a>
                    </h2>
                    <pc-scroller class="table-wrapper" aria-labelledby="properties">
                        <table class="api-table">
                            <thead>
                                <tr>
                                    <th class="name">Name</th>
                                    <th class="description">Description</th>
                                    <th style="text-align: center">Reflects</th>
                                    <th class="default">Default</th>
                                </tr>
                            </thead>
                            <tbody>
                                {properties.map((property) => (
                                    <tr>
                                        <td class="name">
                                            <code>{property.name}</code>
                                            {property.attribute &&
                                                property.attribute !==
                                                    property.name && (
                                                    <>
                                                        <br />
                                                        <code style="font-size: var(--pc-font-size-xxs)">
                                                            {property.attribute}
                                                        </code>
                                                    </>
                                                )}
                                        </td>
                                        <td class="description">
                                            {property.description && (
                                                <span
                                                    set:html={renderMarkdown(property.description)}
                                                />
                                            )}
                                            {property.type && (
                                                <br />
                                                <small class="type-info">
                                                    <b>
                                                        Type:
                                                        <code>
                                                            {formatType(
                                                                property.type,
                                                            )}
                                                        </code>
                                                    </b>
                                                </small>
                                            )}
                                        </td>
                                        <td
                                            style="text-align: center"
                                            set:html={getReflectsIcon({
                                                attribute: property.attribute,
                                                reflects: property.reflects,
                                            })}
                                        />
                                        <td class="default">
                                            {property.default ? (
                                                <code>{property.default}</code>
                                            ) : (
                                                "‐"
                                            )}
                                        </td>
                                    </tr>
                                ))}
                                <tr>
                                    <td class="name">
                                        <code>updateComplete</code>
                                    </td>
                                    <td>
                                        A read‐only promise that resolves when
                                        the component has
                                        <a href="/get-started/usage/#component-rendering-and-updating">finished updating</a>.
                                    </td>
                                    <td style="text-align: center">
                                        <pc-icon
                                            class="does-not-reflect"
                                            library="default"
                                            icon-style="solid"
                                            name="xmark"
                                            label="Does not reflect"
                                        />
                                    </td>
                                    <td class="default">‐</td>
                                </tr>
                            </tbody>
                        </table>
                    </pc-scroller>
                    <p>
                        Learn more about{" "}
                        <a href="/get-started/usage/#attributes-and-properties">attributes and properties</a>.
                    </p>
                </section>
            )}

            {slots.length > 0 && (
                <section class="api-section">
                    <h2 id="slots">
                        Slots<a
                            class="heading-anchor"
                            href="#slots"
                            aria-label="Jump to this heading"
                            data-pagefind-ignore
                        >#</a>
                    </h2>
                    <pc-scroller class="table-wrapper" aria-labelledby="slots">
                        <table class="api-table">
                            <thead>
                                <tr>
                                    <th class="name">Name</th>
                                    <th class="description">Description</th>
                                </tr>
                            </thead>
                            <tbody>
                                {slots.map((slot) => (
                                    <tr>
                                        <td class="name">
                                            {slot.name && slot.name !== "‐" ? (
                                                <code>{slot.name}</code>
                                            ) : (
                                                "(default)"
                                            )}
                                        </td>
                                        <td class="description">
                                            {slot.description && (
                                                <span
                                                    set:html={renderMarkdown(slot.description)}
                                                />
                                            )}
                                        </td>
                                    </tr>
                                ))}
                            </tbody>
                        </table>
                    </pc-scroller>
                    <p>
                        Learn more about{" "}
                        <a href="/get-started/usage/#slots">using slots</a>.
                    </p>
                </section>
            )}

            {methods.length > 0 && (
                <section class="api-section">
                    <h2 id="methods">
                        Methods<a
                            class="heading-anchor"
                            href="#methods"
                            aria-label="Jump to this heading"
                            data-pagefind-ignore
                        >#</a>
                    </h2>
                    <pc-scroller class="table-wrapper" aria-labelledby="methods">
                        <table class="api-table">
                            <thead>
                                <tr>
                                    <th class="name">Name</th>
                                    <th class="description">Description</th>
                                    <th class="arguments">Arguments</th>
                                </tr>
                            </thead>
                            <tbody>
                                {methods.map((method) => (
                                    <tr>
                                        <td class="name">
                                            <code>{method.name}()</code>
                                        </td>
                                        <td class="description">
                                            {method.description && (
                                                <span
                                                    set:html={renderMarkdown(
                                                        method.description,
                                                    )}
                                                />
                                            )}
                                        </td>
                                        <td class="arguments">
                                            {method.parameters?.length
                                                ? method.parameters.map(
                                                      (param, index) => (
                                                          <>
                                                              <code>
                                                                  {param.name}:{" "}
                                                                  {formatType(
                                                                      param.type,
                                                                  )}
                                                              </code>
                                                              {index <
                                                                  method
                                                                      .parameters!
                                                                      .length -
                                                                      1 && ", "}
                                                          </>
                                                      ),
                                                  )
                                                : "‐"}
                                        </td>
                                    </tr>
                                ))}
                            </tbody>
                        </table>
                    </pc-scroller>
                    <p>
                        Learn more about{" "}
                        <a href="/get-started/usage/#methods">methods</a>.
                    </p>
                </section>
            )}

            {events.length > 0 && (
                <section class="api-section">
                    <h2 id="events">
                        Events<a
                            class="heading-anchor"
                            href="#events"
                            aria-label="Jump to this heading"
                            data-pagefind-ignore
                        >#</a>
                    </h2>
                    <pc-scroller class="table-wrapper" aria-labelledby="events">
                        <table class="api-table">
                            <thead>
                                <tr>
                                    <th class="name">Name</th>
                                    <th class="description">Description</th>
                                    <th class="event-detail">Event detail</th>
                                </tr>
                            </thead>
                            <tbody>
                                {events.map((event) => (
                                    <tr>
                                        <td class="name">
                                            <code>{event.name}</code>
                                        </td>
                                        <td class="description">
                                            {event.description && (
                                                <span
                                                    set:html={renderMarkdown(event.description)}
                                                />
                                            )}
                                        </td>
                                        <td class="event-detail">
                                            {event.type ? (
                                                <code>
                                                    {formatType(event.type)}
                                                </code>
                                            ) : (
                                                "‐"
                                            )}
                                        </td>
                                    </tr>
                                ))}
                            </tbody>
                        </table>
                    </pc-scroller>
                    <p>
                        Learn more about{" "}
                        <a href="/get-started/usage/#events">events</a>.
                    </p>
                </section>
            )}

            {cssProperties.length > 0 && (
                <section class="api-section">
                    <h2 id="custom-properties">
                        Custom properties<a
                            class="heading-anchor"
                            href="#custom-properties"
                            aria-label="Jump to this heading"
                            data-pagefind-ignore
                        >#</a>
                    </h2>
                    <pc-scroller class="table-wrapper" aria-labelledby="custom-properties">
                        <table class="api-table">
                            <thead>
                                <tr>
                                    <th class="name">Name</th>
                                    <th class="description">Description</th>
                                    <th class="default">Default</th>
                                </tr>
                            </thead>
                            <tbody>
                                {cssProperties.map((property) => (
                                    <tr>
                                        <td class="name">
                                            <code>{property.name}</code>
                                        </td>
                                        <td class="description">
                                            {property.description && (
                                                <span
                                                    set:html={renderMarkdown(property.description)}
                                                />
                                            )}
                                        </td>
                                        <td class="default">
                                            {property.default ? (
                                                <code>{property.default}</code>
                                            ) : (
                                                "‐"
                                            )}
                                        </td>
                                    </tr>
                                ))}
                            </tbody>
                        </table>
                    </pc-scroller>
                    <p>
                        Learn more about{" "}
                        <a href="/get-started/customisation/#custom-properties">customising custom properties</a>.
                    </p>
                </section>
            )}

            {cssParts.length > 0 && (
                <section class="api-section">
                    <h2 id="parts">
                        Parts<a
                            class="heading-anchor"
                            href="#parts"
                            aria-label="Jump to this heading"
                            data-pagefind-ignore
                        >#</a>
                    </h2>
                    <pc-scroller class="table-wrapper" aria-labelledby="parts">
                        <table class="api-table">
                            <thead>
                                <tr>
                                    <th class="name">Name</th>
                                    <th class="description">Description</th>
                                </tr>
                            </thead>
                            <tbody>
                                {cssParts.map((part) => (
                                    <tr>
                                        <td class="name">
                                            <code>{part.name}</code>
                                        </td>
                                        <td class="description">
                                            {part.description && (
                                                <span
                                                    set:html={renderMarkdown(part.description)}
                                                />
                                            )}
                                        </td>
                                    </tr>
                                ))}
                            </tbody>
                        </table>
                    </pc-scroller>
                    <p>
                        Learn more about{" "}
                        <a href="/get-started/customisation/#css-parts">customising CSS parts</a>.
                    </p>
                </section>
            )}

            {animations.length > 0 && (
                <section class="api-section">
                    <h2 id="animations">
                        Animations<a
                            class="heading-anchor"
                            href="#animations"
                            aria-label="Jump to this heading"
                            data-pagefind-ignore
                        >#</a>
                    </h2>
                    <pc-scroller class="table-wrapper">
                        <table class="api-table" aria-labelledby="animations">
                            <thead>
                                <tr>
                                    <th class="name">Name</th>
                                    <th class="description">Description</th>
                                </tr>
                            </thead>
                            <tbody>
                                {animations.map((animation) => (
                                    <tr>
                                        <td class="name">
                                            <code>{animation.name}</code>
                                        </td>
                                        <td class="description">
                                            {animation.description && (
                                                <span
                                                    set:html={renderMarkdown(animation.description)}
                                                />
                                            )}
                                        </td>
                                    </tr>
                                ))}
                            </tbody>
                        </table>
                    </pc-scroller>
                    <p>
                        Learn more about{" "}
                        <a href="/get-started/customisation/#animations">customising animations</a>.
                    </p>
                </section>
            )}

            <section class="api-section">
                <h2 id="importing">
                    Importing<a
                        class="heading-anchor"
                        href="#importing"
                        aria-label="Jump to this heading"
                        data-pagefind-ignore
                    >#</a>
                </h2>
                <p>
                    If you’re using the autoloader or the standard loader, you
                    can skip this section. But if you’re cherry picking, you can
                    use any of the following snippets to import this component.
                </p>

                <pc-tab-group>
                    <pc-tab slot="navigation" panel="cdn-script-tag">
                        CDN (script tag)
                    </pc-tab>
                    <pc-tab slot="navigation" panel="cdn-import">
                        CDN (import)
                    </pc-tab>
                    <pc-tab slot="navigation" panel="npm-import">
                        npm (import)
                    </pc-tab>

                    <pc-tab-panel name="cdn-script-tag">
                        <p>
                            To manually import this component from the CDN, copy this
                            code snippet and paste it in your HTML.
                        </p>
                        <CodeBlock language="html">
                        {`<script type="module" src="${cdnURL}"></script>`}
                        </CodeBlock>
                    </pc-tab-panel>
                    <pc-tab-panel name="cdn-import">
                        <p>
                            To manually import this component from the CDN, copy this
                            code snippet and paste it in your JavaScript file.
                        </p>
                        <CodeBlock language="javascript">
                        {`import "${cdnURL}";`}
                        </CodeBlock>
                    </pc-tab-panel>
                    <pc-tab-panel name="npm-import">
                        <p>
                            To manually import this component from npm, copy this
                            code snippet and paste it in your JavaScript file.
                        </p>
                        <CodeBlock language="javascript">
                        {`import "${importPath}";`}
                        </CodeBlock>
                    </pc-tab-panel>
                </pc-tab-group>
            </section>

            {dependencies.length > 0 && (
                <section class="api-section">
                    <h2 id="dependencies">
                        Dependencies<a
                            class="heading-anchor"
                            href="#dependencies"
                            aria-label="Jump to this heading"
                            data-pagefind-ignore
                        >#</a>
                    </h2>
                    <p>
                        This component automatically imports these components:
                    </p>
                    <ul>
                        {dependencies.map((dependency) => (
                            <li>
                                <a
                                    href={`/components/${dependency.substring(3).toLowerCase()}`}
                                >
                                    {formatComponentDisplayName(dependency)}
                                </a>
                            </li>
                        ))}
                    </ul>
                </section>
            )}
        </div>
    )
}

<style>
    section pc-scroller,
    section p {
        margin-block-end: var(--pc-content-spacing);
    }

    section pc-scroller table .name,
    section pc-scroller table .default,
    section pc-scroller table .arguments,
    section pc-scroller table .event-detail {
        white-space: nowrap;
    }

    section pc-scroller table .description {
        min-inline-size: 40ch;
    }

    section pc-scroller table .type-info b {
        font-weight: var(--pc-font-weight-semibold);
    }
</style>
