---
import "../styles/syntax/placer-eclipse.css";

const { open, noCodepen = false } = Astro.props;

const isOpen = open !== undefined && open !== false;
const uniqueId = Math.random().toString(36).slice(2, 11);
---

<div class="code-demo" data-open={isOpen} data-unique-id={uniqueId}>
    <div class="preview-block" id={`preview-block-${uniqueId}`}>
        <div class="preview-content-container" aria-live="polite">
            <div id={`preview-content-${uniqueId}`}></div>
        </div>
        <!-- The resize handle should NOT be able to be focused with keyboard navigation to match native behaviour -->
        <div
            class="resize-handle"
            id={`resize-handle-${uniqueId}`}
            tabindex="-1"
        >
            <pc-icon
                library="default"
                icon-style="solid"
                name="grip-lines-vertical"></pc-icon>
        </div>
    </div>

    <div
        class="code-block"
        id={`code-block-${uniqueId}`}
        class:list={[{ open: isOpen }]}
        aria-hidden={!isOpen}
        inert={!isOpen || undefined}
    >
        <pc-copy-button from={`code-content-${uniqueId}`}></pc-copy-button>
        <pre><code class="hljs language-html" id={`code-content-${uniqueId}`} tabindex="-1"><slot /></code></pre>
    </div>

    <div class="toggle-block">
        <pc-button
            appearance="neutral"
            variant="plain"
            size="small"
            id={`toggle-button-${uniqueId}`}
            aria-expanded={isOpen}
        >
            Code
            <pc-icon
                id={`chevron-${uniqueId}`}
                library="default"
                icon-style="solid"
                name="chevron-down"
                style={isOpen
                    ? "transform: rotate(180deg)"
                    : "transform: rotate(0deg)"}
                slot="suffix"></pc-icon>
        </pc-button>
        {
            !noCodepen && (
                <pc-button
                    appearance="neutral"
                    variant="plain"
                    size="small"
                    class="codepen-button"
                    id={`toggle-button-${uniqueId}`}
                >
                    <pc-icon
                        library="default"
                        icon-style="solid"
                        name="pen-to-square"
                        slot="prefix"
                    />
                    Edit
                </pc-button>
            )
        }
    </div>
</div>

<script>
    import hljs from "highlight.js";
    import html from "highlight.js/lib/languages/xml";

    hljs.registerLanguage("html", html);

    document.addEventListener("DOMContentLoaded", () => {
        document
            .querySelectorAll<HTMLDivElement>(".code-demo")
            .forEach((demoElement) => {
                const uniqueId = demoElement.dataset.uniqueId;

                const codeElement = demoElement.querySelector(
                    `#code-content-${uniqueId}`,
                ) as HTMLElement | null;
                const previewTargetElement = demoElement.querySelector(
                    `#preview-content-${uniqueId}`,
                ) as HTMLElement | null;
                const toggleButton = demoElement.querySelector(
                    `#toggle-button-${uniqueId}`,
                );
                const codeBlock = demoElement.querySelector(
                    `#code-block-${uniqueId}`,
                );
                const chevron = demoElement.querySelector(
                    `#chevron-${uniqueId}`,
                ) as HTMLElement;
                const previewBlock = demoElement.querySelector(
                    `#preview-block-${uniqueId}`,
                ) as HTMLElement | null;
                const resizeHandle = demoElement.querySelector(
                    `#resize-handle-${uniqueId}`,
                ) as HTMLElement | null;
                const codepenButton =
                    demoElement.querySelector(".codepen-button");

                if (
                    !codeElement ||
                    !previewTargetElement ||
                    !previewBlock ||
                    !resizeHandle
                ) {
                    console.error(
                        "[Code Demo]: Required elements are missing.",
                    );
                    return;
                }

                hljs.highlightElement(codeElement);

                function renderPreview() {
                    const rawHTMLText = codeElement?.textContent ?? "";

                    const textarea = document.createElement("textarea");
                    textarea.innerHTML = rawHTMLText;
                    const unescapedHTML = textarea.value;

                    const parser = new DOMParser();
                    const doc = parser.parseFromString(
                        unescapedHTML,
                        "text/html",
                    );

                    const scripts = Array.from(doc.querySelectorAll("script"));

                    scripts.forEach((script) => script.remove());

                    if (!previewTargetElement) {
                        return;
                    }

                    previewTargetElement.innerHTML = doc.body.innerHTML;

                    scripts.forEach((script) => {
                        let scriptCode = script.textContent || "";

                        scriptCode = scriptCode
                            .replace(
                                /^\s*import\s+\*\s+as\s+(\w+)\s+from\s+[""](.+?)[""];?/gm,
                                `const $1 = await import("$2");`,
                            )
                            .replace(
                                /^\s*import\s+{([^}]+)}\s+from\s+[""](.+?)[""];?/gm,
                                `const { $1 } = await import("$2");`,
                            )
                            .replace(
                                /^\s*import\s+(\w+)\s+from\s+[""](.+?)[""];?/gm,
                                `const $1 = (await import("$2")).default;`,
                            )
                            .replace(
                                /^\s*import\s+[""](.+?)[""];?/gm,
                                `await import("$1");`,
                            );

                        try {
                            const isAsync = /\bawait\b/.test(scriptCode);

                            const scopedFunction = isAsync
                                ? new Function(
                                      "root",
                                      `return (async () => { ${scriptCode} }).call(root);`,
                                  )
                                : new Function(
                                      "root",
                                      `(() => { ${scriptCode} }).call(root);`,
                                  );

                            const result = scopedFunction(previewTargetElement);

                            if (isAsync && result instanceof Promise) {
                                result.catch((error) => {
                                    console.error(
                                        `[Code Demo]: An asynchronous script error occurred. ${error}`,
                                    );
                                });
                            }
                        } catch (error) {
                            console.error(
                                `[Code Demo]: An error occurred executing the script. ${error}`,
                            );
                        }
                    });
                }

                let codeVisible =
                    demoElement.getAttribute("data-open") === "true";

                if (toggleButton && codeBlock && chevron) {
                    toggleButton.addEventListener("click", () => {
                        codeVisible = !codeVisible;

                        codeBlock.classList.toggle("open", codeVisible);
                        toggleButton.setAttribute(
                            "aria-expanded",
                            String(codeVisible),
                        );
                        codeBlock.setAttribute(
                            "aria-hidden",
                            String(!codeVisible),
                        );

                        if (codeVisible) {
                            codeBlock.removeAttribute("inert");
                        } else {
                            codeBlock.setAttribute("inert", "");
                        }

                        chevron.style.transform = codeVisible
                            ? "rotate(180deg)"
                            : "rotate(0deg)";
                    });
                } else {
                    console.error("[Code Demo]: The toggle setup failed.");
                }

                let isResizing = false;
                let startX = 0;
                let startWidth = 0;

                resizeHandle.addEventListener("mousedown", (event) => {
                    isResizing = true;
                    startX = event.clientX;
                    startWidth = previewBlock.offsetWidth;

                    document.body.style.cursor = "ew-resize";
                    document.body.style.userSelect = "none";

                    event.preventDefault();
                });

                document.addEventListener("mousemove", (event) => {
                    if (!isResizing) {
                        return;
                    }

                    const deltaX = event.clientX - startX;
                    const newWidth = Math.max(160, startWidth + deltaX);

                    previewBlock.style.inlineSize = `${newWidth}px`;
                });

                document.addEventListener("mouseup", () => {
                    if (isResizing) {
                        isResizing = false;
                        document.body.style.cursor = "";
                        document.body.style.userSelect = "";
                    }
                });

                if (codepenButton) {
                    const cdnURL =
                        "https://cdn.jsdelivr.net/npm/placer-toolkit@1.0.0-alpha.1";

                    const html =
                        `<link rel="stylesheet" href="https://fonts.bunny.net/css?family=jetbrains-mono:100,100i,200,200i,300,300i,400,400i,500,500i,600,600i,700,700i,800,800i|playfair-display:400,400i,500,500i,600,600i,700,700i,800,800i,900,900i|quicksand:300,400,500,600,700&display=swap" />\n` +
                        `<link rel="stylesheet" href="${cdnURL}/cdn/styles/placer.css" />\n` +
                        `<script type="module" src="${cdnURL}/cdn/placer-autoloader.js"><\/script>\n\n` +
                        `${codeElement.textContent}\n`;
                    const css =
                        `body {\n` +
                        `  padding: var(--pc-spacing-xxxl) !important;\n` +
                        `}`;
                    const js = "";

                    codepenButton.addEventListener("click", () => {
                        const form = document.createElement("form");
                        form.action = "https://codepen.io/pen/define";
                        form.method = "POST";
                        form.target = "_blank";

                        const data = {
                            title: "Edit code snippet | Placer Toolkit",
                            description: "",
                            tags: [
                                "lit",
                                "web-components",
                                "custom-elements",
                                "placer-toolkit",
                                "components",
                            ],
                            editors: "1000",
                            head:
                                `<meta charset="UTF-8" />\n` +
                                `<meta name="viewport" content="width=device-width, initial-scale=1.0" />`,
                            html_classes: "",
                            css_external: "",
                            js_external: "",
                            js_pre_processor: "none",
                            html,
                            css,
                            js,
                        };

                        const input = document.createElement("input");

                        input.type = "hidden";
                        input.name = "data";
                        input.value = JSON.stringify(data);

                        form.append(input);

                        document.documentElement.append(form);

                        form.submit();
                        form.remove();
                    });
                } else {
                    console.error(
                        "[Code Demo]: The CodePen button can’t be found.",
                    );
                }

                renderPreview();
            });
    });
</script>

<style>
    .code-demo {
        position: relative;
        background-color: var(--pc-color-surface-lowered);
        border: var(--pc-border-width-s) var(--pc-border-style)
            var(--pc-color-neutral-border-quiet);
        border-radius: var(--pc-border-radius-l);
        inline-size: 100%;
        margin-block-end: var(--pc-content-spacing);
        isolation: isolate;
        overflow: visible;
    }

    .preview-block {
        position: relative;
        background-color: var(--pc-color-surface-default);
        border-start-start-radius: var(--pc-border-radius-l);
        border-start-end-radius: var(--pc-border-radius-l);
        min-inline-size: 20rem;
        max-inline-size: 100%;
        overflow: visible;
    }

    .resize-handle {
        display: flex;
        position: absolute;
        align-items: center;
        justify-content: center;
        inset-block: 0;
        inset-inline-end: 0;
        inline-size: 1.75rem;
        border-inline-start: var(--pc-border-width-s) var(--pc-border-style)
            var(--pc-color-neutral-border-quiet);
        cursor: ew-resize;
    }

    .preview-content-container {
        position: relative;
        padding: var(--pc-spacing-xxl);
        padding-inline-end: calc(var(--pc-spacing-xxl) + 1.75rem);
        inline-size: 100%;
        block-size: 100%;
        overflow: visible;
    }

    .code-block {
        position: relative;
        background-color: var(--pc-color-surface-raised);
        border-block-start: var(--pc-border-width-s) var(--pc-border-style)
            var(--pc-color-neutral-border-quiet);
        overflow-x: auto;
        max-block-size: 0;
        /* 🧪 interpolate-size is an experimental property (✓ Chrome 129, Edge 129) */
        interpolate-size: allow-keywords;
        transition: max-block-size var(--pc-transition-fast) ease-out;
    }

    .code-block.open {
        max-block-size: max-content;
        transition: max-block-size var(--pc-transition-fast) ease-in;
    }

    .code-block :is(pre, code) {
        margin: 0 !important;
        padding: 0 !important;
        border-radius: 0;
        background-color: transparent;
    }

    .code-block .hljs {
        padding: var(--pc-spacing-l) !important;
        background-color: transparent;
        line-height: var(--pc-line-height-normal);
        font-size: var(--pc-font-size-xs);
    }

    .code-block pc-copy-button {
        position: absolute;
        inset-block-start: var(--pc-spacing-s);
        inset-inline-end: var(--pc-spacing-s);
    }

    .code-block pc-copy-button::part(button) {
        background-color: var(--pc-color-surface-raised);
    }

    @media (hover: hover) {
        .code-block pc-copy-button::part(button):hover {
            background-color: color-mix(
                in oklab,
                var(--pc-color-surface-raised),
                var(--pc-color-mix-hover)
            );
        }
    }

    .code-block pc-copy-button::part(button):focus-visible {
        background-color: color-mix(
            in oklab,
            var(--pc-color-surface-raised),
            var(--pc-color-mix-hover)
        );
    }

    .code-block pc-copy-button::part(button):active {
        background-color: color-mix(
            in oklab,
            var(--pc-color-surface-raised),
            var(--pc-color-mix-active)
        );
    }

    .code-block.open + .toggle-block {
        border-block-start: var(--pc-border-width-s) var(--pc-border-style)
            var(--pc-color-neutral-border-quiet);
    }

    .toggle-block {
        display: flex;
        align-items: center;
        justify-content: center;
        background-color: var(--pc-color-surface-default);
        border-end-start-radius: var(--pc-border-radius-l);
        border-end-end-radius: var(--pc-border-radius-l);
    }

    .toggle-block:has(.codepen-button) pc-button:first-child {
        inline-size: 85%;
    }

    .toggle-block:not(:has(.codepen-button)) pc-button {
        inline-size: 100%;
    }

    .toggle-block .codepen-button {
        min-inline-size: 5rem;
        inline-size: 15%;
        border-inline-start: var(--pc-border-width-s) var(--pc-border-style)
            var(--pc-color-neutral-border-quiet);
    }

    .toggle-block:has(.codepen-button) pc-button::part(base) {
        border-radius: 0;
        border-end-start-radius: var(--pc-border-radius-l);
    }

    .toggle-block:not(:has(.codepen-button)) pc-button::part(base) {
        border-radius: var(--pc-border-radius-l);
        border-start-start-radius: 0;
        border-start-end-radius: 0;
    }

    .toggle-block pc-button.codepen-button::part(base) {
        border-end-start-radius: 0;
        border-end-end-radius: var(--pc-border-radius-l);
    }

    .toggle-block pc-button pc-icon {
        transition: transform var(--pc-transition-fast) ease-in-out;
        transition-delay: var(--pc-transition-medium);
    }

    /* Disable the resize handle for mobile devices */
    @media (hover: none) {
        .preview-content-container {
            padding-inline-end: var(--pc-spacing-xxl);
        }

        .resize-handle {
            display: none;
        }
    }
</style>
