<pc-dropdown class="theme-selector" value="default">
    <pc-button size="small" variant="outlined" slot="trigger">
        <pc-icon
            class="icon-expand"
            library="default"
            icon-style="solid"
            name="paintbrush"></pc-icon>
    </pc-button>

    <pc-dropdown-item value="default">Default</pc-dropdown-item>
    <pc-dropdown-item value="utility">Utility</pc-dropdown-item>
    <pc-dropdown-item value="serene">Serene</pc-dropdown-item>
</pc-dropdown>

<pc-button class="color-scheme-toggle" variant="outlined" size="small">
    <pc-icon
        class="color-scheme-icon icon-expand"
        library="default"
        icon-style="solid"
        name="circle-half-stroke"
        label="System theme"></pc-icon>
</pc-button>

<script>
    import type { PcIcon } from "placer-toolkit/dist/components/icon/icon.js";

    let currentTheme: "light" | "dark" | null = null;

    function isEditableInPath(path: EventTarget[]) {
        return path.some((element) => {
            const tag = (element as HTMLElement)?.tagName?.toLowerCase();
            return (
                tag === "textarea" ||
                (tag === "input" &&
                    !["checkbox", "radio"].includes(
                        (element as HTMLInputElement).type,
                    )) ||
                (element as HTMLElement)?.isContentEditable
            );
        });
    }

    function parseTheme(value: string | null): "light" | "dark" | null {
        if (value === "light" || value === "dark") {
            return value;
        }

        return null;
    }

    function parseStyleTheme(value: string) {
        return ["default", "utility", "serene"].includes(value)
            ? value
            : "default";
    }

    function getStoredTheme(): "light" | "dark" | null {
        const stored = localStorage.getItem("saved-theme");
        return stored ? parseTheme(stored) : null;
    }

    function updateIcon(theme: "light" | "dark" | null) {
        const icon = document.querySelector(".color-scheme-icon") as PcIcon;

        if (!icon) {
            return;
        }

        if (theme === "light") {
            icon.name = "sun";
        } else if (theme === "dark") {
            icon.name = "moon";
        } else {
            icon.name = "circle-half-stroke";
        }
    }

    function applyColorTheme(theme: "light" | "dark" | null) {
        const prefersLight = window.matchMedia("(prefers-color-scheme: light)");
        const effectiveTheme =
            theme ?? (prefersLight.matches ? "light" : "dark");
        const root = document.documentElement;

        root.classList.remove("pc-light", "pc-dark");
        root.classList.add(`pc-${effectiveTheme}`);

        if (theme === null) {
            localStorage.removeItem("saved-theme");
        } else {
            localStorage.setItem("saved-theme", theme);
        }

        currentTheme = theme;

        const label = theme === null ? "System" : theme;
        const icon = document.querySelector(".color-scheme-icon") as PcIcon | null;

        if (icon) {
            icon.label = `${label} theme`;
        }

        updateIcon(theme);
    }

    function cycleTheme(
        current: "light" | "dark" | null,
    ): "light" | "dark" | null {
        if (current === "light") {
            return "dark";
        } else if (current === "dark") {
            return null;
        } else {
            return "light";
        }
    }

    document.addEventListener(
        "keydown",
        (event) => {
            const isBackslash =
                event.key === "\\" || event.code === "Backslash";

            if (!isBackslash) {
                return;
            }

            const path = (
                event.composedPath
                    ? event.composedPath()
                    : [document.activeElement]
            ).filter((element): element is EventTarget => element !== null);

            if (isEditableInPath(path)) {
                return;
            }

            event.preventDefault();

            const nextTheme = cycleTheme(currentTheme);

            applyColorTheme(nextTheme);
        },
        { capture: true, passive: false },
    );

    window.addEventListener("DOMContentLoaded", () => {
        const prefersLight = window.matchMedia("(prefers-color-scheme: light)");

        function getStoredStyleTheme() {
            return parseStyleTheme(
                localStorage.getItem("saved-color-theme") ?? "",
            );
        }

        function applyStyleTheme(styleTheme: string) {
            const root = document.documentElement;

            root.classList.remove(
                "pc-theme-utility",
                "pc-palette-vibrant",
                "pc-theme-serene",
                "pc-palette-muted",
            );

            if (styleTheme === "utility") {
                root.classList.add("pc-theme-utility", "pc-palette-vibrant");
            } else if (styleTheme === "serene") {
                root.classList.add("pc-theme-serene", "pc-palette-muted");
            }

            localStorage.setItem("saved-color-theme", styleTheme);
        }

        const button = document.querySelector(".color-scheme-toggle");
        const themeSelector = document.querySelector(".theme-selector");

        currentTheme = getStoredTheme();

        let currentStyleTheme = getStoredStyleTheme();

        applyColorTheme(currentTheme);
        applyStyleTheme(currentStyleTheme);

        button?.addEventListener("click", () => {
            const nextTheme = cycleTheme(currentTheme);

            applyColorTheme(nextTheme);
        });

        themeSelector?.addEventListener("pc-select", (event) => {
            const customEvent = event as CustomEvent;
            const newStyleTheme = customEvent.detail.item.value;

            if (typeof newStyleTheme === "string") {
                const finalTheme = parseStyleTheme(newStyleTheme);

                if (finalTheme !== currentStyleTheme) {
                    currentStyleTheme = finalTheme;
                    applyStyleTheme(currentStyleTheme);
                }
            }
        });

        prefersLight.addEventListener("change", () => {
            if (currentTheme === null) {
                applyColorTheme(null);
            }
        });
    });
</script>
