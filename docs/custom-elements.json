{
  "schemaVersion": "1.0.0",
  "readme": "",
  "modules": [
    {
      "kind": "javascript-module",
      "path": "components/animation/animation.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "PcAnimation",
          "slots": [
            {
              "description": "The element to animate. Avoid slotting in more than one element, as subsequent ones will be ignored. To animate multiple elements, either wrap them in a single container or use multiple `<pc-animation>` elements.",
              "name": "—"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "animation",
              "type": {
                "text": "Animation | undefined"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "hasStarted",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "default": "\"none\"",
              "description": "The name of the built‐in animation to use. For custom animations, use the `keyframes` prop.",
              "attribute": "name"
            },
            {
              "kind": "field",
              "name": "play",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Plays the animation. When omitted, the animation will be paused. This attribute will be automatically removed when the animation finishes or gets cancelled.",
              "attribute": "play",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "delay",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "The number of milliseconds to delay the start of the animation.",
              "attribute": "delay"
            },
            {
              "kind": "field",
              "name": "direction",
              "type": {
                "text": "PlaybackDirection"
              },
              "default": "\"normal\"",
              "description": "Determines the direction of playback as well as the behaviour when reaching the end of an iteration. Learn more about the CSS [`animation-direction`](https://developer.mozilla.org/en-US/docs/Web/CSS/animation-direction) property.",
              "attribute": "direction"
            },
            {
              "kind": "field",
              "name": "duration",
              "type": {
                "text": "number"
              },
              "default": "1000",
              "description": "The number of milliseconds each iteration of the animation takes to complete.",
              "attribute": "duration"
            },
            {
              "kind": "field",
              "name": "easing",
              "type": {
                "text": "string"
              },
              "default": "\"ease-in-out\"",
              "description": "The easing function to use for the animation. This can be an easing function name like `easeInSine` or a custom easing function like `cubic-bezier(0.12, 0, 0.39, 0)`.",
              "attribute": "easing"
            },
            {
              "kind": "field",
              "name": "endDelay",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "The number of milliseconds to delay after the active period of an animation sequence.",
              "attribute": "end-delay"
            },
            {
              "kind": "field",
              "name": "fill",
              "type": {
                "text": "FillMode"
              },
              "default": "\"auto\"",
              "description": "Sets how the animation applies styles to its target before and after its execution.",
              "attribute": "fill"
            },
            {
              "kind": "field",
              "name": "iterations",
              "default": "Infinity",
              "description": "The number of iterations to run before the animation completes.",
              "attribute": "iterations"
            },
            {
              "kind": "field",
              "name": "iterationStart",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "The offset at which to start the animation, usually between 0 (start) and 1 (end).",
              "attribute": "iteration-start"
            },
            {
              "kind": "field",
              "name": "keyframes",
              "type": {
                "text": "Keyframe[] | undefined"
              },
              "description": "The keyframes to use for the animation. If this is set, the `name` attribute and property will be ignored."
            },
            {
              "kind": "field",
              "name": "playbackRate",
              "type": {
                "text": "number"
              },
              "default": "1",
              "description": "Sets the animation’s playback rate. The default is `1`, which plays the animation at a normal speed. Setting this to `2`, for example, will double the animation’s speed. A negative value can be used to reverse the animation. This value can be changed without causing the animation to restart.",
              "attribute": "playback-rate"
            },
            {
              "kind": "field",
              "name": "currentTime",
              "type": {
                "text": "CSSNumberish"
              },
              "description": "Gets and sets the current animation time."
            },
            {
              "kind": "field",
              "name": "handleAnimationFinish",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "handleAnimationCancel",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleSlotChange",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "createAnimation",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "destroyAnimation",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "cancel",
              "description": "Clears all keyframes caused by this animation and aborts its playback."
            },
            {
              "kind": "method",
              "name": "finish",
              "description": "Sets the playback time to the end of the animation corresponding to the current playback direction."
            }
          ],
          "events": [
            {
              "description": "— Emitted when the animation is cancelled.",
              "name": "pc-cancel"
            },
            {
              "description": "— Emitted when the animation finishes.",
              "name": "pc-finish"
            },
            {
              "description": "— Emitted when the animation starts or restarts.",
              "name": "pc‐start"
            }
          ],
          "attributes": [
            {
              "name": "name",
              "type": {
                "text": "string"
              },
              "default": "\"none\"",
              "description": "The name of the built‐in animation to use. For custom animations, use the `keyframes` prop.",
              "fieldName": "name"
            },
            {
              "name": "play",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Plays the animation. When omitted, the animation will be paused. This attribute will be automatically removed when the animation finishes or gets cancelled.",
              "fieldName": "play"
            },
            {
              "name": "delay",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "The number of milliseconds to delay the start of the animation.",
              "fieldName": "delay"
            },
            {
              "name": "direction",
              "type": {
                "text": "PlaybackDirection"
              },
              "default": "\"normal\"",
              "description": "Determines the direction of playback as well as the behaviour when reaching the end of an iteration. Learn more about the CSS [`animation-direction`](https://developer.mozilla.org/en-US/docs/Web/CSS/animation-direction) property.",
              "fieldName": "direction"
            },
            {
              "name": "duration",
              "type": {
                "text": "number"
              },
              "default": "1000",
              "description": "The number of milliseconds each iteration of the animation takes to complete.",
              "fieldName": "duration"
            },
            {
              "name": "easing",
              "type": {
                "text": "string"
              },
              "default": "\"ease-in-out\"",
              "description": "The easing function to use for the animation. This can be an easing function name like `easeInSine` or a custom easing function like `cubic-bezier(0.12, 0, 0.39, 0)`.",
              "fieldName": "easing"
            },
            {
              "name": "end-delay",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "The number of milliseconds to delay after the active period of an animation sequence.",
              "fieldName": "endDelay"
            },
            {
              "name": "fill",
              "type": {
                "text": "FillMode"
              },
              "default": "\"auto\"",
              "description": "Sets how the animation applies styles to its target before and after its execution.",
              "fieldName": "fill"
            },
            {
              "name": "iterations",
              "default": "Infinity",
              "description": "The number of iterations to run before the animation completes.",
              "fieldName": "iterations"
            },
            {
              "name": "iteration-start",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "The offset at which to start the animation, usually between 0 (start) and 1 (end).",
              "fieldName": "iterationStart"
            },
            {
              "name": "playback-rate",
              "type": {
                "text": "number"
              },
              "default": "1",
              "description": "Sets the animation’s playback rate. The default is `1`, which plays the animation at a normal speed. Setting this to `2`, for example, will double the animation’s speed. A negative value can be used to reverse the animation. This value can be changed without causing the animation to restart.",
              "fieldName": "playbackRate"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "summary": "Animate elements declaratively with nearly 100 baked‐in presets, or roll your own with custom keyframes. These animations are powered by the [Web Animations API](https://developer.mozilla.org/en-US/docs/Web/API/Web_Animations_API).",
          "jsDoc": "/**\n * @summary Animate elements declaratively with nearly 100 baked‐in presets, or roll your own with custom keyframes. These animations are powered by the [Web Animations API](https://developer.mozilla.org/en-US/docs/Web/API/Web_Animations_API).\n * @status experimental\n * @since 0.4.0\n *\n * @event pc-cancel — Emitted when the animation is cancelled.\n * @event pc-finish — Emitted when the animation finishes.\n * @event pc‐start — Emitted when the animation starts or restarts.\n *\n * @slot — The element to animate. Avoid slotting in more than one element, as subsequent ones will be ignored. To animate multiple elements, either wrap them in a single container or use multiple `<pc-animation>` elements.\n */",
          "status": "experimental",
          "since": "0.4.0",
          "tagName": "pc-animation",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "PcAnimation",
          "declaration": {
            "name": "PcAnimation",
            "module": "components/animation/animation.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "pc-animation",
          "declaration": {
            "name": "PcAnimation",
            "module": "components/animation/animation.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/avatar/avatar.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "PcAvatar",
          "cssProperties": [
            {
              "description": "— The size of the avatar.",
              "name": "--size"
            }
          ],
          "cssParts": [
            {
              "description": "— The component’s base wrapper.",
              "name": "base"
            },
            {
              "description": "— The container that wraps the avatar’s icon.",
              "name": "icon"
            },
            {
              "description": "— The container that wraps the avatar’s initials.",
              "name": "initials"
            },
            {
              "description": "— The avatar image. Only shown when the `image` attribute is set.",
              "name": "image"
            }
          ],
          "slots": [
            {
              "description": "— The default icon to use when no image or initials are present. Works best with `<pc-icon>`.",
              "name": "icon"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "hasError",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "image",
              "type": {
                "text": "string"
              },
              "default": "\"\"",
              "description": "The image source to use for the avatar.",
              "attribute": "image"
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "\"\"",
              "description": "A label to use to describe the avatar to assistive devices.",
              "attribute": "label"
            },
            {
              "kind": "field",
              "name": "initials",
              "type": {
                "text": "string"
              },
              "default": "\"\"",
              "description": "Initials to use as a fallback when no image is available (1–2 characters recommended).",
              "attribute": "initials"
            },
            {
              "kind": "field",
              "name": "loading",
              "type": {
                "text": "\"eager\" | \"lazy\""
              },
              "default": "\"eager\"",
              "description": "Indicates how the browser should load the image.",
              "attribute": "loading"
            },
            {
              "kind": "field",
              "name": "shape",
              "type": {
                "text": "\"circle\" | \"rounded\" | \"square\""
              },
              "default": "\"circle\"",
              "description": "The shape of the avatar.",
              "attribute": "shape",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "handleImageLoadError",
              "privacy": "private"
            }
          ],
          "events": [
            {
              "description": "— Emitted when the image couldn’t be loaded. This may be because of an invalid URL, a temporary network error or some other unknown cause.",
              "name": "pc-error"
            }
          ],
          "attributes": [
            {
              "name": "image",
              "type": {
                "text": "string"
              },
              "default": "\"\"",
              "description": "The image source to use for the avatar.",
              "fieldName": "image"
            },
            {
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "\"\"",
              "description": "A label to use to describe the avatar to assistive devices.",
              "fieldName": "label"
            },
            {
              "name": "initials",
              "type": {
                "text": "string"
              },
              "default": "\"\"",
              "description": "Initials to use as a fallback when no image is available (1–2 characters recommended).",
              "fieldName": "initials"
            },
            {
              "name": "loading",
              "type": {
                "text": "\"eager\" | \"lazy\""
              },
              "default": "\"eager\"",
              "description": "Indicates how the browser should load the image.",
              "fieldName": "loading"
            },
            {
              "name": "shape",
              "type": {
                "text": "\"circle\" | \"rounded\" | \"square\""
              },
              "default": "\"circle\"",
              "description": "The shape of the avatar.",
              "fieldName": "shape"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "summary": "Avatars are used to represent a person or object.",
          "jsDoc": "/**\n * @summary Avatars are used to represent a person or object.\n * @status experimental\n * @since 0.1.0\n *\n * @dependency pc-icon\n *\n * @event pc-error — Emitted when the image couldn’t be loaded. This may be because of an invalid URL, a temporary network error or some other unknown cause.\n *\n * @slot icon — The default icon to use when no image or initials are present. Works best with `<pc-icon>`.\n *\n * @csspart base — The component’s base wrapper.\n * @csspart icon — The container that wraps the avatar’s icon.\n * @csspart initials — The container that wraps the avatar’s initials.\n * @csspart image — The avatar image. Only shown when the `image` attribute is set.\n *\n * @cssproperty --size — The size of the avatar.\n */",
          "status": "experimental",
          "since": "0.1.0",
          "dependencies": [
            "pc-icon"
          ],
          "tagName": "pc-avatar",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "PcAvatar",
          "declaration": {
            "name": "PcAvatar",
            "module": "components/avatar/avatar.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "pc-avatar",
          "declaration": {
            "name": "PcAvatar",
            "module": "components/avatar/avatar.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/button/button.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "PcButton",
          "cssParts": [
            {
              "description": "— The component’s base wrapper.",
              "name": "base"
            },
            {
              "description": "— The container that wraps the prefix.",
              "name": "prefix"
            },
            {
              "description": "— The button’s label.",
              "name": "label"
            },
            {
              "description": "— The container that wraps the suffix.",
              "name": "suffix"
            }
          ],
          "slots": [
            {
              "description": "The button’s label.",
              "name": "—"
            },
            {
              "description": "— A presentational prefix icon or similar element.",
              "name": "prefix"
            },
            {
              "description": "— A presentational suffix icon or similar element.",
              "name": "suffix"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "formControlController",
              "privacy": "private",
              "readonly": true,
              "default": "new FormControlController(this, { assumeInteractionOn: [\"click\"], })"
            },
            {
              "kind": "field",
              "name": "hasSlotController",
              "privacy": "private",
              "readonly": true,
              "default": "new HasSlotController( this, \"[default]\", \"prefix\", \"suffix\", )"
            },
            {
              "kind": "field",
              "name": "hasFocus",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "appearance",
              "type": {
                "text": "| \"default\"\n        | \"primary\"\n        | \"success\"\n        | \"warning\"\n        | \"danger\"\n        | \"text\""
              },
              "default": "\"default\"",
              "description": "The button’s appearance.",
              "attribute": "appearance",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "\"small\" | \"medium\" | \"large\""
              },
              "default": "\"medium\"",
              "description": "The button’s size.",
              "attribute": "size",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disables the button.",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "outlined",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Draws an outlined button.",
              "attribute": "outlined",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "pill",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Draws a pill‐style button.",
              "attribute": "pill",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "\"button\" | \"submit\" | \"reset\""
              },
              "default": "\"button\"",
              "description": "The type of button. Note that the default value is `button` instead of `submit`, which is opposite of how native `<button>` elements behave. When the type is `submit`, the button will submit the surrounding form.",
              "attribute": "type",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "default": "\"\"",
              "description": "The name of the button, submitted as a name/value pair with form data, but only when this button is the submitter.",
              "attribute": "name"
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string"
              },
              "default": "\"\"",
              "description": "The value of the button, submitted as a pair with the button’s name as part of the form data, but only when this button is the submitter. This attribute is ignored when the `href` attribute is present.",
              "attribute": "value"
            },
            {
              "kind": "field",
              "name": "href",
              "type": {
                "text": "string"
              },
              "default": "\"\"",
              "description": "When set, the underlying button will be rendered as an `<a>` with this `href` instead of a `<button>`.",
              "attribute": "href"
            },
            {
              "kind": "field",
              "name": "target",
              "type": {
                "text": "\"_blank\" | \"_parent\" | \"_self\" | \"_top\" | undefined"
              },
              "description": "Tells the browser where to open the link. It should only be used when the `href` attribute is present.",
              "attribute": "target"
            },
            {
              "kind": "field",
              "name": "rel",
              "type": {
                "text": "string"
              },
              "default": "\"noreferrer noopener\"",
              "description": "When using the `href` attribute, this attribute will map to the underlying link’s `rel` attribute. Unlike regular links, the default set for this attribute is `noreferrer noopener` to prevent security exploits. However, if you’re using `target` to point to a specific tab or window, this will prevent that from working properly. You can remove or change the default value by setting the attribute to an empty string or a value of your choice, respectively.",
              "attribute": "rel"
            },
            {
              "kind": "field",
              "name": "download",
              "type": {
                "text": "string | undefined"
              },
              "description": "Tells the browser to download the linked file as this file name. Only used when the `href` attribute is present.",
              "attribute": "download"
            },
            {
              "kind": "field",
              "name": "form",
              "type": {
                "text": "string | undefined"
              },
              "description": "This is the “form owner” to associate the button with. If omitted, the closest containing form will be used instead. The value of this attribute must be an id of a form in the same document or shadow root as the button.",
              "attribute": "form"
            },
            {
              "kind": "field",
              "name": "formAction",
              "type": {
                "text": "string | undefined"
              },
              "description": "Used to override the form owner’s `action` attribute.",
              "attribute": "formaction"
            },
            {
              "kind": "field",
              "name": "formEnctype",
              "type": {
                "text": "| \"application/x-www-form-url-encoded\"\n        | \"multipart/form-data\"\n        | \"text/plain\" | undefined"
              },
              "description": "Used to override the form owner’s `enctype` attribute.",
              "attribute": "formenctype"
            },
            {
              "kind": "field",
              "name": "formMethod",
              "type": {
                "text": "\"GET\" | \"POST\" | undefined"
              },
              "description": "Used to override the form owner’s `method` attribute.",
              "attribute": "formmethod"
            },
            {
              "kind": "field",
              "name": "formNoValidate",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Used to override the form owner’s `novalidate` attribute.",
              "attribute": "formnovalidate"
            },
            {
              "kind": "field",
              "name": "formTarget",
              "type": {
                "text": "| \"_self\"\n        | \"_blank\"\n        | \"_parent\"\n        | \"_top\"\n        | string | undefined"
              },
              "description": "Used to override the form owner’s `target` attribute.",
              "attribute": "formtarget"
            },
            {
              "kind": "field",
              "name": "direction",
              "type": {
                "text": "\"ltr\" | \"rtl\""
              },
              "privacy": "private",
              "default": "\"ltr\""
            },
            {
              "kind": "field",
              "name": "validity",
              "description": "Gets the validity state object.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "validationMessage",
              "description": "Gets the validation message.",
              "readonly": true
            },
            {
              "kind": "method",
              "name": "handleClick",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleFocus",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleBlur",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleInvalid",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "isButton",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "isLink",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "click",
              "description": "Simulates a click on the button."
            },
            {
              "kind": "method",
              "name": "focus",
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "FocusOptions"
                  }
                }
              ],
              "description": "Focuses the button."
            },
            {
              "kind": "method",
              "name": "blur",
              "description": "Unfocuses the button (i.e. blurs it)."
            },
            {
              "kind": "method",
              "name": "checkValidity",
              "description": "Checks for validity but doesn’t show a validation message. Returns `true` when valid and `false` when invalid."
            },
            {
              "kind": "method",
              "name": "getForm",
              "return": {
                "type": {
                  "text": "HTMLFormElement | null"
                }
              },
              "description": "Gets the associated form if one exists."
            },
            {
              "kind": "method",
              "name": "reportValidity",
              "description": "Checks for validity and shows the browser’s validation message if the control is invalid."
            },
            {
              "kind": "method",
              "name": "setCustomValidity",
              "parameters": [
                {
                  "name": "message",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Sets a custom validation message. Pass an empty string to restore validity."
            }
          ],
          "events": [
            {
              "description": "— Emitted when the button gains focus.",
              "name": "pc-focus"
            },
            {
              "description": "— Emitted when the button loses focus (i.e. is blurred).",
              "name": "pc-blur"
            },
            {
              "description": "— Emitted when the form control has been checked for validity and its constraints aren’t satisfied.",
              "name": "pc-invalid"
            }
          ],
          "attributes": [
            {
              "name": "appearance",
              "type": {
                "text": "| \"default\"\n        | \"primary\"\n        | \"success\"\n        | \"warning\"\n        | \"danger\"\n        | \"text\""
              },
              "default": "\"default\"",
              "description": "The button’s appearance.",
              "fieldName": "appearance"
            },
            {
              "name": "size",
              "type": {
                "text": "\"small\" | \"medium\" | \"large\""
              },
              "default": "\"medium\"",
              "description": "The button’s size.",
              "fieldName": "size"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disables the button.",
              "fieldName": "disabled"
            },
            {
              "name": "outlined",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Draws an outlined button.",
              "fieldName": "outlined"
            },
            {
              "name": "pill",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Draws a pill‐style button.",
              "fieldName": "pill"
            },
            {
              "name": "type",
              "type": {
                "text": "\"button\" | \"submit\" | \"reset\""
              },
              "default": "\"button\"",
              "description": "The type of button. Note that the default value is `button` instead of `submit`, which is opposite of how native `<button>` elements behave. When the type is `submit`, the button will submit the surrounding form.",
              "fieldName": "type"
            },
            {
              "name": "name",
              "type": {
                "text": "string"
              },
              "default": "\"\"",
              "description": "The name of the button, submitted as a name/value pair with form data, but only when this button is the submitter.",
              "fieldName": "name"
            },
            {
              "name": "value",
              "type": {
                "text": "string"
              },
              "default": "\"\"",
              "description": "The value of the button, submitted as a pair with the button’s name as part of the form data, but only when this button is the submitter. This attribute is ignored when the `href` attribute is present.",
              "fieldName": "value"
            },
            {
              "name": "href",
              "type": {
                "text": "string"
              },
              "default": "\"\"",
              "description": "When set, the underlying button will be rendered as an `<a>` with this `href` instead of a `<button>`.",
              "fieldName": "href"
            },
            {
              "name": "target",
              "type": {
                "text": "\"_blank\" | \"_parent\" | \"_self\" | \"_top\" | undefined"
              },
              "description": "Tells the browser where to open the link. It should only be used when the `href` attribute is present.",
              "fieldName": "target"
            },
            {
              "name": "rel",
              "type": {
                "text": "string"
              },
              "default": "\"noreferrer noopener\"",
              "description": "When using the `href` attribute, this attribute will map to the underlying link’s `rel` attribute. Unlike regular links, the default set for this attribute is `noreferrer noopener` to prevent security exploits. However, if you’re using `target` to point to a specific tab or window, this will prevent that from working properly. You can remove or change the default value by setting the attribute to an empty string or a value of your choice, respectively.",
              "fieldName": "rel"
            },
            {
              "name": "download",
              "type": {
                "text": "string | undefined"
              },
              "description": "Tells the browser to download the linked file as this file name. Only used when the `href` attribute is present.",
              "fieldName": "download"
            },
            {
              "name": "form",
              "type": {
                "text": "string | undefined"
              },
              "description": "This is the “form owner” to associate the button with. If omitted, the closest containing form will be used instead. The value of this attribute must be an id of a form in the same document or shadow root as the button.",
              "fieldName": "form"
            },
            {
              "name": "formaction",
              "type": {
                "text": "string | undefined"
              },
              "description": "Used to override the form owner’s `action` attribute.",
              "fieldName": "formAction"
            },
            {
              "name": "formenctype",
              "type": {
                "text": "| \"application/x-www-form-url-encoded\"\n        | \"multipart/form-data\"\n        | \"text/plain\" | undefined"
              },
              "description": "Used to override the form owner’s `enctype` attribute.",
              "fieldName": "formEnctype"
            },
            {
              "name": "formmethod",
              "type": {
                "text": "\"GET\" | \"POST\" | undefined"
              },
              "description": "Used to override the form owner’s `method` attribute.",
              "fieldName": "formMethod"
            },
            {
              "name": "formnovalidate",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Used to override the form owner’s `novalidate` attribute.",
              "fieldName": "formNoValidate"
            },
            {
              "name": "formtarget",
              "type": {
                "text": "| \"_self\"\n        | \"_blank\"\n        | \"_parent\"\n        | \"_top\"\n        | string | undefined"
              },
              "description": "Used to override the form owner’s `target` attribute.",
              "fieldName": "formTarget"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "summary": "Buttons represent actions that are available to the user.",
          "jsDoc": "/**\n * @summary Buttons represent actions that are available to the user.\n * @status experimental\n * @since 0.1.0\n *\n * @dependency pc-icon\n *\n * @slot — The button’s label.\n * @slot prefix — A presentational prefix icon or similar element.\n * @slot suffix — A presentational suffix icon or similar element.\n *\n * @event pc-focus — Emitted when the button gains focus.\n * @event pc-blur — Emitted when the button loses focus (i.e. is blurred).\n * @event pc-invalid — Emitted when the form control has been checked for validity and its constraints aren’t satisfied.\n *\n * @csspart base — The component’s base wrapper.\n * @csspart prefix — The container that wraps the prefix.\n * @csspart label — The button’s label.\n * @csspart suffix — The container that wraps the suffix.\n */",
          "status": "experimental",
          "since": "0.1.0",
          "dependencies": [
            "pc-icon"
          ],
          "tagName": "pc-button",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "PcButton",
          "declaration": {
            "name": "PcButton",
            "module": "components/button/button.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "pc-button",
          "declaration": {
            "name": "PcButton",
            "module": "components/button/button.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/badge/badge.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "PcBadge",
          "cssParts": [
            {
              "description": "— The component’s base wrapper.",
              "name": "base"
            }
          ],
          "slots": [
            {
              "description": "The badge’s content.",
              "name": "—"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "appearance",
              "type": {
                "text": "| \"primary\"\n        | \"success\"\n        | \"neutral\"\n        | \"warning\"\n        | \"danger\""
              },
              "default": "\"primary\"",
              "description": "The badge’s appearance.",
              "attribute": "appearance",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "rounded",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Gives the badge a rounded rectangle shape.",
              "attribute": "rounded",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "pulse",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Makes the badge pulsate to draw attention.",
              "attribute": "pulse",
              "reflects": true
            }
          ],
          "attributes": [
            {
              "name": "appearance",
              "type": {
                "text": "| \"primary\"\n        | \"success\"\n        | \"neutral\"\n        | \"warning\"\n        | \"danger\""
              },
              "default": "\"primary\"",
              "description": "The badge’s appearance.",
              "fieldName": "appearance"
            },
            {
              "name": "rounded",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Gives the badge a rounded rectangle shape.",
              "fieldName": "rounded"
            },
            {
              "name": "pulse",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Makes the badge pulsate to draw attention.",
              "fieldName": "pulse"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "summary": "Badges are used to draw attention and display statuses or counts.",
          "jsDoc": "/**\n * @summary Badges are used to draw attention and display statuses or counts.\n * @status experimental\n * @since 0.1.0\n *\n * @slot — The badge’s content.\n *\n * @csspart base — The component’s base wrapper.\n */",
          "status": "experimental",
          "since": "0.1.0",
          "tagName": "pc-badge",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "PcBadge",
          "declaration": {
            "name": "PcBadge",
            "module": "components/badge/badge.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "pc-badge",
          "declaration": {
            "name": "PcBadge",
            "module": "components/badge/badge.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/button-group/button-group.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "PcButtonGroup",
          "cssParts": [
            {
              "description": "— The component’s base wrapper.",
              "name": "base"
            }
          ],
          "slots": [
            {
              "description": "One or more `<pc-button>` elements to display in the button group.",
              "name": "—"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "\"\"",
              "description": "A label to use for the button group. This won’t be displayed on the screen, but it will be announced by assistive devices when interacting with the control and is highly recommended.",
              "attribute": "label"
            },
            {
              "kind": "method",
              "name": "handleFocus",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleBlur",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleMouseOver",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleMouseOut",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleSlotChange",
              "privacy": "private"
            }
          ],
          "attributes": [
            {
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "\"\"",
              "description": "A label to use for the button group. This won’t be displayed on the screen, but it will be announced by assistive devices when interacting with the control and is highly recommended.",
              "fieldName": "label"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "summary": "Button groups can be used to group related buttons into groups.",
          "jsDoc": "/**\n * @summary Button groups can be used to group related buttons into groups.\n * @status experimental\n * @since 0.3.0\n *\n * @slot — One or more `<pc-button>` elements to display in the button group.\n *\n * @csspart base — The component’s base wrapper.\n */",
          "status": "experimental",
          "since": "0.3.0",
          "tagName": "pc-button-group",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "PcButtonGroup",
          "declaration": {
            "name": "PcButtonGroup",
            "module": "components/button-group/button-group.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "pc-button-group",
          "declaration": {
            "name": "PcButtonGroup",
            "module": "components/button-group/button-group.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/callout/callout.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "PcCallout",
          "cssParts": [
            {
              "description": "— The component’s base wrapper.",
              "name": "base"
            },
            {
              "description": "— The callout’s icon.",
              "name": "icon"
            },
            {
              "description": "— The callout’s content.",
              "name": "message"
            }
          ],
          "slots": [
            {
              "description": "The callout’s content.",
              "name": "—"
            },
            {
              "description": "— An informational icon.",
              "name": "icon"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "appearance",
              "type": {
                "text": "| \"primary\"\n        | \"success\"\n        | \"neutral\"\n        | \"warning\"\n        | \"danger\""
              },
              "default": "\"primary\"",
              "description": "The callout’s appearance.",
              "attribute": "appearance"
            }
          ],
          "attributes": [
            {
              "name": "appearance",
              "type": {
                "text": "| \"primary\"\n        | \"success\"\n        | \"neutral\"\n        | \"warning\"\n        | \"danger\""
              },
              "default": "\"primary\"",
              "description": "The callout’s appearance.",
              "fieldName": "appearance"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "summary": "Callouts are used to display important messages inline.",
          "jsDoc": "/**\n * @summary Callouts are used to display important messages inline.\n * @status experimental\n * @since 0.5.0\n *\n * @slot — The callout’s content.\n * @slot icon — An informational icon.\n *\n * @csspart base — The component’s base wrapper.\n * @csspart icon — The callout’s icon.\n * @csspart message — The callout’s content.\n */",
          "status": "experimental",
          "since": "0.5.0",
          "tagName": "pc-callout",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "PcCallout",
          "declaration": {
            "name": "PcCallout",
            "module": "components/callout/callout.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "pc-callout",
          "declaration": {
            "name": "PcCallout",
            "module": "components/callout/callout.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/card/card.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "PcCard",
          "cssProperties": [
            {
              "description": "— The card’s border colour, including borders inside the card.",
              "name": "--border-color"
            },
            {
              "description": "— The border radius of the card.",
              "name": "--border-radius"
            },
            {
              "description": "— The stroke width of the card’s borders.",
              "name": "--border-width"
            },
            {
              "description": "— The padding surrounding the card’s content.",
              "name": "--padding"
            }
          ],
          "cssParts": [
            {
              "description": "— The component’s base wrapper.",
              "name": "base"
            },
            {
              "description": "— The container that wraps the card’s image.",
              "name": "image"
            },
            {
              "description": "— The container that wraps the card’s header.",
              "name": "header"
            },
            {
              "description": "— The container that wraps the card’s main content.",
              "name": "body"
            },
            {
              "description": "— The container that wraps the card’s footer.",
              "name": "footer"
            }
          ],
          "slots": [
            {
              "description": "The card’s main content.",
              "name": "—"
            },
            {
              "description": "— An optional image to render at the start of the card.",
              "name": "image"
            },
            {
              "description": "— An optional header for the card.",
              "name": "header"
            },
            {
              "description": "— An optional footer for the card.",
              "name": "footer"
            },
            {
              "description": "— An optional image to render at the start of the card.",
              "name": "image"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "hasSlotController",
              "privacy": "private",
              "readonly": true,
              "default": "new HasSlotController( this, \"image\", \"header\", \"footer\", )"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "summary": "Cards can be used to group related subjects in a container.",
          "jsDoc": "/**\n * @summary Cards can be used to group related subjects in a container.\n * @status experimental\n * @since 0.1.0\n *\n * @slot — The card’s main content.\n * @slot image — An optional image to render at the start of the card.\n * @slot header — An optional header for the card.\n * @slot footer — An optional footer for the card.\n * @slot image — An optional image to render at the start of the card.\n *\n * @csspart base — The component’s base wrapper.\n * @csspart image — The container that wraps the card’s image.\n * @csspart header — The container that wraps the card’s header.\n * @csspart body — The container that wraps the card’s main content.\n * @csspart footer — The container that wraps the card’s footer.\n *\n * @cssproperty --border-color — The card’s border colour, including borders inside the card.\n * @cssproperty --border-radius — The border radius of the card.\n * @cssproperty --border-width — The stroke width of the card’s borders.\n * @cssproperty --padding — The padding surrounding the card’s content.\n */",
          "status": "experimental",
          "since": "0.1.0",
          "tagName": "pc-card",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "PcCard",
          "declaration": {
            "name": "PcCard",
            "module": "components/card/card.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "pc-card",
          "declaration": {
            "name": "PcCard",
            "module": "components/card/card.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/checkbox/checkbox.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "PcCheckbox",
          "members": [
            {
              "kind": "field",
              "name": "dependencies",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{ \"pc-icon\": PcIcon }"
            },
            {
              "kind": "field",
              "name": "formControlController",
              "privacy": "private",
              "readonly": true,
              "default": "new FormControlController(this, { value: (control: PcCheckbox) => control.checked ? control.value || \"on\" : undefined, defaultValue: (control: PcCheckbox) => control.defaultChecked, setValue: (control: PcCheckbox, checked: boolean) => (control.checked = checked), })"
            },
            {
              "kind": "field",
              "name": "hasSlotController",
              "privacy": "private",
              "readonly": true,
              "default": "new HasSlotController(this, \"hint\")"
            },
            {
              "kind": "field",
              "name": "input",
              "type": {
                "text": "HTMLInputElement"
              }
            },
            {
              "kind": "field",
              "name": "hasFocus",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "isFadingOut",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "checked",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "checked",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "defaultChecked",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "form",
              "type": {
                "text": "string"
              },
              "default": "\"\"",
              "attribute": "form",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "hint",
              "type": {
                "text": "string"
              },
              "default": "\"\"",
              "attribute": "hint"
            },
            {
              "kind": "field",
              "name": "indeterminate",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "indeterminate",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "invalid",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "invalid",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "default": "\"\"",
              "attribute": "name"
            },
            {
              "kind": "field",
              "name": "pressed",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "pressed",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "required"
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "\"small\" | \"medium\" | \"large\""
              },
              "default": "\"medium\"",
              "attribute": "size",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "title",
              "type": {
                "text": "string"
              },
              "default": "\"\"",
              "attribute": "title"
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string"
              },
              "default": "\"\"",
              "attribute": "value"
            },
            {
              "kind": "field",
              "name": "validity",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "validationMessage",
              "readonly": true
            },
            {
              "kind": "method",
              "name": "handleClick",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleFocus",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleBlur",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleInput",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleInvalid",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleDisabledChange"
            },
            {
              "kind": "method",
              "name": "handleStateChange"
            },
            {
              "kind": "method",
              "name": "click"
            },
            {
              "kind": "method",
              "name": "focus",
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "FocusOptions"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "blur"
            },
            {
              "kind": "method",
              "name": "checkValidity"
            },
            {
              "kind": "method",
              "name": "getForm",
              "return": {
                "type": {
                  "text": "HTMLFormElement | null"
                }
              }
            },
            {
              "kind": "method",
              "name": "reportValidity"
            },
            {
              "kind": "method",
              "name": "setCustomValidity",
              "parameters": [
                {
                  "name": "message",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            }
          ],
          "attributes": [
            {
              "name": "checked",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "checked"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "disabled"
            },
            {
              "name": "form",
              "type": {
                "text": "string"
              },
              "default": "\"\"",
              "fieldName": "form"
            },
            {
              "name": "hint",
              "type": {
                "text": "string"
              },
              "default": "\"\"",
              "fieldName": "hint"
            },
            {
              "name": "indeterminate",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "indeterminate"
            },
            {
              "name": "invalid",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "invalid"
            },
            {
              "name": "name",
              "type": {
                "text": "string"
              },
              "default": "\"\"",
              "fieldName": "name"
            },
            {
              "name": "pressed",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "pressed"
            },
            {
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "required"
            },
            {
              "name": "size",
              "type": {
                "text": "\"small\" | \"medium\" | \"large\""
              },
              "default": "\"medium\"",
              "fieldName": "size"
            },
            {
              "name": "title",
              "type": {
                "text": "string"
              },
              "default": "\"\"",
              "fieldName": "title"
            },
            {
              "name": "value",
              "type": {
                "text": "string"
              },
              "default": "\"\"",
              "fieldName": "value"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "pc-checkbox",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "PcCheckbox",
          "declaration": {
            "name": "PcCheckbox",
            "module": "components/checkbox/checkbox.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "pc-checkbox",
          "declaration": {
            "name": "PcCheckbox",
            "module": "components/checkbox/checkbox.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/comparer/comparer.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "PcComparer",
          "cssProperties": [
            {
              "description": "— The width of the dividing line.",
              "name": "--divider-width"
            },
            {
              "description": "— The size of the compare handle.",
              "name": "--handle-size"
            }
          ],
          "cssParts": [
            {
              "description": "— The component’s base wrapper.",
              "name": "base"
            },
            {
              "description": "— The container that wraps the before content.",
              "name": "before"
            },
            {
              "description": "— The container that wraps the after content.",
              "name": "after"
            },
            {
              "description": "— The divider that separates both sides.",
              "name": "divider"
            },
            {
              "description": "— The handle that the user drags to expose the after content.",
              "name": "handle"
            }
          ],
          "slots": [
            {
              "description": "— The before content, often an `<img>` or `<svg>` element.",
              "name": "before"
            },
            {
              "description": "— The after content, often an `<img>` or `<svg>` element.",
              "name": "after"
            },
            {
              "description": "— The icon used inside the handle.",
              "name": "handle"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "position",
              "type": {
                "text": "number"
              },
              "default": "50",
              "description": "The position of the divider as a percentage.",
              "attribute": "position",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "handleDrag",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "PointerEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleKeyDown",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            }
          ],
          "events": [
            {
              "description": "— Emitted when the position of the handle changes.",
              "name": "pc-change"
            }
          ],
          "attributes": [
            {
              "name": "position",
              "type": {
                "text": "number"
              },
              "default": "50",
              "description": "The position of the divider as a percentage.",
              "fieldName": "position"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "summary": "Compare visual differences between similar content with a sliding panel.",
          "jsDoc": "/**\n * @summary Compare visual differences between similar content with a sliding panel.\n * @status experimental\n * @since 0.5.0\n *\n * @dependency pc-icon\n *\n * @slot before — The before content, often an `<img>` or `<svg>` element.\n * @slot after — The after content, often an `<img>` or `<svg>` element.\n * @slot handle — The icon used inside the handle.\n *\n * @event pc-change — Emitted when the position of the handle changes.\n *\n * @csspart base — The component’s base wrapper.\n * @csspart before — The container that wraps the before content.\n * @csspart after — The container that wraps the after content.\n * @csspart divider — The divider that separates both sides.\n * @csspart handle — The handle that the user drags to expose the after content.\n *\n * @cssproperty --divider-width — The width of the dividing line.\n * @cssproperty --handle-size — The size of the compare handle.\n */",
          "status": "experimental",
          "since": "0.5.0",
          "dependencies": [
            "pc-icon"
          ],
          "tagName": "pc-comparer",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "PcComparer",
          "declaration": {
            "name": "PcComparer",
            "module": "components/comparer/comparer.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "pc-comparer",
          "declaration": {
            "name": "PcComparer",
            "module": "components/comparer/comparer.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/copy-button/copy-button.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "PcCopyButton",
          "cssProperties": [
            {
              "description": "— The colour to use for success feedback.",
              "name": "--success-color"
            },
            {
              "description": "— The colour to use for error feedback.",
              "name": "--error-color"
            }
          ],
          "cssParts": [
            {
              "description": "— The internal `<button>` element.",
              "name": "button"
            },
            {
              "description": "— The container that holds the copy icon.",
              "name": "copy-icon"
            },
            {
              "description": "— The container that holds the success icon.",
              "name": "success-icon"
            },
            {
              "description": "— The container that holds the error icon.",
              "name": "error-icon"
            },
            {
              "description": "— The tooltip’s `base` part.",
              "name": "tooltip__base"
            },
            {
              "description": "— The tooltip’s `popup` part.",
              "name": "tooltip__base__popup"
            },
            {
              "description": "— The tooltip’s `arrow` part.",
              "name": "tooltip__base__arrow"
            },
            {
              "description": "— The tooltip’s `body` part.",
              "name": "tooltip__body"
            }
          ],
          "slots": [
            {
              "description": "— The icon to show in the default copy state. Works best with `<pc-icon>`.",
              "name": "copy-icon"
            },
            {
              "description": "— The icon to show when the content is copied. Works best with `<pc-icon>`.",
              "name": "success-icon"
            },
            {
              "description": "— The icon to show when a copy error occurs. Works best with `<pc-icon>`.",
              "name": "error-icon"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string"
              },
              "default": "\"\"",
              "description": "The text value to copy.",
              "attribute": "value"
            },
            {
              "kind": "field",
              "name": "from",
              "type": {
                "text": "string"
              },
              "default": "\"\"",
              "description": "An id that references an element in the same document from which data will be copied. If both this and `value` are present, this value will take precedence. By default, the target element’s `textContent` will be copied. To copy an attribute, append the attribute name wrapped in square brackets (e.g., `from=\"element[value]\"`). To copy a property, append a dot and the property name (e.g., `from=\"element.value\"`).",
              "attribute": "from"
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disables the copy button.",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "copyLabel",
              "type": {
                "text": "string"
              },
              "default": "\"\"",
              "description": "A custom label to show in the tooltip.",
              "attribute": "copy-label"
            },
            {
              "kind": "field",
              "name": "successLabel",
              "type": {
                "text": "string"
              },
              "default": "\"\"",
              "description": "A custom label to show in the tooltip after copying.",
              "attribute": "success-label"
            },
            {
              "kind": "field",
              "name": "errorLabel",
              "type": {
                "text": "string"
              },
              "default": "\"\"",
              "description": "A custom label to show in the tooltip when a copy error occurs.",
              "attribute": "error-label"
            },
            {
              "kind": "field",
              "name": "feedbackDuration",
              "type": {
                "text": "number"
              },
              "default": "1000",
              "description": "The length of time to show feedback before restoring the default trigger.",
              "attribute": "feedback-duration"
            },
            {
              "kind": "field",
              "name": "tooltipPlacement",
              "type": {
                "text": "| \"top\"\n        | \"right\"\n        | \"bottom\"\n        | \"left\""
              },
              "default": "\"top\"",
              "description": "The preferred placement of the tooltip.",
              "attribute": "tooltip-placement"
            },
            {
              "kind": "field",
              "name": "hoist",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Enable this option to prevent the tooltip from being clipped when the component is placed inside a container with `overflow: auto|hidden|scroll`. Hoisting uses a fixed positioning strategy that works in many, but not all situations.",
              "attribute": "hoist"
            },
            {
              "kind": "method",
              "name": "handleCopy",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "showStatus",
              "privacy": "private",
              "parameters": [
                {
                  "name": "status",
                  "type": {
                    "text": "\"success\" | \"error\""
                  }
                }
              ]
            }
          ],
          "events": [
            {
              "description": "— Emitted when the data has been copied.",
              "name": "pc-copy"
            },
            {
              "description": "— Emitted when the data could not be copied.",
              "name": "pc-error"
            }
          ],
          "attributes": [
            {
              "name": "value",
              "type": {
                "text": "string"
              },
              "default": "\"\"",
              "description": "The text value to copy.",
              "fieldName": "value"
            },
            {
              "name": "from",
              "type": {
                "text": "string"
              },
              "default": "\"\"",
              "description": "An id that references an element in the same document from which data will be copied. If both this and `value` are present, this value will take precedence. By default, the target element’s `textContent` will be copied. To copy an attribute, append the attribute name wrapped in square brackets (e.g., `from=\"element[value]\"`). To copy a property, append a dot and the property name (e.g., `from=\"element.value\"`).",
              "fieldName": "from"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disables the copy button.",
              "fieldName": "disabled"
            },
            {
              "name": "copy-label",
              "type": {
                "text": "string"
              },
              "default": "\"\"",
              "description": "A custom label to show in the tooltip.",
              "fieldName": "copyLabel"
            },
            {
              "name": "success-label",
              "type": {
                "text": "string"
              },
              "default": "\"\"",
              "description": "A custom label to show in the tooltip after copying.",
              "fieldName": "successLabel"
            },
            {
              "name": "error-label",
              "type": {
                "text": "string"
              },
              "default": "\"\"",
              "description": "A custom label to show in the tooltip when a copy error occurs.",
              "fieldName": "errorLabel"
            },
            {
              "name": "feedback-duration",
              "type": {
                "text": "number"
              },
              "default": "1000",
              "description": "The length of time to show feedback before restoring the default trigger.",
              "fieldName": "feedbackDuration"
            },
            {
              "name": "tooltip-placement",
              "type": {
                "text": "| \"top\"\n        | \"right\"\n        | \"bottom\"\n        | \"left\""
              },
              "default": "\"top\"",
              "description": "The preferred placement of the tooltip.",
              "fieldName": "tooltipPlacement"
            },
            {
              "name": "hoist",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Enable this option to prevent the tooltip from being clipped when the component is placed inside a container with `overflow: auto|hidden|scroll`. Hoisting uses a fixed positioning strategy that works in many, but not all situations.",
              "fieldName": "hoist"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "summary": "Copies text data to the clipboard when the user clicks the trigger.",
          "jsDoc": "/**\n * @summary Copies text data to the clipboard when the user clicks the trigger.\n * @status experimental\n * @since 0.5.0\n *\n * @dependency pc-icon\n * @dependency pc-tooltip\n *\n * @slot copy-icon — The icon to show in the default copy state. Works best with `<pc-icon>`.\n * @slot success-icon — The icon to show when the content is copied. Works best with `<pc-icon>`.\n * @slot error-icon — The icon to show when a copy error occurs. Works best with `<pc-icon>`.\n *\n * @event pc-copy — Emitted when the data has been copied.\n * @event pc-error — Emitted when the data could not be copied.\n *\n * @csspart button — The internal `<button>` element.\n * @csspart copy-icon — The container that holds the copy icon.\n * @csspart success-icon — The container that holds the success icon.\n * @csspart error-icon — The container that holds the error icon.\n * @csspart tooltip__base — The tooltip’s `base` part.\n * @csspart tooltip__base__popup — The tooltip’s `popup` part.\n * @csspart tooltip__base__arrow — The tooltip’s `arrow` part.\n * @csspart tooltip__body — The tooltip’s `body` part.\n *\n * @cssproperty --success-color — The colour to use for success feedback.\n * @cssproperty --error-color — The colour to use for error feedback.\n *\n * @animation copy.in — The animation to use when the icons animate in.\n * @animation copy.out — The animation to use when the icons animate out.\n */",
          "status": "experimental",
          "since": "0.5.0",
          "dependencies": [
            "pc-icon",
            "pc-tooltip"
          ],
          "animations": [
            {
              "name": "copy.in",
              "description": "— The animation to use when the icons animate in."
            },
            {
              "name": "copy.out",
              "description": "— The animation to use when the icons animate out."
            }
          ],
          "tagName": "pc-copy-button",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "PcCopyButton",
          "declaration": {
            "name": "PcCopyButton",
            "module": "components/copy-button/copy-button.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "pc-copy-button",
          "declaration": {
            "name": "PcCopyButton",
            "module": "components/copy-button/copy-button.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/details/details.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "PcDetails",
          "members": [
            {
              "kind": "field",
              "name": "dependencies",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{ \"pc-icon\": PcIcon }"
            },
            {
              "kind": "field",
              "name": "details",
              "type": {
                "text": "HTMLDetailsElement"
              }
            },
            {
              "kind": "field",
              "name": "header",
              "type": {
                "text": "HTMLElement"
              }
            },
            {
              "kind": "field",
              "name": "body",
              "type": {
                "text": "HTMLElement"
              }
            },
            {
              "kind": "field",
              "name": "expandIconSlot",
              "type": {
                "text": "HTMLSlotElement"
              }
            },
            {
              "kind": "field",
              "name": "detailsObserver",
              "type": {
                "text": "MutationObserver"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "open",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "open",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "summary",
              "type": {
                "text": "string | undefined"
              },
              "attribute": "summary"
            },
            {
              "kind": "method",
              "name": "handleSummaryClick",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleSummaryKeyDown",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleOpenChange"
            },
            {
              "kind": "method",
              "name": "show"
            },
            {
              "kind": "method",
              "name": "hide"
            }
          ],
          "attributes": [
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "disabled"
            },
            {
              "name": "open",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "open"
            },
            {
              "name": "summary",
              "type": {
                "text": "string | undefined"
              },
              "fieldName": "summary"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "pc-details",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "PcDetails",
          "declaration": {
            "name": "PcDetails",
            "module": "components/details/details.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "pc-details",
          "declaration": {
            "name": "PcDetails",
            "module": "components/details/details.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/dialog/dialog.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "PcDialog",
          "cssProperties": [
            {
              "description": "— The preferred width of the dialog. Note that the dialog will shrink to accommodate smaller screens.",
              "name": "--width"
            },
            {
              "description": "— The amount of spacing to use for the header.",
              "name": "--header-spacing"
            },
            {
              "description": "— The amount of padding to use for the body.",
              "name": "--body-spacing"
            },
            {
              "description": "— The amount of padding to use for the footer.",
              "name": "--footer-spacing"
            }
          ],
          "cssParts": [
            {
              "description": "— The component’s base wrapper.",
              "name": "base"
            },
            {
              "description": "— The overlay that covers the screen behind the dialog.",
              "name": "overlay"
            },
            {
              "description": "— The dialog’s panel (where the dialog and its content are rendered).",
              "name": "panel"
            },
            {
              "description": "— The dialog’s header. This element wraps the title and header actions.",
              "name": "header"
            },
            {
              "description": "— Optional actions to add to the header. Works best with `<pc-icon-button>`.",
              "name": "header-actions"
            },
            {
              "description": "— The dialog’s title.",
              "name": "title"
            },
            {
              "description": "— The close button. Is a `<pc-icon-button>` under the hood.",
              "name": "close-button"
            },
            {
              "description": "— The close button’s `base` part.",
              "name": "close-button__base"
            },
            {
              "description": "— The dialog’s body.",
              "name": "body"
            },
            {
              "description": "— The dialog’s footer.",
              "name": "footer"
            }
          ],
          "slots": [
            {
              "description": "The dialog’s main content.",
              "name": "—"
            },
            {
              "description": "— The dialog’s label. Alternatively, you can use the `label` attribute.",
              "name": "label"
            },
            {
              "description": "— Optional actions to add to the header. Works best with `<pc-icon-button>`.",
              "name": "header-actions"
            },
            {
              "description": "— The dialog’s footer, usually one or more buttons representing various options.",
              "name": "footer"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "hasSlotController",
              "privacy": "private",
              "readonly": true,
              "default": "new HasSlotController(this, \"footer\")"
            },
            {
              "kind": "field",
              "name": "originalTrigger",
              "type": {
                "text": "HTMLElement | null"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "modal",
              "privacy": "public",
              "default": "new Modal(this)",
              "description": "— Exposes the internal modal utility that controls focus trapping. To temporarily disable focus trapping and allow third‐party modals spawned from an active Placer modal, call `modal.activateExternal()` when the third‐party modal opens. Upon closing, call `modal.deactivateExternal()` to restore Placer Toolkit’s focus trapping."
            },
            {
              "kind": "field",
              "name": "closeWatcher",
              "type": {
                "text": "CloseWatcher | null"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "open",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Indicates whether or not the dialog is open. You can toggle this attribute to show and hide the dialog, or you can use the `show()` and `hide()` methods and this attribute will reflect the dialog’s open state.",
              "attribute": "open",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "\"\"",
              "description": "The dialog’s label displayed in the header. You should always include a relevant label even when using the `no-header` attribute, as it is required for proper accessibility. If you need to display HTML, use the `label` slot instead.",
              "attribute": "label",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "noHeader",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Removes the header. This will also remove the default close button, so please ensure you provide an easy, accessible way for users to dismiss the dialog.",
              "attribute": "no-header",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "requestClose",
              "privacy": "private",
              "parameters": [
                {
                  "name": "source",
                  "type": {
                    "text": "\"close-button\" | \"keyboard\" | \"overlay\""
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "addOpenListeners",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "removeOpenListeners",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "handleDocumentKeyDown",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "show",
              "description": "Shows the dialog."
            },
            {
              "kind": "method",
              "name": "hide",
              "description": "Hides the dialog."
            }
          ],
          "events": [
            {
              "description": "— Emitted when the dialog opens.",
              "name": "pc-show"
            },
            {
              "description": "— Emitted after the dialog opens and all animations are complete.",
              "name": "pc-after-show"
            },
            {
              "description": "— Emitted when the dialog closes.",
              "name": "pc-hide"
            },
            {
              "description": "— Emitted after the dialog closes and all animations are complete.",
              "name": "pc-after-hide"
            },
            {
              "description": "— Emitted when the dialog opens and is ready to receive focus. Calling `event.preventDefault()` will prevent focusing and allow you to set it on a different element, such as an input.",
              "name": "pc-initial-focus"
            },
            {
              "type": {
                "text": "{ source: \"close-button\" | \"keyboard\" | \"overlay\" }"
              },
              "description": "— Emitted when the user attempts to close the dialog by clicking the close button, clicking the overlay or pressing <kbd aria-label=\"Escape\">Esc</kbd>. Calling `event.preventDefault()` will keep the dialog open. Avoid using this unless closing the dialog will result in destructive behaviour such as data loss.",
              "name": "pc-request-close"
            }
          ],
          "attributes": [
            {
              "name": "open",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Indicates whether or not the dialog is open. You can toggle this attribute to show and hide the dialog, or you can use the `show()` and `hide()` methods and this attribute will reflect the dialog’s open state.",
              "fieldName": "open"
            },
            {
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "\"\"",
              "description": "The dialog’s label displayed in the header. You should always include a relevant label even when using the `no-header` attribute, as it is required for proper accessibility. If you need to display HTML, use the `label` slot instead.",
              "fieldName": "label"
            },
            {
              "name": "no-header",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Removes the header. This will also remove the default close button, so please ensure you provide an easy, accessible way for users to dismiss the dialog.",
              "fieldName": "noHeader"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "summary": "Dialogs, sometimes called “modals”, appear above the page and draw the user’s immediate attention.",
          "jsDoc": "/**\n * @summary Dialogs, sometimes called “modals”, appear above the page and draw the user’s immediate attention.\n * @status experimental\n * @since 0.5.0\n *\n * @dependency pc-icon\n * @dependency pc-icon-button\n *\n * @slot — The dialog’s main content.\n * @slot label — The dialog’s label. Alternatively, you can use the `label` attribute.\n * @slot header-actions — Optional actions to add to the header. Works best with `<pc-icon-button>`.\n * @slot footer — The dialog’s footer, usually one or more buttons representing various options.\n *\n * @event pc-show — Emitted when the dialog opens.\n * @event pc-after-show — Emitted after the dialog opens and all animations are complete.\n * @event pc-hide — Emitted when the dialog closes.\n * @event pc-after-hide — Emitted after the dialog closes and all animations are complete.\n * @event pc-initial-focus — Emitted when the dialog opens and is ready to receive focus. Calling `event.preventDefault()` will prevent focusing and allow you to set it on a different element, such as an input.\n * @event {{ source: \"close-button\" | \"keyboard\" | \"overlay\" }} pc-request-close — Emitted when the user attempts to close the dialog by clicking the close button, clicking the overlay or pressing <kbd aria-label=\"Escape\">Esc</kbd>. Calling `event.preventDefault()` will keep the dialog open. Avoid using this unless closing the dialog will result in destructive behaviour such as data loss.\n *\n * @csspart base — The component’s base wrapper.\n * @csspart overlay — The overlay that covers the screen behind the dialog.\n * @csspart panel — The dialog’s panel (where the dialog and its content are rendered).\n * @csspart header — The dialog’s header. This element wraps the title and header actions.\n * @csspart header-actions — Optional actions to add to the header. Works best with `<pc-icon-button>`.\n * @csspart title — The dialog’s title.\n * @csspart close-button — The close button. Is a `<pc-icon-button>` under the hood.\n * @csspart close-button__base — The close button’s `base` part.\n * @csspart body — The dialog’s body.\n * @csspart footer — The dialog’s footer.\n *\n * @cssproperty --width — The preferred width of the dialog. Note that the dialog will shrink to accommodate smaller screens.\n * @cssproperty --header-spacing — The amount of spacing to use for the header.\n * @cssproperty --body-spacing — The amount of padding to use for the body.\n * @cssproperty --footer-spacing — The amount of padding to use for the footer.\n *\n * @animation dialog.show — The animation to use when showing the dialog.\n * @animation dialog.hide — The animation to use when hiding the dialog.\n * @animation dialog.denyClose — The animation to use when a request to close the dialog is denied.\n * @animation dialog.overlay.show — The animation to use when showing the dialog’s overlay.\n * @animation dialog.overlay.hide — The animation to use when hiding the dialog’s overlay.\n *\n * @property modal — Exposes the internal modal utility that controls focus trapping. To temporarily disable focus trapping and allow third‐party modals spawned from an active Placer modal, call `modal.activateExternal()` when the third‐party modal opens. Upon closing, call `modal.deactivateExternal()` to restore Placer Toolkit’s focus trapping.\n */",
          "status": "experimental",
          "since": "0.5.0",
          "dependencies": [
            "pc-icon",
            "pc-icon-button"
          ],
          "animations": [
            {
              "name": "dialog.show",
              "description": "— The animation to use when showing the dialog."
            },
            {
              "name": "dialog.hide",
              "description": "— The animation to use when hiding the dialog."
            },
            {
              "name": "dialog.denyClose",
              "description": "— The animation to use when a request to close the dialog is denied."
            },
            {
              "name": "dialog.overlay.show",
              "description": "— The animation to use when showing the dialog’s overlay."
            },
            {
              "name": "dialog.overlay.hide",
              "description": "— The animation to use when hiding the dialog’s overlay."
            }
          ],
          "tagName": "pc-dialog",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "PcDialog",
          "declaration": {
            "name": "PcDialog",
            "module": "components/dialog/dialog.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "pc-dialog",
          "declaration": {
            "name": "PcDialog",
            "module": "components/dialog/dialog.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/divider/divider.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "PcDivider",
          "cssProperties": [
            {
              "description": "— The colour of the divider.",
              "name": "--color"
            },
            {
              "description": "— The stroke width of the divider line.",
              "name": "--stroke-width"
            },
            {
              "description": "— The spacing of the divider.",
              "name": "--spacing"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "vertical",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Vertically orientates the divider.",
              "attribute": "vertical",
              "reflects": true
            }
          ],
          "attributes": [
            {
              "name": "vertical",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Vertically orientates the divider.",
              "fieldName": "vertical"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "summary": "Dividers are used to visually separate or group elements.",
          "jsDoc": "/**\n * @summary Dividers are used to visually separate or group elements.\n * @status experimental\n * @since 0.5.0\n *\n * @cssproperty --color — The colour of the divider.\n * @cssproperty --stroke-width — The stroke width of the divider line.\n * @cssproperty --spacing — The spacing of the divider.\n */",
          "status": "experimental",
          "since": "0.5.0",
          "tagName": "pc-divider",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "PcDivider",
          "declaration": {
            "name": "PcDivider",
            "module": "components/divider/divider.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "pc-divider",
          "declaration": {
            "name": "PcDivider",
            "module": "components/divider/divider.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/drawer/drawer.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "PcDrawer",
          "cssProperties": [
            {
              "description": "— The preferred size of the drawer. This will be applied to the drawer’s width or height depending on its `placement`. Note that the drawer will shrink to accommodate smaller screens.",
              "name": "--size"
            },
            {
              "description": "— The amount of padding to use for the header.",
              "name": "--header-spacing"
            },
            {
              "description": "— The amount of padding to use for the body.",
              "name": "--body-spacing"
            },
            {
              "description": "— The amount of padding to use for the footer.",
              "name": "--footer-spacing"
            }
          ],
          "cssParts": [
            {
              "description": "— The component’s base wrapper.",
              "name": "base"
            },
            {
              "description": "— The overlay that covers the screen behind the drawer.",
              "name": "overlay"
            },
            {
              "description": "— The drawer’s panel (where the drawer and its content are rendered).",
              "name": "panel"
            },
            {
              "description": "— The drawer’s header. This element wraps the title and header actions.",
              "name": "header"
            },
            {
              "description": "— Optional actions to add to the header. Works best with `<pc-icon-button>`.",
              "name": "header-actions"
            },
            {
              "description": "— The drawer’s title.",
              "name": "title"
            },
            {
              "description": "— The close button, an `<pc-icon-button>`.",
              "name": "close-button"
            },
            {
              "description": "— The close button’s exported `base` part.",
              "name": "close-button__base"
            },
            {
              "description": "— The drawer’s body.",
              "name": "body"
            },
            {
              "description": "— The drawer’s footer.",
              "name": "footer"
            }
          ],
          "slots": [
            {
              "description": "The drawer’s main content.",
              "name": "—"
            },
            {
              "description": "— The drawer’s label. Alternatively, you can use the `label` attribute.",
              "name": "label"
            },
            {
              "description": "— Optional actions to add to the header. Works best with `<pc-icon-button>`.",
              "name": "header-actions"
            },
            {
              "description": "— The drawer’s footer, usually one or more buttons representing various options.",
              "name": "footer"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "hasSlotController",
              "privacy": "private",
              "readonly": true,
              "default": "new HasSlotController(this, \"footer\")"
            },
            {
              "kind": "field",
              "name": "originalTrigger",
              "type": {
                "text": "HTMLElement | null"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "modal",
              "privacy": "public",
              "default": "new Modal(this)",
              "description": "— Exposes the internal modal utility that controls focus trapping. To temporarily disable focus trapping and allow third‐party modals spawned from an active Placer Toolkit modal, call `modal.activateExternal()` when the third‐party modal opens. Upon closing, call `modal.deactivateExternal()` to restore Placer Toolkit’s focus trapping."
            },
            {
              "kind": "field",
              "name": "closeWatcher",
              "type": {
                "text": "CloseWatcher | null"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "open",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Indicates whether or not the drawer is open. You can toggle this attribute to show and hide the drawer, or you can use the `show()` and `hide()` methods and this attribute will reflect the drawer’s open state.",
              "attribute": "open",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "\"\"",
              "description": "The drawer’s label as displayed in the header. You should always include a relevant label even when using `no-header`, as it is required for proper accessibility. If you need to display HTML, use the `label` slot instead.",
              "attribute": "label",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "placement",
              "type": {
                "text": "\"top\" | \"end\" | \"bottom\" | \"start\""
              },
              "default": "\"end\"",
              "description": "The direction from which the drawer will open.",
              "attribute": "placement",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "contained",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "By default, the drawer slides out of its containing block (usually the viewport). To make the drawer slide out of its parent element, set this attribute and add `position: relative` to the parent.",
              "attribute": "contained",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "noHeader",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "This removes the header. This will also remove the default close button, so please ensure you provide an easy, accessible way for users to dismiss the drawer.",
              "attribute": "no-header",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "requestClose",
              "privacy": "private",
              "parameters": [
                {
                  "name": "source",
                  "type": {
                    "text": "\"close-button\" | \"keyboard\" | \"overlay\""
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "addOpenListeners",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "removeOpenListeners",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "handleDocumentKeyDown",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "show",
              "description": "Shows the drawer."
            },
            {
              "kind": "method",
              "name": "hide",
              "description": "Hides the drawer."
            }
          ],
          "events": [
            {
              "description": "— Emitted when the drawer opens.",
              "name": "pc-show"
            },
            {
              "description": "— Emitted after the drawer opens and all animations are complete.",
              "name": "pc-after-show"
            },
            {
              "description": "— Emitted when the drawer closes.",
              "name": "pc-hide"
            },
            {
              "description": "— Emitted after the drawer closes and all animations are complete.",
              "name": "pc-after-hide"
            },
            {
              "description": "— Emitted when the drawer opens and is ready to receive focus. Calling `event.preventDefault()` will prevent focusing and allow you to set it on a different element, such as an input.",
              "name": "pc-initial-focus"
            },
            {
              "type": {
                "text": "{ source: \"close-button\" | \"keyboard\" | \"overlay\" }"
              },
              "description": "— Emitted when the user attempts to close the drawer by clicking the close button, clicking the overlay or pressing <kbd aria-label=\"Escape\">Esc</kbd>. Calling `event.preventDefault()` will keep the drawer open. Avoid using this unless closing the drawer will result in destructive behavior such as data loss.",
              "name": "pc-request-close"
            }
          ],
          "attributes": [
            {
              "name": "open",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Indicates whether or not the drawer is open. You can toggle this attribute to show and hide the drawer, or you can use the `show()` and `hide()` methods and this attribute will reflect the drawer’s open state.",
              "fieldName": "open"
            },
            {
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "\"\"",
              "description": "The drawer’s label as displayed in the header. You should always include a relevant label even when using `no-header`, as it is required for proper accessibility. If you need to display HTML, use the `label` slot instead.",
              "fieldName": "label"
            },
            {
              "name": "placement",
              "type": {
                "text": "\"top\" | \"end\" | \"bottom\" | \"start\""
              },
              "default": "\"end\"",
              "description": "The direction from which the drawer will open.",
              "fieldName": "placement"
            },
            {
              "name": "contained",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "By default, the drawer slides out of its containing block (usually the viewport). To make the drawer slide out of its parent element, set this attribute and add `position: relative` to the parent.",
              "fieldName": "contained"
            },
            {
              "name": "no-header",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "This removes the header. This will also remove the default close button, so please ensure you provide an easy, accessible way for users to dismiss the drawer.",
              "fieldName": "noHeader"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "summary": "Drawers slide in from a container to expose additional options and information.",
          "jsDoc": "/**\n * @summary Drawers slide in from a container to expose additional options and information.\n * @status experimental\n * @since 0.5.0\n *\n * @dependency pc-icon-button\n *\n * @slot — The drawer’s main content.\n * @slot label — The drawer’s label. Alternatively, you can use the `label` attribute.\n * @slot header-actions — Optional actions to add to the header. Works best with `<pc-icon-button>`.\n * @slot footer — The drawer’s footer, usually one or more buttons representing various options.\n *\n * @event pc-show — Emitted when the drawer opens.\n * @event pc-after-show — Emitted after the drawer opens and all animations are complete.\n * @event pc-hide — Emitted when the drawer closes.\n * @event pc-after-hide — Emitted after the drawer closes and all animations are complete.\n * @event pc-initial-focus — Emitted when the drawer opens and is ready to receive focus. Calling `event.preventDefault()` will prevent focusing and allow you to set it on a different element, such as an input.\n * @event {{ source: \"close-button\" | \"keyboard\" | \"overlay\" }} pc-request-close — Emitted when the user attempts to close the drawer by clicking the close button, clicking the overlay or pressing <kbd aria-label=\"Escape\">Esc</kbd>. Calling `event.preventDefault()` will keep the drawer open. Avoid using this unless closing the drawer will result in destructive behavior such as data loss.\n *\n * @csspart base — The component’s base wrapper.\n * @csspart overlay — The overlay that covers the screen behind the drawer.\n * @csspart panel — The drawer’s panel (where the drawer and its content are rendered).\n * @csspart header — The drawer’s header. This element wraps the title and header actions.\n * @csspart header-actions — Optional actions to add to the header. Works best with `<pc-icon-button>`.\n * @csspart title — The drawer’s title.\n * @csspart close-button — The close button, an `<pc-icon-button>`.\n * @csspart close-button__base — The close button’s exported `base` part.\n * @csspart body — The drawer’s body.\n * @csspart footer — The drawer’s footer.\n *\n * @cssproperty --size — The preferred size of the drawer. This will be applied to the drawer’s width or height depending on its `placement`. Note that the drawer will shrink to accommodate smaller screens.\n * @cssproperty --header-spacing — The amount of padding to use for the header.\n * @cssproperty --body-spacing — The amount of padding to use for the body.\n * @cssproperty --footer-spacing — The amount of padding to use for the footer.\n *\n * @animation drawer.showTop — The animation to use when showing a drawer with `top` placement.\n * @animation drawer.showEnd — The animation to use when showing a drawer with `end` placement.\n * @animation drawer.showBottom — The animation to use when showing a drawer with `bottom` placement.\n * @animation drawer.showStart — The animation to use when showing a drawer with `start` placement.\n * @animation drawer.hideTop — The animation to use when hiding a drawer with `top` placement.\n * @animation drawer.hideEnd — The animation to use when hiding a drawer with `end` placement.\n * @animation drawer.hideBottom — The animation to use when hiding a drawer with `bottom` placement.\n * @animation drawer.hideStart — The animation to use when hiding a drawer with `start` placement.\n * @animation drawer.denyClose — The animation to use when a request to close the drawer is denied.\n * @animation drawer.overlay.show — The animation to use when showing the drawer’s overlay.\n * @animation drawer.overlay.hide — The animation to use when hiding the drawer’s overlay.\n *\n * @property modal — Exposes the internal modal utility that controls focus trapping. To temporarily disable focus trapping and allow third‐party modals spawned from an active Placer Toolkit modal, call `modal.activateExternal()` when the third‐party modal opens. Upon closing, call `modal.deactivateExternal()` to restore Placer Toolkit’s focus trapping.\n */",
          "status": "experimental",
          "since": "0.5.0",
          "dependencies": [
            "pc-icon-button"
          ],
          "animations": [
            {
              "name": "drawer.showTop",
              "description": "— The animation to use when showing a drawer with `top` placement."
            },
            {
              "name": "drawer.showEnd",
              "description": "— The animation to use when showing a drawer with `end` placement."
            },
            {
              "name": "drawer.showBottom",
              "description": "— The animation to use when showing a drawer with `bottom` placement."
            },
            {
              "name": "drawer.showStart",
              "description": "— The animation to use when showing a drawer with `start` placement."
            },
            {
              "name": "drawer.hideTop",
              "description": "— The animation to use when hiding a drawer with `top` placement."
            },
            {
              "name": "drawer.hideEnd",
              "description": "— The animation to use when hiding a drawer with `end` placement."
            },
            {
              "name": "drawer.hideBottom",
              "description": "— The animation to use when hiding a drawer with `bottom` placement."
            },
            {
              "name": "drawer.hideStart",
              "description": "— The animation to use when hiding a drawer with `start` placement."
            },
            {
              "name": "drawer.denyClose",
              "description": "— The animation to use when a request to close the drawer is denied."
            },
            {
              "name": "drawer.overlay.show",
              "description": "— The animation to use when showing the drawer’s overlay."
            },
            {
              "name": "drawer.overlay.hide",
              "description": "— The animation to use when hiding the drawer’s overlay."
            }
          ],
          "tagName": "pc-drawer",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "PcDrawer",
          "declaration": {
            "name": "PcDrawer",
            "module": "components/drawer/drawer.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "pc-drawer",
          "declaration": {
            "name": "PcDrawer",
            "module": "components/drawer/drawer.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/dropdown/dropdown.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "PcDropdown",
          "members": [
            {
              "kind": "field",
              "name": "dependencies",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{ \"pc-popup\": PcPopup }"
            },
            {
              "kind": "field",
              "name": "popup",
              "type": {
                "text": "PcPopup"
              }
            },
            {
              "kind": "field",
              "name": "trigger",
              "type": {
                "text": "HTMLSlotElement"
              }
            },
            {
              "kind": "field",
              "name": "panel",
              "type": {
                "text": "HTMLSlotElement"
              }
            },
            {
              "kind": "field",
              "name": "closeWatcher",
              "type": {
                "text": "CloseWatcher | null"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "containingElement",
              "type": {
                "text": "HTMLElement | undefined"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "distance",
              "type": {
                "text": "number"
              },
              "default": "0",
              "attribute": "distance"
            },
            {
              "kind": "field",
              "name": "hoist",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "hoist"
            },
            {
              "kind": "field",
              "name": "open",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "open",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "placement",
              "type": {
                "text": "| \"top\"\n        | \"top-start\"\n        | \"top-end\"\n        | \"bottom\"\n        | \"bottom-start\"\n        | \"bottom-end\"\n        | \"right\"\n        | \"right-start\"\n        | \"right-end\"\n        | \"left\"\n        | \"left-start\"\n        | \"left-end\""
              },
              "default": "\"bottom-start\"",
              "attribute": "placement",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "skidding",
              "type": {
                "text": "number"
              },
              "default": "0",
              "attribute": "skidding"
            },
            {
              "kind": "field",
              "name": "stayOpenOnSelect",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "stay-open-on-select",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "sync",
              "type": {
                "text": "\"width\" | \"height\" | \"both\" | undefined"
              },
              "default": "undefined",
              "attribute": "sync",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "focusOnTrigger"
            },
            {
              "kind": "method",
              "name": "getMenu"
            },
            {
              "kind": "field",
              "name": "handleKeyDown",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "handleDocumentKeyDown",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "handleDocumentMouseDown",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "handlePanelSelect",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleTriggerClick"
            },
            {
              "kind": "method",
              "name": "handleTriggerKeyDown",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleTriggerKeyUp",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleTriggerSlotChange"
            },
            {
              "kind": "method",
              "name": "updateAccessibleTrigger"
            },
            {
              "kind": "method",
              "name": "show"
            },
            {
              "kind": "method",
              "name": "hide"
            },
            {
              "kind": "method",
              "name": "reposition"
            },
            {
              "kind": "method",
              "name": "addOpenListeners"
            },
            {
              "kind": "method",
              "name": "removeOpenListeners"
            },
            {
              "kind": "method",
              "name": "handleOpenChange"
            }
          ],
          "attributes": [
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "disabled"
            },
            {
              "name": "distance",
              "type": {
                "text": "number"
              },
              "default": "0",
              "fieldName": "distance"
            },
            {
              "name": "hoist",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "hoist"
            },
            {
              "name": "open",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "open"
            },
            {
              "name": "placement",
              "type": {
                "text": "| \"top\"\n        | \"top-start\"\n        | \"top-end\"\n        | \"bottom\"\n        | \"bottom-start\"\n        | \"bottom-end\"\n        | \"right\"\n        | \"right-start\"\n        | \"right-end\"\n        | \"left\"\n        | \"left-start\"\n        | \"left-end\""
              },
              "default": "\"bottom-start\"",
              "fieldName": "placement"
            },
            {
              "name": "skidding",
              "type": {
                "text": "number"
              },
              "default": "0",
              "fieldName": "skidding"
            },
            {
              "name": "stay-open-on-select",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "stayOpenOnSelect"
            },
            {
              "name": "sync",
              "type": {
                "text": "\"width\" | \"height\" | \"both\" | undefined"
              },
              "default": "undefined",
              "fieldName": "sync"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "pc-dropdown",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "PcDropdown",
          "declaration": {
            "name": "PcDropdown",
            "module": "components/dropdown/dropdown.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "pc-dropdown",
          "declaration": {
            "name": "PcDropdown",
            "module": "components/dropdown/dropdown.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/icon/icon.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "PcIcon",
          "cssProperties": [
            {
              "description": "— The primary colour for the primary layer in duotone icons.",
              "name": "--fa-primary-color"
            },
            {
              "description": "— The secondary colour for the secondary layer in duotone icons.",
              "name": "--fa-secondary-color"
            },
            {
              "description": "— The primary opacity for the primary layer in duotone icons.",
              "name": "--fa-primary-opacity"
            },
            {
              "description": "— The secondary opacity for the secondary layer in duotone icons.",
              "name": "--fa-secondary-opacity"
            }
          ],
          "cssParts": [
            {
              "description": "— The component’s internal SVG element.",
              "name": "svg"
            },
            {
              "description": "— The `<use>` element generated when using `spriteSheet: true`.",
              "name": "use"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "initialRender",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "method",
              "name": "resolveIcon",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "Promise<SVGResult>"
                }
              },
              "parameters": [
                {
                  "name": "url",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "library",
                  "optional": true,
                  "type": {
                    "text": "IconLibrary"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "svg",
              "type": {
                "text": "SVGElement | HTMLTemplateResult | null"
              },
              "privacy": "private",
              "default": "null"
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string | undefined"
              },
              "description": "The name of the icon to render. Available names depend on the icon library being used.",
              "attribute": "name",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "iconStyle",
              "type": {
                "text": "string | undefined"
              },
              "description": "The icon style to use for the icon. If not configured, this only works for the default and Font Awesome Pro icon libraries.",
              "attribute": "icon-style",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "fixedWidth",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Sets the width of the icon to 1.25em (20px) and centres it. It’s similar to the Font Awesome class `fa-fw`.",
              "attribute": "fixed-width",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "swapOpacity",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Swaps the opacity of duotone icons. Has no effect on icon libraries that aren’t the default one or Font Awesome Pro one.",
              "attribute": "swap-opacity",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "src",
              "type": {
                "text": "string | undefined"
              },
              "description": "The external URL of an SVG file. Make sure you trust the content you are included, as it will be executed as code and can result in XSS attacks.",
              "attribute": "src"
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "\"\"",
              "description": "A label to include for assistive devices. If omitted, the icon will be considered presentational and ignored by assistive devices.",
              "attribute": "label"
            },
            {
              "kind": "field",
              "name": "library",
              "type": {
                "text": "string"
              },
              "default": "\"default\"",
              "description": "The name of a registered icon library.",
              "attribute": "library",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "getIconSource",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "IconSource"
                }
              }
            }
          ],
          "events": [
            {
              "description": "— Emitted when the icon has loaded. When using `spriteSheet: true`, this will not emit.",
              "name": "pc-load"
            },
            {
              "description": "— Emitted when the icon fails to load due to an error. When using `spriteSheet: true`, this will not emit.",
              "name": "pc-error"
            }
          ],
          "attributes": [
            {
              "name": "name",
              "type": {
                "text": "string | undefined"
              },
              "description": "The name of the icon to render. Available names depend on the icon library being used.",
              "fieldName": "name"
            },
            {
              "name": "icon-style",
              "type": {
                "text": "string | undefined"
              },
              "description": "The icon style to use for the icon. If not configured, this only works for the default and Font Awesome Pro icon libraries.",
              "fieldName": "iconStyle"
            },
            {
              "name": "fixed-width",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Sets the width of the icon to 1.25em (20px) and centres it. It’s similar to the Font Awesome class `fa-fw`.",
              "fieldName": "fixedWidth"
            },
            {
              "name": "swap-opacity",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Swaps the opacity of duotone icons. Has no effect on icon libraries that aren’t the default one or Font Awesome Pro one.",
              "fieldName": "swapOpacity"
            },
            {
              "name": "src",
              "type": {
                "text": "string | undefined"
              },
              "description": "The external URL of an SVG file. Make sure you trust the content you are included, as it will be executed as code and can result in XSS attacks.",
              "fieldName": "src"
            },
            {
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "\"\"",
              "description": "A label to include for assistive devices. If omitted, the icon will be considered presentational and ignored by assistive devices.",
              "fieldName": "label"
            },
            {
              "name": "library",
              "type": {
                "text": "string"
              },
              "default": "\"default\"",
              "description": "The name of a registered icon library.",
              "fieldName": "library"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "summary": "Icons are visual symbols that represent actions, objects or ideas.",
          "jsDoc": "/**\n * @summary Icons are visual symbols that represent actions, objects or ideas.\n * @status experimental\n * @since 0.1.0\n *\n * @event pc-load — Emitted when the icon has loaded. When using `spriteSheet: true`, this will not emit.\n * @event pc-error — Emitted when the icon fails to load due to an error. When using `spriteSheet: true`, this will not emit.\n *\n * @csspart svg — The component’s internal SVG element.\n * @csspart use — The `<use>` element generated when using `spriteSheet: true`.\n *\n * @cssproperty --fa-primary-color — The primary colour for the primary layer in duotone icons.\n * @cssproperty --fa-secondary-color — The secondary colour for the secondary layer in duotone icons.\n * @cssproperty --fa-primary-opacity — The primary opacity for the primary layer in duotone icons.\n * @cssproperty --fa-secondary-opacity — The secondary opacity for the secondary layer in duotone icons.\n */",
          "status": "experimental",
          "since": "0.1.0",
          "tagName": "pc-icon",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "PcIcon",
          "declaration": {
            "name": "PcIcon",
            "module": "components/icon/icon.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "pc-icon",
          "declaration": {
            "name": "PcIcon",
            "module": "components/icon/icon.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/icon-button/icon-button.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "PcIconButton",
          "members": [
            {
              "kind": "field",
              "name": "dependencies",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{ \"pc-icon\": PcIcon }"
            },
            {
              "kind": "field",
              "name": "button",
              "type": {
                "text": "HTMLButtonElement | HTMLLinkElement"
              }
            },
            {
              "kind": "field",
              "name": "hasFocus",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "download",
              "type": {
                "text": "string | undefined"
              },
              "attribute": "download"
            },
            {
              "kind": "field",
              "name": "href",
              "type": {
                "text": "string | undefined"
              },
              "attribute": "href"
            },
            {
              "kind": "field",
              "name": "iconStyle",
              "type": {
                "text": "string | undefined"
              },
              "attribute": "icon-style"
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "\"\"",
              "attribute": "label"
            },
            {
              "kind": "field",
              "name": "library",
              "type": {
                "text": "string | undefined"
              },
              "attribute": "library"
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string | undefined"
              },
              "attribute": "name"
            },
            {
              "kind": "field",
              "name": "src",
              "type": {
                "text": "string | undefined"
              },
              "attribute": "src"
            },
            {
              "kind": "field",
              "name": "target",
              "type": {
                "text": "\"_blank\" | \"_parent\" | \"_self\" | \"_top\" | undefined"
              },
              "attribute": "target"
            },
            {
              "kind": "method",
              "name": "handleClick",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleFocus",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleBlur",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "click"
            },
            {
              "kind": "method",
              "name": "focus",
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "FocusOptions"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "blur"
            }
          ],
          "attributes": [
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "disabled"
            },
            {
              "name": "download",
              "type": {
                "text": "string | undefined"
              },
              "fieldName": "download"
            },
            {
              "name": "href",
              "type": {
                "text": "string | undefined"
              },
              "fieldName": "href"
            },
            {
              "name": "icon-style",
              "type": {
                "text": "string | undefined"
              },
              "fieldName": "iconStyle"
            },
            {
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "\"\"",
              "fieldName": "label"
            },
            {
              "name": "library",
              "type": {
                "text": "string | undefined"
              },
              "fieldName": "library"
            },
            {
              "name": "name",
              "type": {
                "text": "string | undefined"
              },
              "fieldName": "name"
            },
            {
              "name": "src",
              "type": {
                "text": "string | undefined"
              },
              "fieldName": "src"
            },
            {
              "name": "target",
              "type": {
                "text": "\"_blank\" | \"_parent\" | \"_self\" | \"_top\" | undefined"
              },
              "fieldName": "target"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "pc-icon-button",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "PcIconButton",
          "declaration": {
            "name": "PcIconButton",
            "module": "components/icon-button/icon-button.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "pc-icon-button",
          "declaration": {
            "name": "PcIconButton",
            "module": "components/icon-button/icon-button.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/input/input.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "PcInput",
          "members": [
            {
              "kind": "field",
              "name": "dependencies",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{ \"pc-icon\": PcIcon }"
            },
            {
              "kind": "field",
              "name": "formControlController",
              "privacy": "private",
              "readonly": true,
              "default": "new FormControlController(this, { assumeInteractionOn: [\"pc-blur\", \"pc-input\"], })"
            },
            {
              "kind": "field",
              "name": "hasSlotController",
              "privacy": "private",
              "readonly": true,
              "default": "new HasSlotController( this, \"hint\", \"label\", )"
            },
            {
              "kind": "field",
              "name": "input",
              "type": {
                "text": "HTMLInputElement"
              }
            },
            {
              "kind": "field",
              "name": "hasFocus",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "title",
              "type": {
                "text": "string"
              },
              "default": "\"\"",
              "attribute": "title"
            },
            {
              "kind": "field",
              "name": "__numberInput",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "__dateInput",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "autocapitalize",
              "type": {
                "text": "| \"off\"\n        | \"none\"\n        | \"on\"\n        | \"sentences\"\n        | \"words\"\n        | \"characters\""
              },
              "default": "\"none\"",
              "attribute": "autocapitalize"
            },
            {
              "kind": "field",
              "name": "autocomplete",
              "type": {
                "text": "string | undefined"
              },
              "attribute": "autocomplete"
            },
            {
              "kind": "field",
              "name": "autocorrect",
              "type": {
                "text": "\"off\" | \"on\""
              },
              "default": "\"off\"",
              "attribute": "autocorrect"
            },
            {
              "kind": "field",
              "name": "autofocus",
              "type": {
                "text": "boolean"
              },
              "attribute": "autofocus"
            },
            {
              "kind": "field",
              "name": "clearable",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "clearable"
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "defaultValue",
              "type": {
                "text": "string"
              },
              "default": "\"\""
            },
            {
              "kind": "field",
              "name": "enterkeyhint",
              "type": {
                "text": "| \"enter\"\n        | \"done\"\n        | \"go\"\n        | \"next\"\n        | \"previous\"\n        | \"search\"\n        | \"send\""
              },
              "default": "\"enter\"",
              "attribute": "enterkeyhint"
            },
            {
              "kind": "field",
              "name": "filled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "filled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "form",
              "type": {
                "text": "string"
              },
              "default": "\"\"",
              "attribute": "form",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "hint",
              "type": {
                "text": "string"
              },
              "default": "\"\"",
              "attribute": "hint"
            },
            {
              "kind": "field",
              "name": "inputmode",
              "type": {
                "text": "| \"none\"\n        | \"text\"\n        | \"decimal\"\n        | \"numeric\"\n        | \"tel\"\n        | \"search\"\n        | \"email\"\n        | \"url\""
              },
              "default": "\"text\"",
              "attribute": "inputmode"
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "\"\"",
              "attribute": "label"
            },
            {
              "kind": "field",
              "name": "min",
              "type": {
                "text": "number | string | undefined"
              },
              "attribute": "min"
            },
            {
              "kind": "field",
              "name": "minlength",
              "type": {
                "text": "number | undefined"
              },
              "attribute": "minlength"
            },
            {
              "kind": "field",
              "name": "max",
              "type": {
                "text": "number | string | undefined"
              },
              "attribute": "max"
            },
            {
              "kind": "field",
              "name": "maxlength",
              "type": {
                "text": "number | undefined"
              },
              "attribute": "maxlength"
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "default": "\"\"",
              "attribute": "name"
            },
            {
              "kind": "field",
              "name": "noSpinButtons",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "no-spin-buttons"
            },
            {
              "kind": "field",
              "name": "passwordToggle",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "password-toggle"
            },
            {
              "kind": "field",
              "name": "pattern",
              "type": {
                "text": "string | undefined"
              },
              "attribute": "pattern"
            },
            {
              "kind": "field",
              "name": "passwordVisible",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "password-visible"
            },
            {
              "kind": "field",
              "name": "pill",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "pill",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "placeholder",
              "type": {
                "text": "string"
              },
              "default": "\"\"",
              "attribute": "placeholder"
            },
            {
              "kind": "field",
              "name": "readonly",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "readonly",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "required",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "\"small\" | \"medium\" | \"large\""
              },
              "default": "\"medium\"",
              "attribute": "size",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "spellcheck",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "attribute": "spellcheck"
            },
            {
              "kind": "field",
              "name": "step",
              "type": {
                "text": "number | \"any\" | undefined"
              },
              "attribute": "step"
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "| \"date\"\n        | \"datetime-local\"\n        | \"email\"\n        | \"number\"\n        | \"password\"\n        | \"search\"\n        | \"tel\"\n        | \"text\"\n        | \"time\"\n        | \"url\""
              },
              "default": "\"text\"",
              "attribute": "type",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string"
              },
              "default": "\"\"",
              "attribute": "value"
            },
            {
              "kind": "field",
              "name": "valueAsDate"
            },
            {
              "kind": "field",
              "name": "valueAsNumber"
            },
            {
              "kind": "field",
              "name": "validity",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "validationMessage",
              "readonly": true
            },
            {
              "kind": "method",
              "name": "handleFocus",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleBlur",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleChange",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleInput",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleClearClick",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleKeyDown",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handlePasswordToggle",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleInvalid",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleDisabledChange"
            },
            {
              "kind": "method",
              "name": "handleStepChange"
            },
            {
              "kind": "method",
              "name": "handleValueChange"
            },
            {
              "kind": "method",
              "name": "focus",
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "FocusOptions"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "blur"
            },
            {
              "kind": "method",
              "name": "select"
            },
            {
              "kind": "method",
              "name": "setSelectionRange",
              "parameters": [
                {
                  "name": "selectionStart",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "selectionEnd",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "selectionDirection",
                  "default": "\"none\"",
                  "type": {
                    "text": "\"forward\" | \"backward\" | \"none\""
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "setRangeText",
              "parameters": [
                {
                  "name": "replacement",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "start",
                  "optional": true,
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "end",
                  "optional": true,
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "selectMode",
                  "default": "\"preserve\"",
                  "type": {
                    "text": "\"select\" | \"start\" | \"end\" | \"preserve\""
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "showPicker"
            },
            {
              "kind": "method",
              "name": "stepUp"
            },
            {
              "kind": "method",
              "name": "stepDown"
            },
            {
              "kind": "method",
              "name": "checkValidity"
            },
            {
              "kind": "method",
              "name": "getForm",
              "return": {
                "type": {
                  "text": "HTMLFormElement | null"
                }
              }
            },
            {
              "kind": "method",
              "name": "reportValidity"
            },
            {
              "kind": "method",
              "name": "setCustomValidity",
              "parameters": [
                {
                  "name": "message",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            }
          ],
          "attributes": [
            {
              "name": "title",
              "type": {
                "text": "string"
              },
              "default": "\"\"",
              "fieldName": "title"
            },
            {
              "name": "autocapitalize",
              "type": {
                "text": "| \"off\"\n        | \"none\"\n        | \"on\"\n        | \"sentences\"\n        | \"words\"\n        | \"characters\""
              },
              "default": "\"none\"",
              "fieldName": "autocapitalize"
            },
            {
              "name": "autocomplete",
              "type": {
                "text": "string | undefined"
              },
              "fieldName": "autocomplete"
            },
            {
              "name": "autocorrect",
              "type": {
                "text": "\"off\" | \"on\""
              },
              "default": "\"off\"",
              "fieldName": "autocorrect"
            },
            {
              "name": "autofocus",
              "type": {
                "text": "boolean"
              },
              "fieldName": "autofocus"
            },
            {
              "name": "clearable",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "clearable"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "disabled"
            },
            {
              "name": "enterkeyhint",
              "type": {
                "text": "| \"enter\"\n        | \"done\"\n        | \"go\"\n        | \"next\"\n        | \"previous\"\n        | \"search\"\n        | \"send\""
              },
              "default": "\"enter\"",
              "fieldName": "enterkeyhint"
            },
            {
              "name": "filled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "filled"
            },
            {
              "name": "form",
              "type": {
                "text": "string"
              },
              "default": "\"\"",
              "fieldName": "form"
            },
            {
              "name": "hint",
              "type": {
                "text": "string"
              },
              "default": "\"\"",
              "fieldName": "hint"
            },
            {
              "name": "inputmode",
              "type": {
                "text": "| \"none\"\n        | \"text\"\n        | \"decimal\"\n        | \"numeric\"\n        | \"tel\"\n        | \"search\"\n        | \"email\"\n        | \"url\""
              },
              "default": "\"text\"",
              "fieldName": "inputmode"
            },
            {
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "\"\"",
              "fieldName": "label"
            },
            {
              "name": "min",
              "type": {
                "text": "number | string | undefined"
              },
              "fieldName": "min"
            },
            {
              "name": "minlength",
              "type": {
                "text": "number | undefined"
              },
              "fieldName": "minlength"
            },
            {
              "name": "max",
              "type": {
                "text": "number | string | undefined"
              },
              "fieldName": "max"
            },
            {
              "name": "maxlength",
              "type": {
                "text": "number | undefined"
              },
              "fieldName": "maxlength"
            },
            {
              "name": "name",
              "type": {
                "text": "string"
              },
              "default": "\"\"",
              "fieldName": "name"
            },
            {
              "name": "no-spin-buttons",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "noSpinButtons"
            },
            {
              "name": "password-toggle",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "passwordToggle"
            },
            {
              "name": "pattern",
              "type": {
                "text": "string | undefined"
              },
              "fieldName": "pattern"
            },
            {
              "name": "password-visible",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "passwordVisible"
            },
            {
              "name": "pill",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "pill"
            },
            {
              "name": "placeholder",
              "type": {
                "text": "string"
              },
              "default": "\"\"",
              "fieldName": "placeholder"
            },
            {
              "name": "readonly",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "readonly"
            },
            {
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "required"
            },
            {
              "name": "size",
              "type": {
                "text": "\"small\" | \"medium\" | \"large\""
              },
              "default": "\"medium\"",
              "fieldName": "size"
            },
            {
              "name": "spellcheck",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "fieldName": "spellcheck"
            },
            {
              "name": "step",
              "type": {
                "text": "number | \"any\" | undefined"
              },
              "fieldName": "step"
            },
            {
              "name": "type",
              "type": {
                "text": "| \"date\"\n        | \"datetime-local\"\n        | \"email\"\n        | \"number\"\n        | \"password\"\n        | \"search\"\n        | \"tel\"\n        | \"text\"\n        | \"time\"\n        | \"url\""
              },
              "default": "\"text\"",
              "fieldName": "type"
            },
            {
              "name": "value",
              "type": {
                "text": "string"
              },
              "default": "\"\"",
              "fieldName": "value"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "pc-input",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "PcInput",
          "declaration": {
            "name": "PcInput",
            "module": "components/input/input.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "pc-input",
          "declaration": {
            "name": "PcInput",
            "module": "components/input/input.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/menu/menu.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "PcMenu",
          "members": [
            {
              "kind": "field",
              "name": "defaultSlot",
              "type": {
                "text": "HTMLSlotElement"
              }
            },
            {
              "kind": "method",
              "name": "handleClick",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleKeyDown",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleMouseDown",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleSlotChange",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "isMenuItem",
              "privacy": "private",
              "parameters": [
                {
                  "name": "item",
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "getAllItems"
            },
            {
              "kind": "method",
              "name": "getCurrentItem"
            },
            {
              "kind": "method",
              "name": "setCurrentItem",
              "parameters": [
                {
                  "name": "menuItem",
                  "type": {
                    "text": "PcMenuItem"
                  }
                }
              ]
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "pc-menu",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "PcMenu",
          "declaration": {
            "name": "PcMenu",
            "module": "components/menu/menu.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "pc-menu",
          "declaration": {
            "name": "PcMenu",
            "module": "components/menu/menu.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/menu-item/menu-item.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "PcMenuItem",
          "members": [
            {
              "kind": "field",
              "name": "dependencies",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{ \"pc-icon\": PcIcon, \"pc-popup\": PcPopup, \"pc-spinner\": PcSpinner, }"
            },
            {
              "kind": "field",
              "name": "hasSlotController",
              "privacy": "private",
              "readonly": true,
              "default": "new HasSlotController(this, \"submenu\")"
            },
            {
              "kind": "field",
              "name": "submenuController",
              "type": {
                "text": "SubmenuController"
              },
              "privacy": "private",
              "default": "new SubmenuController( this, this.hasSlotController, )"
            },
            {
              "kind": "field",
              "name": "cachedTextLabel",
              "type": {
                "text": "string"
              },
              "privacy": "private",
              "default": "\"\""
            },
            {
              "kind": "field",
              "name": "defaultSlot",
              "type": {
                "text": "HTMLSlotElement"
              }
            },
            {
              "kind": "field",
              "name": "menuItem",
              "type": {
                "text": "HTMLElement"
              }
            },
            {
              "kind": "field",
              "name": "checked",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "checked",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "loading",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "loading",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "\"normal\" | \"checkbox\""
              },
              "default": "\"normal\"",
              "attribute": "type"
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string"
              },
              "default": "\"\"",
              "attribute": "value"
            },
            {
              "kind": "method",
              "name": "handleDefaultSlotChange",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "handleHostClick",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "handleMouseOver",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleCheckedChange"
            },
            {
              "kind": "method",
              "name": "handleDisabledChange"
            },
            {
              "kind": "method",
              "name": "handleTypeChange"
            },
            {
              "kind": "method",
              "name": "getTextLabel"
            },
            {
              "kind": "method",
              "name": "isSubmenu"
            }
          ],
          "attributes": [
            {
              "name": "checked",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "checked"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "disabled"
            },
            {
              "name": "loading",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "loading"
            },
            {
              "name": "type",
              "type": {
                "text": "\"normal\" | \"checkbox\""
              },
              "default": "\"normal\"",
              "fieldName": "type"
            },
            {
              "name": "value",
              "type": {
                "text": "string"
              },
              "default": "\"\"",
              "fieldName": "value"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "pc-menu-item",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "PcMenuItem",
          "declaration": {
            "name": "PcMenuItem",
            "module": "components/menu-item/menu-item.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "pc-menu-item",
          "declaration": {
            "name": "PcMenuItem",
            "module": "components/menu-item/menu-item.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/menu-label/menu-label.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "PcMenuLabel",
          "cssParts": [
            {
              "description": "— The component’s base wrapper.",
              "name": "base"
            }
          ],
          "slots": [
            {
              "description": "The menu label’s content.",
              "name": "—"
            }
          ],
          "members": [],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "summary": "Menu labels are used to describe a group of menu items.",
          "jsDoc": "/**\n * @summary Menu labels are used to describe a group of menu items.\n * @status experimental\n * @since 0.5.0\n *\n * @slot — The menu label’s content.\n *\n * @csspart base — The component’s base wrapper.\n */",
          "status": "experimental",
          "since": "0.5.0",
          "tagName": "pc-menu-label",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "PcMenuLabel",
          "declaration": {
            "name": "PcMenuLabel",
            "module": "components/menu-label/menu-label.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "pc-menu-label",
          "declaration": {
            "name": "PcMenuLabel",
            "module": "components/menu-label/menu-label.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/option/option.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "PcOption",
          "cssParts": [
            {
              "description": "— The checked icon, a `<pc-icon>` element.",
              "name": "checked-icon"
            },
            {
              "description": "— The component’s base wrapper.",
              "name": "base"
            },
            {
              "description": "— The option’s label.",
              "name": "label"
            },
            {
              "description": "— The container that wraps the prefix.",
              "name": "prefix"
            },
            {
              "description": "— The container that wraps the suffix.",
              "name": "suffix"
            }
          ],
          "slots": [
            {
              "description": "The option’s label.",
              "name": "—"
            },
            {
              "description": "— Used to prepend an icon or similar element to the menu item.",
              "name": "prefix"
            },
            {
              "description": "— Used to append an icon or similar element to the menu item.",
              "name": "suffix"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "dependencies",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{ \"pc-icon\": PcIcon }"
            },
            {
              "kind": "field",
              "name": "isInitialized",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "defaultSlot",
              "type": {
                "text": "HTMLSlotElement"
              }
            },
            {
              "kind": "field",
              "name": "current",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "selected",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string"
              },
              "default": "\"\"",
              "description": "The option’s value. When selected, the containing form control will receive this value. The value must be unique from other options in the same group. Values must not contain spaces, as spaces are used as delimiters when listing multiple values.",
              "attribute": "value",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disables the option, preventing selection.",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "handleDefaultSlotChange",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleDisabledChange"
            },
            {
              "kind": "method",
              "name": "handleSelectedChange"
            },
            {
              "kind": "method",
              "name": "handleValueChange"
            },
            {
              "kind": "method",
              "name": "getTextLabel",
              "description": "Returns a plain text label based on the option’s content."
            }
          ],
          "attributes": [
            {
              "name": "value",
              "type": {
                "text": "string"
              },
              "default": "\"\"",
              "description": "The option’s value. When selected, the containing form control will receive this value. The value must be unique from other options in the same group. Values must not contain spaces, as spaces are used as delimiters when listing multiple values.",
              "fieldName": "value"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disables the option, preventing selection.",
              "fieldName": "disabled"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "summary": "Options define the selectable items within various form controls such as a [select](/components/select).",
          "jsDoc": "/**\n * @summary Options define the selectable items within various form controls such as a [select](/components/select).\n * @status experimental\n * @since 0.5.0\n *\n * @dependency pc-icon\n *\n * @slot — The option’s label.\n * @slot prefix — Used to prepend an icon or similar element to the menu item.\n * @slot suffix — Used to append an icon or similar element to the menu item.\n *\n * @csspart checked-icon — The checked icon, a `<pc-icon>` element.\n * @csspart base — The component’s base wrapper.\n * @csspart label — The option’s label.\n * @csspart prefix — The container that wraps the prefix.\n * @csspart suffix — The container that wraps the suffix.\n */",
          "status": "experimental",
          "since": "0.5.0",
          "dependencies": [
            "pc-icon"
          ],
          "tagName": "pc-option",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "PcOption",
          "declaration": {
            "name": "PcOption",
            "module": "components/option/option.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "pc-option",
          "declaration": {
            "name": "PcOption",
            "module": "components/option/option.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/popup/popup.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "PcPopup",
          "members": [
            {
              "kind": "field",
              "name": "anchorElement",
              "type": {
                "text": "Element | VirtualElement | null"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "cleanup",
              "type": {
                "text": "ReturnType<typeof autoUpdate> | undefined"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "popup",
              "type": {
                "text": "HTMLElement"
              }
            },
            {
              "kind": "field",
              "name": "arrowElement",
              "type": {
                "text": "HTMLElement"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "active",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "active",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "anchor",
              "type": {
                "text": "Element | string | VirtualElement | undefined"
              },
              "attribute": "anchor"
            },
            {
              "kind": "field",
              "name": "arrow",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "arrow"
            },
            {
              "kind": "field",
              "name": "arrowPadding",
              "type": {
                "text": "number"
              },
              "default": "10",
              "attribute": "arrow-padding"
            },
            {
              "kind": "field",
              "name": "arrowPlacement",
              "type": {
                "text": "| \"start\"\n        | \"end\"\n        | \"center\"\n        | \"anchor\""
              },
              "default": "\"anchor\"",
              "attribute": "arrow-placement"
            },
            {
              "kind": "field",
              "name": "autoSize",
              "type": {
                "text": "| \"horizontal\"\n        | \"vertical\"\n        | \"both\" | undefined"
              },
              "attribute": "auto-size"
            },
            {
              "kind": "field",
              "name": "autoSizeBoundary",
              "type": {
                "text": "Element | Element[] | undefined"
              },
              "attribute": "autoSizeBoundary"
            },
            {
              "kind": "field",
              "name": "autoSizePadding",
              "type": {
                "text": "number"
              },
              "default": "0",
              "attribute": "auto-size-padding"
            },
            {
              "kind": "field",
              "name": "distance",
              "type": {
                "text": "number"
              },
              "default": "0",
              "attribute": "distance"
            },
            {
              "kind": "field",
              "name": "flip",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "flip"
            },
            {
              "kind": "field",
              "name": "flipBoundary",
              "type": {
                "text": "Element | Element[] | undefined"
              },
              "attribute": "flipBoundary"
            },
            {
              "kind": "field",
              "name": "flipFallbackPlacements",
              "type": {
                "text": "string"
              },
              "default": "\"\"",
              "attribute": "flip-fallback-placements"
            },
            {
              "kind": "field",
              "name": "flipFallbackStrategy",
              "type": {
                "text": "| \"best-fit\"\n        | \"initial\""
              },
              "default": "\"best-fit\"",
              "attribute": "flip-fallback-strategy"
            },
            {
              "kind": "field",
              "name": "flipPadding",
              "type": {
                "text": "number"
              },
              "default": "0",
              "attribute": "flip-padding"
            },
            {
              "kind": "field",
              "name": "hoverBridge",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "hover-bridge"
            },
            {
              "kind": "field",
              "name": "placement",
              "type": {
                "text": "| \"top\"\n        | \"top-start\"\n        | \"top-end\"\n        | \"bottom\"\n        | \"bottom-start\"\n        | \"bottom-end\"\n        | \"right\"\n        | \"right-start\"\n        | \"right-end\"\n        | \"left\"\n        | \"left-start\"\n        | \"left-end\""
              },
              "default": "\"top\"",
              "attribute": "placement",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "shift",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "shift"
            },
            {
              "kind": "field",
              "name": "shiftBoundary",
              "type": {
                "text": "Element | Element[] | undefined"
              },
              "attribute": "shiftBoundary"
            },
            {
              "kind": "field",
              "name": "shiftPadding",
              "type": {
                "text": "number"
              },
              "default": "0",
              "attribute": "shift-padding"
            },
            {
              "kind": "field",
              "name": "skidding",
              "type": {
                "text": "number"
              },
              "default": "0",
              "attribute": "skidding"
            },
            {
              "kind": "field",
              "name": "strategy",
              "type": {
                "text": "\"absolute\" | \"fixed\""
              },
              "default": "\"absolute\"",
              "attribute": "strategy",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "sync",
              "type": {
                "text": "\"width\" | \"height\" | \"both\" | undefined"
              },
              "attribute": "sync"
            },
            {
              "kind": "method",
              "name": "handleAnchorChange",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "start",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "stop",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "Promise<void>"
                }
              }
            },
            {
              "kind": "method",
              "name": "reposition"
            },
            {
              "kind": "field",
              "name": "updateHoverBridge",
              "privacy": "private"
            }
          ],
          "attributes": [
            {
              "name": "active",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "active"
            },
            {
              "name": "anchor",
              "type": {
                "text": "Element | string | VirtualElement | undefined"
              },
              "fieldName": "anchor"
            },
            {
              "name": "arrow",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "arrow"
            },
            {
              "name": "arrow-padding",
              "type": {
                "text": "number"
              },
              "default": "10",
              "fieldName": "arrowPadding"
            },
            {
              "name": "arrow-placement",
              "type": {
                "text": "| \"start\"\n        | \"end\"\n        | \"center\"\n        | \"anchor\""
              },
              "default": "\"anchor\"",
              "fieldName": "arrowPlacement"
            },
            {
              "name": "auto-size",
              "type": {
                "text": "| \"horizontal\"\n        | \"vertical\"\n        | \"both\" | undefined"
              },
              "fieldName": "autoSize"
            },
            {
              "name": "autoSizeBoundary",
              "type": {
                "text": "Element | Element[] | undefined"
              },
              "fieldName": "autoSizeBoundary"
            },
            {
              "name": "auto-size-padding",
              "type": {
                "text": "number"
              },
              "default": "0",
              "fieldName": "autoSizePadding"
            },
            {
              "name": "distance",
              "type": {
                "text": "number"
              },
              "default": "0",
              "fieldName": "distance"
            },
            {
              "name": "flip",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "flip"
            },
            {
              "name": "flipBoundary",
              "type": {
                "text": "Element | Element[] | undefined"
              },
              "fieldName": "flipBoundary"
            },
            {
              "name": "flip-fallback-placements",
              "type": {
                "text": "string"
              },
              "default": "\"\"",
              "fieldName": "flipFallbackPlacements"
            },
            {
              "name": "flip-fallback-strategy",
              "type": {
                "text": "| \"best-fit\"\n        | \"initial\""
              },
              "default": "\"best-fit\"",
              "fieldName": "flipFallbackStrategy"
            },
            {
              "name": "flip-padding",
              "type": {
                "text": "number"
              },
              "default": "0",
              "fieldName": "flipPadding"
            },
            {
              "name": "hover-bridge",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "hoverBridge"
            },
            {
              "name": "placement",
              "type": {
                "text": "| \"top\"\n        | \"top-start\"\n        | \"top-end\"\n        | \"bottom\"\n        | \"bottom-start\"\n        | \"bottom-end\"\n        | \"right\"\n        | \"right-start\"\n        | \"right-end\"\n        | \"left\"\n        | \"left-start\"\n        | \"left-end\""
              },
              "default": "\"top\"",
              "fieldName": "placement"
            },
            {
              "name": "shift",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "shift"
            },
            {
              "name": "shiftBoundary",
              "type": {
                "text": "Element | Element[] | undefined"
              },
              "fieldName": "shiftBoundary"
            },
            {
              "name": "shift-padding",
              "type": {
                "text": "number"
              },
              "default": "0",
              "fieldName": "shiftPadding"
            },
            {
              "name": "skidding",
              "type": {
                "text": "number"
              },
              "default": "0",
              "fieldName": "skidding"
            },
            {
              "name": "strategy",
              "type": {
                "text": "\"absolute\" | \"fixed\""
              },
              "default": "\"absolute\"",
              "fieldName": "strategy"
            },
            {
              "name": "sync",
              "type": {
                "text": "\"width\" | \"height\" | \"both\" | undefined"
              },
              "fieldName": "sync"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "pc-popup",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "PcPopup",
          "declaration": {
            "name": "PcPopup",
            "module": "components/popup/popup.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "pc-popup",
          "declaration": {
            "name": "PcPopup",
            "module": "components/popup/popup.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/radio/radio.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "PcRadio",
          "members": [
            {
              "kind": "field",
              "name": "checked",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "hasFocus",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "\"small\" | \"medium\" | \"large\""
              },
              "default": "\"medium\"",
              "attribute": "size",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string | undefined"
              },
              "attribute": "value"
            },
            {
              "kind": "method",
              "name": "handleClick",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleFocus",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleBlur",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "setInitialAttributes",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleCheckedChange"
            },
            {
              "kind": "method",
              "name": "handleDisabledChange"
            }
          ],
          "attributes": [
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "disabled"
            },
            {
              "name": "size",
              "type": {
                "text": "\"small\" | \"medium\" | \"large\""
              },
              "default": "\"medium\"",
              "fieldName": "size"
            },
            {
              "name": "value",
              "type": {
                "text": "string | undefined"
              },
              "fieldName": "value"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "pc-radio",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "PcRadio",
          "declaration": {
            "name": "PcRadio",
            "module": "components/radio/radio.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "pc-radio",
          "declaration": {
            "name": "PcRadio",
            "module": "components/radio/radio.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/qr-code/qr-code.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "PcQrCode",
          "members": [
            {
              "kind": "field",
              "name": "canvas",
              "type": {
                "text": "HTMLElement"
              }
            },
            {
              "kind": "field",
              "name": "background",
              "type": {
                "text": "string"
              },
              "default": "\"white\"",
              "attribute": "background"
            },
            {
              "kind": "field",
              "name": "errorCorrection",
              "type": {
                "text": "| \"L\"\n        | \"M\"\n        | \"Q\"\n        | \"H\""
              },
              "default": "\"M\"",
              "attribute": "error-correction"
            },
            {
              "kind": "field",
              "name": "fill",
              "type": {
                "text": "string"
              },
              "default": "\"black\"",
              "attribute": "fill"
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "\"\"",
              "attribute": "label"
            },
            {
              "kind": "field",
              "name": "radius",
              "type": {
                "text": "number"
              },
              "default": "0",
              "attribute": "radius"
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "number"
              },
              "default": "128",
              "attribute": "size"
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string"
              },
              "default": "\"\"",
              "attribute": "value"
            },
            {
              "kind": "method",
              "name": "generate"
            }
          ],
          "attributes": [
            {
              "name": "background",
              "type": {
                "text": "string"
              },
              "default": "\"white\"",
              "fieldName": "background"
            },
            {
              "name": "error-correction",
              "type": {
                "text": "| \"L\"\n        | \"M\"\n        | \"Q\"\n        | \"H\""
              },
              "default": "\"M\"",
              "fieldName": "errorCorrection"
            },
            {
              "name": "fill",
              "type": {
                "text": "string"
              },
              "default": "\"black\"",
              "fieldName": "fill"
            },
            {
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "\"\"",
              "fieldName": "label"
            },
            {
              "name": "radius",
              "type": {
                "text": "number"
              },
              "default": "0",
              "fieldName": "radius"
            },
            {
              "name": "size",
              "type": {
                "text": "number"
              },
              "default": "128",
              "fieldName": "size"
            },
            {
              "name": "value",
              "type": {
                "text": "string"
              },
              "default": "\"\"",
              "fieldName": "value"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "pc-qr-code",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "PcQrCode",
          "declaration": {
            "name": "PcQrCode",
            "module": "components/qr-code/qr-code.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "pc-qr-code",
          "declaration": {
            "name": "PcQrCode",
            "module": "components/qr-code/qr-code.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/radio-group/radio-group.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "PcRadioGroup",
          "members": [
            {
              "kind": "field",
              "name": "dependencies",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{ \"pc-button-group\": PcButtonGroup, }"
            },
            {
              "kind": "field",
              "name": "formControlController",
              "privacy": "protected",
              "readonly": true,
              "default": "new FormControlController(this)"
            },
            {
              "kind": "field",
              "name": "hasSlotController",
              "privacy": "private",
              "readonly": true,
              "default": "new HasSlotController( this, \"hint\", \"label\", )"
            },
            {
              "kind": "field",
              "name": "customValidityMessage",
              "type": {
                "text": "string"
              },
              "privacy": "private",
              "default": "\"\""
            },
            {
              "kind": "field",
              "name": "validationTimeout",
              "type": {
                "text": "number"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "defaultSlot",
              "type": {
                "text": "HTMLSlotElement"
              }
            },
            {
              "kind": "field",
              "name": "validationInput",
              "type": {
                "text": "HTMLInputElement"
              }
            },
            {
              "kind": "field",
              "name": "hasButtonGroup",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "errorMessage",
              "type": {
                "text": "string"
              },
              "privacy": "private",
              "default": "\"\""
            },
            {
              "kind": "field",
              "name": "defaultValue",
              "type": {
                "text": "string"
              },
              "default": "\"\""
            },
            {
              "kind": "field",
              "name": "form",
              "type": {
                "text": "string"
              },
              "default": "\"\"",
              "attribute": "form",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "hint",
              "type": {
                "text": "string"
              },
              "default": "\"\"",
              "attribute": "hint"
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "\"\"",
              "attribute": "label"
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "default": "\"option\"",
              "attribute": "name"
            },
            {
              "kind": "field",
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "required",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "\"small\" | \"medium\" | \"large\""
              },
              "default": "\"medium\"",
              "attribute": "size",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string"
              },
              "default": "\"\"",
              "attribute": "value",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "validity",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "validationMessage",
              "readonly": true
            },
            {
              "kind": "method",
              "name": "getAllRadios",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleRadioClick",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleKeyDown",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleLabelClick",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleInvalid",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "syncRadioElements",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "syncRadios",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "updateCheckedRadio",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleSizeChange"
            },
            {
              "kind": "method",
              "name": "handleValueChange"
            },
            {
              "kind": "method",
              "name": "checkValidity"
            },
            {
              "kind": "method",
              "name": "getForm",
              "return": {
                "type": {
                  "text": "HTMLFormElement | null"
                }
              }
            },
            {
              "kind": "method",
              "name": "reportValidity",
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "method",
              "name": "setCustomValidity",
              "parameters": [
                {
                  "name": "message",
                  "default": "\"\""
                }
              ]
            },
            {
              "kind": "method",
              "name": "focus",
              "privacy": "public",
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "FocusOptions"
                  }
                }
              ]
            }
          ],
          "attributes": [
            {
              "name": "form",
              "type": {
                "text": "string"
              },
              "default": "\"\"",
              "fieldName": "form"
            },
            {
              "name": "hint",
              "type": {
                "text": "string"
              },
              "default": "\"\"",
              "fieldName": "hint"
            },
            {
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "\"\"",
              "fieldName": "label"
            },
            {
              "name": "name",
              "type": {
                "text": "string"
              },
              "default": "\"option\"",
              "fieldName": "name"
            },
            {
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "required"
            },
            {
              "name": "size",
              "type": {
                "text": "\"small\" | \"medium\" | \"large\""
              },
              "default": "\"medium\"",
              "fieldName": "size"
            },
            {
              "name": "value",
              "type": {
                "text": "string"
              },
              "default": "\"\"",
              "fieldName": "value"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "pc-radio-group",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "PcRadioGroup",
          "declaration": {
            "name": "PcRadioGroup",
            "module": "components/radio-group/radio-group.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "pc-radio-group",
          "declaration": {
            "name": "PcRadioGroup",
            "module": "components/radio-group/radio-group.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/radio-button/radio-button.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "PcRadioButton",
          "members": [
            {
              "kind": "field",
              "name": "hasSlotController",
              "privacy": "private",
              "readonly": true,
              "default": "new HasSlotController( this, \"[default]\", \"prefix\", \"suffix\", )"
            },
            {
              "kind": "field",
              "name": "input",
              "type": {
                "text": "HTMLInputElement"
              }
            },
            {
              "kind": "field",
              "name": "hiddenInput",
              "type": {
                "text": "HTMLInputElement"
              }
            },
            {
              "kind": "field",
              "name": "hasFocus",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "checked",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "checked",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "pill",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "pill",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "\"small\" | \"medium\" | \"large\""
              },
              "default": "\"medium\"",
              "attribute": "size",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string | undefined"
              },
              "attribute": "value"
            },
            {
              "kind": "method",
              "name": "handleClick",
              "privacy": "private",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleFocus",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleBlur",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleDisabledChange"
            },
            {
              "kind": "method",
              "name": "focus",
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "FocusOptions"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "blur"
            }
          ],
          "attributes": [
            {
              "name": "checked",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "checked"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "disabled"
            },
            {
              "name": "pill",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "pill"
            },
            {
              "name": "size",
              "type": {
                "text": "\"small\" | \"medium\" | \"large\""
              },
              "default": "\"medium\"",
              "fieldName": "size"
            },
            {
              "name": "value",
              "type": {
                "text": "string | undefined"
              },
              "fieldName": "value"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "pc-radio-button",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "PcRadioButton",
          "declaration": {
            "name": "PcRadioButton",
            "module": "components/radio-button/radio-button.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "pc-radio-button",
          "declaration": {
            "name": "PcRadioButton",
            "module": "components/radio-button/radio-button.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/rating/rating.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "PcRating",
          "members": [
            {
              "kind": "field",
              "name": "dependencies",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{ \"pc-icon\": PcIcon }"
            },
            {
              "kind": "field",
              "name": "rating",
              "type": {
                "text": "HTMLElement"
              }
            },
            {
              "kind": "field",
              "name": "hoverValue",
              "type": {
                "text": "number"
              },
              "privacy": "private",
              "default": "0"
            },
            {
              "kind": "field",
              "name": "isHovering",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "\"\"",
              "attribute": "label"
            },
            {
              "kind": "field",
              "name": "max",
              "type": {
                "text": "number"
              },
              "default": "5",
              "attribute": "max"
            },
            {
              "kind": "field",
              "name": "precision",
              "type": {
                "text": "number"
              },
              "default": "1",
              "attribute": "precision"
            },
            {
              "kind": "field",
              "name": "readonly",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "readonly",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "number"
              },
              "default": "0",
              "attribute": "value"
            },
            {
              "kind": "field",
              "name": "getIcon",
              "type": {
                "text": "(value: number) => string"
              },
              "attribute": "getIcon"
            },
            {
              "kind": "method",
              "name": "getValueFromMousePosition",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "getValueFromTouchPosition",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "TouchEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "getValueFromXCoordinate",
              "privacy": "private",
              "parameters": [
                {
                  "name": "coordinate",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleClick",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "setValue",
              "privacy": "private",
              "parameters": [
                {
                  "name": "newValue",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleKeyDown",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleMouseEnter",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleMouseMove",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleMouseLeave",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleTouchStart",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "TouchEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleTouchMove",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "TouchEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleTouchEnd",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "TouchEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "roundToPrecision",
              "privacy": "private",
              "parameters": [
                {
                  "name": "numberToRound",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "precision",
                  "default": "0.5"
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleHoverValueChange"
            },
            {
              "kind": "method",
              "name": "handleIsHoveringChange"
            },
            {
              "kind": "method",
              "name": "focus",
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "FocusOptions"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "blur"
            }
          ],
          "attributes": [
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "disabled"
            },
            {
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "\"\"",
              "fieldName": "label"
            },
            {
              "name": "max",
              "type": {
                "text": "number"
              },
              "default": "5",
              "fieldName": "max"
            },
            {
              "name": "precision",
              "type": {
                "text": "number"
              },
              "default": "1",
              "fieldName": "precision"
            },
            {
              "name": "readonly",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "readonly"
            },
            {
              "name": "value",
              "type": {
                "text": "number"
              },
              "default": "0",
              "fieldName": "value"
            },
            {
              "name": "getIcon",
              "type": {
                "text": "(value: number) => string"
              },
              "fieldName": "getIcon"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "pc-rating",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "PcRating",
          "declaration": {
            "name": "PcRating",
            "module": "components/rating/rating.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "pc-rating",
          "declaration": {
            "name": "PcRating",
            "module": "components/rating/rating.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/resize-observer/resize-observer.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "PcResizeObserver",
          "slots": [
            {
              "description": "One or more elements to watch for resizing.",
              "name": "—"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "resizeObserver",
              "type": {
                "text": "ResizeObserver"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "observedElements",
              "type": {
                "text": "HTMLElement[]"
              },
              "privacy": "private",
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disables the resize observer.",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "handleSlotChange",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "startObserver",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "stopObserver",
              "privacy": "private"
            }
          ],
          "events": [
            {
              "type": {
                "text": "{ entries: ResizeObserverEntry[] }"
              },
              "description": "— Emitted when the element is resized.",
              "name": "pc-resize"
            }
          ],
          "attributes": [
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disables the resize observer.",
              "fieldName": "disabled"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "summary": "The Resize Observer component offers a thin, declarative interface to the [`ResizeObserver` API](https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver).",
          "jsDoc": "/**\n * @summary The Resize Observer component offers a thin, declarative interface to the [`ResizeObserver` API](https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver).\n * @status experimental\n * @since 0.1.0\n *\n * @slot — One or more elements to watch for resizing.\n *\n * @event {{ entries: ResizeObserverEntry[] }} pc-resize — Emitted when the element is resized.\n */",
          "status": "experimental",
          "since": "0.1.0",
          "tagName": "pc-resize-observer",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "PcResizeObserver",
          "declaration": {
            "name": "PcResizeObserver",
            "module": "components/resize-observer/resize-observer.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "pc-resize-observer",
          "declaration": {
            "name": "PcResizeObserver",
            "module": "components/resize-observer/resize-observer.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/select/select.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "PcSelect",
          "cssParts": [
            {
              "description": "— The form control that wraps the label, input and hint text.",
              "name": "form-control"
            },
            {
              "description": "— The label’s wrapper.",
              "name": "label"
            },
            {
              "description": "— The select’s wrapper.",
              "name": "input"
            },
            {
              "description": "— The hint’s wrapper.",
              "name": "hint"
            },
            {
              "description": "— The container the wraps the prefix, suffix, combobox, clear icon and expand button.",
              "name": "combobox"
            },
            {
              "description": "— The container that wraps the prefix slot.",
              "name": "prefix"
            },
            {
              "description": "— The container that wraps the suffix slot.",
              "name": "suffix"
            },
            {
              "description": "— The element that displays the selected option’s label, an `<input>` element.",
              "name": "display-input"
            },
            {
              "description": "— The listbox container where options are slotted.",
              "name": "listbox"
            },
            {
              "description": "— The container that houses option tags when `multiselect` is used.",
              "name": "tags"
            },
            {
              "description": "— The individual tags that represent each multiselect option.",
              "name": "tag"
            },
            {
              "description": "— The tag’s base part.",
              "name": "tag__base"
            },
            {
              "description": "— The tag’s content part.",
              "name": "tag__content"
            },
            {
              "description": "— The tag’s remove button.",
              "name": "tag__remove-button"
            },
            {
              "description": "— The tag’s remove button base part.",
              "name": "tag__remove-button__base"
            },
            {
              "description": "— The clear button.",
              "name": "clear-button"
            },
            {
              "description": "— The container that wraps the expand icon.",
              "name": "expand-icon"
            }
          ],
          "slots": [
            {
              "description": "The listbox options. Only `<pc-option>` and `<pc-divider>` elements can be slotted here. You can use `<pc-divider>` to group items visually.",
              "name": "—"
            },
            {
              "description": "— The input’s label. Alternatively, you can use the `label` attribute.",
              "name": "label"
            },
            {
              "description": "— Used to prepend a presentational icon or similar element to the combobox.",
              "name": "prefix"
            },
            {
              "description": "— Used to append a presentational icon or similar element to the combobox.",
              "name": "suffix"
            },
            {
              "description": "— An icon to use in place of the default clear icon.",
              "name": "clear-icon"
            },
            {
              "description": "— The icon to show when the select is expanded and collapsed. Rotates on open and close.",
              "name": "expand-icon"
            },
            {
              "description": "— Text that describes how to use the input. Alternatively, you can use the `hint` attribute.",
              "name": "hint"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "formControlController",
              "privacy": "private",
              "readonly": true,
              "default": "new FormControlController(this, { assumeInteractionOn: [\"pc-blur\", \"pc-input\"], })"
            },
            {
              "kind": "field",
              "name": "hasSlotController",
              "privacy": "private",
              "readonly": true,
              "default": "new HasSlotController( this, \"label\", \"hint\", )"
            },
            {
              "kind": "field",
              "name": "typeToSelectString",
              "type": {
                "text": "string"
              },
              "privacy": "private",
              "default": "\"\""
            },
            {
              "kind": "field",
              "name": "typeToSelectTimeout",
              "type": {
                "text": "number"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "closeWatcher",
              "type": {
                "text": "CloseWatcher | null"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "hasFocus",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "valueHasChanged",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "default": "\"\"",
              "description": "The name of the select, submitted as a name/value pair with form data.",
              "attribute": "name"
            },
            {
              "kind": "field",
              "name": "_value",
              "type": {
                "text": "string | string[]"
              },
              "privacy": "private",
              "default": "\"\""
            },
            {
              "kind": "field",
              "name": "defaultValue",
              "type": {
                "text": "string | string[]"
              },
              "default": "\"\"",
              "description": "The default value of the select. Primarily used for resetting the select.",
              "attribute": "value"
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "\"small\" | \"medium\" | \"large\""
              },
              "default": "\"medium\"",
              "description": "The select’s size.",
              "attribute": "size",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "placeholder",
              "type": {
                "text": "string"
              },
              "default": "\"\"",
              "description": "Placeholder text to show as a hint when the select is empty.",
              "attribute": "placeholder"
            },
            {
              "kind": "field",
              "name": "multiple",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Allows more than one option to be selected.",
              "attribute": "multiple",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "maxOptionsVisible",
              "type": {
                "text": "number"
              },
              "default": "3",
              "description": "The maximum number of selected options to show when the `multiple` attribute is true. After the maximum limit, “+number” will be shown to indicate the number of additional items that are selected. Set the value to 0 to remove the limit.",
              "attribute": "max-options-visible"
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disables the select.",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "clearable",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Adds a clear button when the select is not empty.",
              "attribute": "clearable"
            },
            {
              "kind": "field",
              "name": "open",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Indicates whether or not the select is open. You can toggle this attribute to show and hide the menu, or you can use the `show()` and `hide()` methods and this attribute will reflect the select’s open state.",
              "attribute": "open",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "hoist",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Enable this option to prevent the listbox from being clipped when the component is placed inside a container with `overflow: auto|scroll`. Hoisting uses a fixed positioning strategy that works in many, but not all scenarios.",
              "attribute": "hoist"
            },
            {
              "kind": "field",
              "name": "filled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Draws a filled select control.",
              "attribute": "filled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "pill",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Draws a pill‐style select.",
              "attribute": "pill",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "\"\"",
              "description": "The select’s label. If you need to display HTML, use the `label` slot instead.",
              "attribute": "label"
            },
            {
              "kind": "field",
              "name": "placement",
              "type": {
                "text": "\"top\" | \"bottom\""
              },
              "default": "\"bottom\"",
              "description": "The preferred placement of the select’s listbox. Note that the actual placement may vary to keep the listbox inside of the viewport.",
              "attribute": "placement",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "hint",
              "type": {
                "text": "string"
              },
              "default": "\"\"",
              "description": "The select’s hint. If you need to display HTML, use the `hint` slot instead.",
              "attribute": "hint"
            },
            {
              "kind": "field",
              "name": "form",
              "type": {
                "text": "string"
              },
              "default": "\"\"",
              "description": "By default, form controls are associated with the nearest containing `<form>` element. This attribute allows you to place the form control outside of a form and associate it with the form that has this `id`. The form must be in the same document or shadow root for this to work.",
              "attribute": "form",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Indicates if the select must be filled in or not.",
              "attribute": "required",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "getTag",
              "type": {
                "text": "(\n        option: PcOption,\n        index: number,\n    ) => TemplateResult | string | HTMLElement"
              },
              "description": "A function that customises the tags to be rendered when the `multiple` attribute is true. The first parameter is the option, the second parameter is the current tag’s index. The function should either return either a Lit `TemplateResult` or a string containing trusted HTML of the symbol to render at the specified value.",
              "attribute": "getTag"
            },
            {
              "kind": "field",
              "name": "value",
              "description": "The current value of the select, submitted as a name/value pair with form data. When the `multiple` attribute is true, the `value` attribute will be a space‐delimited list of values based on the options selected, and the `value` property will be an array. **For this reason, values must not contain spaces.**"
            },
            {
              "kind": "field",
              "name": "validity",
              "description": "Gets the validity state object.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "validationMessage",
              "description": "Gets the validation message.",
              "readonly": true
            },
            {
              "kind": "method",
              "name": "addOpenListeners",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "removeOpenListeners",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleFocus",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleBlur",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "handleDocumentFocusIn",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "handleDocumentKeyDown",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "handleDocumentMouseDown",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleLabelClick",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleComboboxMouseDown",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleComboboxKeyDown",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleClearClick",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleClearMouseDown",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleOptionClick",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleDefaultSlotChange",
              "privacy": "public"
            },
            {
              "kind": "method",
              "name": "handleTagRemove",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "PcRemoveEvent"
                  }
                },
                {
                  "name": "option",
                  "type": {
                    "text": "PcOption"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "getAllOptions",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "getFirstOption",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "setCurrentOption",
              "privacy": "private",
              "parameters": [
                {
                  "name": "option",
                  "type": {
                    "text": "PcOption | null"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "setSelectedOptions",
              "privacy": "private",
              "parameters": [
                {
                  "name": "option",
                  "type": {
                    "text": "PcOption | PcOption[]"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "toggleOptionSelection",
              "privacy": "private",
              "parameters": [
                {
                  "name": "option",
                  "type": {
                    "text": "PcOption"
                  }
                },
                {
                  "name": "force",
                  "optional": true,
                  "type": {
                    "text": "boolean"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "selectionChanged",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleInvalid",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleDisabledChange"
            },
            {
              "kind": "method",
              "name": "handleValueChange"
            },
            {
              "kind": "method",
              "name": "handleOpenChange"
            },
            {
              "kind": "method",
              "name": "show",
              "description": "Shows the listbox."
            },
            {
              "kind": "method",
              "name": "hide",
              "description": "Hides the listbox."
            },
            {
              "kind": "method",
              "name": "checkValidity",
              "description": "Checks for validity but does not show a validation message. Returns `true` when valid and `false` when invalid."
            },
            {
              "kind": "method",
              "name": "getForm",
              "return": {
                "type": {
                  "text": "HTMLFormElement | null"
                }
              },
              "description": "Gets the associated form, if one exists."
            },
            {
              "kind": "method",
              "name": "reportValidity",
              "description": "Checks for validity and shows the browser’s validation message if the control is invalid."
            },
            {
              "kind": "method",
              "name": "setCustomValidity",
              "parameters": [
                {
                  "name": "message",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Sets a custom validation message. Pass an empty string to restore validity."
            },
            {
              "kind": "method",
              "name": "focus",
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "FocusOptions"
                  }
                }
              ],
              "description": "Focuses the control."
            },
            {
              "kind": "method",
              "name": "blur",
              "description": "Unfocuses the select (i.e. blurs it)."
            }
          ],
          "events": [
            {
              "description": "— Emitted when the select’s value changes.",
              "name": "pc-change"
            },
            {
              "description": "— Emitted when the select’s value is cleared.",
              "name": "pc-clear"
            },
            {
              "description": "— Emitted when the select receives input.",
              "name": "pc-input"
            },
            {
              "description": "— Emitted when the select gains focus.",
              "name": "pc-focus"
            },
            {
              "description": "— Emitted when the select loses focus.",
              "name": "pc-blur"
            },
            {
              "description": "— Emitted when the select’s menu opens.",
              "name": "pc-show"
            },
            {
              "description": "— Emitted after the select’s menu opens and all animations are complete.",
              "name": "pc-after-show"
            },
            {
              "description": "— Emitted when the select’s menu closes.",
              "name": "pc-hide"
            },
            {
              "description": "— Emitted after the select’s menu closes and all animations are complete.",
              "name": "pc-after-hide"
            },
            {
              "description": "— Emitted when the select has been checked for validity and its constraints aren’t satisfied.",
              "name": "pc-invalid"
            }
          ],
          "attributes": [
            {
              "name": "name",
              "type": {
                "text": "string"
              },
              "default": "\"\"",
              "description": "The name of the select, submitted as a name/value pair with form data.",
              "fieldName": "name"
            },
            {
              "name": "value",
              "type": {
                "text": "string | string[]"
              },
              "default": "\"\"",
              "description": "The default value of the select. Primarily used for resetting the select.",
              "fieldName": "defaultValue"
            },
            {
              "name": "size",
              "type": {
                "text": "\"small\" | \"medium\" | \"large\""
              },
              "default": "\"medium\"",
              "description": "The select’s size.",
              "fieldName": "size"
            },
            {
              "name": "placeholder",
              "type": {
                "text": "string"
              },
              "default": "\"\"",
              "description": "Placeholder text to show as a hint when the select is empty.",
              "fieldName": "placeholder"
            },
            {
              "name": "multiple",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Allows more than one option to be selected.",
              "fieldName": "multiple"
            },
            {
              "name": "max-options-visible",
              "type": {
                "text": "number"
              },
              "default": "3",
              "description": "The maximum number of selected options to show when the `multiple` attribute is true. After the maximum limit, “+number” will be shown to indicate the number of additional items that are selected. Set the value to 0 to remove the limit.",
              "fieldName": "maxOptionsVisible"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disables the select.",
              "fieldName": "disabled"
            },
            {
              "name": "clearable",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Adds a clear button when the select is not empty.",
              "fieldName": "clearable"
            },
            {
              "name": "open",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Indicates whether or not the select is open. You can toggle this attribute to show and hide the menu, or you can use the `show()` and `hide()` methods and this attribute will reflect the select’s open state.",
              "fieldName": "open"
            },
            {
              "name": "hoist",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Enable this option to prevent the listbox from being clipped when the component is placed inside a container with `overflow: auto|scroll`. Hoisting uses a fixed positioning strategy that works in many, but not all scenarios.",
              "fieldName": "hoist"
            },
            {
              "name": "filled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Draws a filled select control.",
              "fieldName": "filled"
            },
            {
              "name": "pill",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Draws a pill‐style select.",
              "fieldName": "pill"
            },
            {
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "\"\"",
              "description": "The select’s label. If you need to display HTML, use the `label` slot instead.",
              "fieldName": "label"
            },
            {
              "name": "placement",
              "type": {
                "text": "\"top\" | \"bottom\""
              },
              "default": "\"bottom\"",
              "description": "The preferred placement of the select’s listbox. Note that the actual placement may vary to keep the listbox inside of the viewport.",
              "fieldName": "placement"
            },
            {
              "name": "hint",
              "type": {
                "text": "string"
              },
              "default": "\"\"",
              "description": "The select’s hint. If you need to display HTML, use the `hint` slot instead.",
              "fieldName": "hint"
            },
            {
              "name": "form",
              "type": {
                "text": "string"
              },
              "default": "\"\"",
              "description": "By default, form controls are associated with the nearest containing `<form>` element. This attribute allows you to place the form control outside of a form and associate it with the form that has this `id`. The form must be in the same document or shadow root for this to work.",
              "fieldName": "form"
            },
            {
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Indicates if the select must be filled in or not.",
              "fieldName": "required"
            },
            {
              "name": "getTag",
              "type": {
                "text": "(\n        option: PcOption,\n        index: number,\n    ) => TemplateResult | string | HTMLElement"
              },
              "description": "A function that customises the tags to be rendered when the `multiple` attribute is true. The first parameter is the option, the second parameter is the current tag’s index. The function should either return either a Lit `TemplateResult` or a string containing trusted HTML of the symbol to render at the specified value.",
              "fieldName": "getTag"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "summary": "Selects allow you to choose items from a menu of predefined options.",
          "jsDoc": "/**\n * @summary Selects allow you to choose items from a menu of predefined options.\n * @status experimental\n * @since 0.5.0\n *\n * @dependency pc-icon\n * @dependency pc-popup\n * @dependency pc-tag\n *\n * @slot — The listbox options. Only `<pc-option>` and `<pc-divider>` elements can be slotted here. You can use `<pc-divider>` to group items visually.\n * @slot label — The input’s label. Alternatively, you can use the `label` attribute.\n * @slot prefix — Used to prepend a presentational icon or similar element to the combobox.\n * @slot suffix — Used to append a presentational icon or similar element to the combobox.\n * @slot clear-icon — An icon to use in place of the default clear icon.\n * @slot expand-icon — The icon to show when the select is expanded and collapsed. Rotates on open and close.\n * @slot hint — Text that describes how to use the input. Alternatively, you can use the `hint` attribute.\n *\n * @event pc-change — Emitted when the select’s value changes.\n * @event pc-clear — Emitted when the select’s value is cleared.\n * @event pc-input — Emitted when the select receives input.\n * @event pc-focus — Emitted when the select gains focus.\n * @event pc-blur — Emitted when the select loses focus.\n * @event pc-show — Emitted when the select’s menu opens.\n * @event pc-after-show — Emitted after the select’s menu opens and all animations are complete.\n * @event pc-hide — Emitted when the select’s menu closes.\n * @event pc-after-hide — Emitted after the select’s menu closes and all animations are complete.\n * @event pc-invalid — Emitted when the select has been checked for validity and its constraints aren’t satisfied.\n *\n * @csspart form-control — The form control that wraps the label, input and hint text.\n * @csspart label — The label’s wrapper.\n * @csspart input — The select’s wrapper.\n * @csspart hint — The hint’s wrapper.\n * @csspart combobox — The container the wraps the prefix, suffix, combobox, clear icon and expand button.\n * @csspart prefix — The container that wraps the prefix slot.\n * @csspart suffix — The container that wraps the suffix slot.\n * @csspart display-input — The element that displays the selected option’s label, an `<input>` element.\n * @csspart listbox — The listbox container where options are slotted.\n * @csspart tags — The container that houses option tags when `multiselect` is used.\n * @csspart tag — The individual tags that represent each multiselect option.\n * @csspart tag__base — The tag’s base part.\n * @csspart tag__content — The tag’s content part.\n * @csspart tag__remove-button — The tag’s remove button.\n * @csspart tag__remove-button__base — The tag’s remove button base part.\n * @csspart clear-button — The clear button.\n * @csspart expand-icon — The container that wraps the expand icon.\n */",
          "status": "experimental",
          "since": "0.5.0",
          "dependencies": [
            "pc-icon",
            "pc-popup",
            "pc-tag"
          ],
          "tagName": "pc-select",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "PcSelect",
          "declaration": {
            "name": "PcSelect",
            "module": "components/select/select.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "pc-select",
          "declaration": {
            "name": "PcSelect",
            "module": "components/select/select.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/spinner/spinner.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "PcSpinner",
          "cssProperties": [
            {
              "description": "— The width of the track.",
              "name": "--track-width"
            },
            {
              "description": "— The colour of the track.",
              "name": "--track-color"
            },
            {
              "description": "— The colour of the spinner’s indicator.",
              "name": "--indicator-color"
            },
            {
              "description": "— The time it takes for the spinner to complete one animation cycle.",
              "name": "--speed"
            }
          ],
          "cssParts": [
            {
              "description": "— The component’s base wrapper.",
              "name": "base"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "\"\"",
              "description": "The switch’s label.",
              "attribute": "label"
            }
          ],
          "attributes": [
            {
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "\"\"",
              "description": "The switch’s label.",
              "fieldName": "label"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "summary": "Spinners are used to show the progress of an indeterminate operation.",
          "jsDoc": "/**\n * @summary Spinners are used to show the progress of an indeterminate operation.\n * @status experimental\n * @since 0.1.0\n *\n * @csspart base — The component’s base wrapper.\n *\n * @cssproperty --track-width — The width of the track.\n * @cssproperty --track-color — The colour of the track.\n * @cssproperty --indicator-color — The colour of the spinner’s indicator.\n * @cssproperty --speed — The time it takes for the spinner to complete one animation cycle.\n */",
          "status": "experimental",
          "since": "0.1.0",
          "tagName": "pc-spinner",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "PcSpinner",
          "declaration": {
            "name": "PcSpinner",
            "module": "components/spinner/spinner.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "pc-spinner",
          "declaration": {
            "name": "PcSpinner",
            "module": "components/spinner/spinner.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/switch/switch.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "PcSwitch",
          "cssProperties": [
            {
              "description": "— The width of the switch.",
              "name": "--width"
            },
            {
              "description": "— The height of the switch.",
              "name": "--height"
            },
            {
              "description": "— The size of the thumb.",
              "name": "--thumb-size"
            }
          ],
          "cssParts": [
            {
              "description": "— The component’s base wrapper.",
              "name": "base"
            },
            {
              "description": "— The control that houses the switch’s thumb.",
              "name": "control"
            },
            {
              "description": "— The switch’s thumb.",
              "name": "thumb"
            },
            {
              "description": "— The switch’s label.",
              "name": "label"
            },
            {
              "description": "— The hint’s wrapper.",
              "name": "hint"
            }
          ],
          "slots": [
            {
              "description": "The switch’s label.",
              "name": "—"
            },
            {
              "description": "— Text that describes how to use the switch. Alternatively, you can use the `hint` attribute.",
              "name": "hint"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "formControlController",
              "privacy": "private",
              "readonly": true,
              "default": "new FormControlController(this, { value: (control: PcSwitch) => control.checked ? control.value || \"on\" : undefined, defaultValue: (control: PcSwitch) => control.defaultChecked, setValue: (control: PcSwitch, checked: boolean) => (control.checked = checked), })"
            },
            {
              "kind": "field",
              "name": "hasSlotController",
              "privacy": "private",
              "readonly": true,
              "default": "new HasSlotController(this, \"hint\")"
            },
            {
              "kind": "field",
              "name": "hasFocus",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "default": "\"\"",
              "description": "The name of the switch, submitted as a name/value pair with form data.",
              "attribute": "name"
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string | undefined"
              },
              "description": "The current value of the switch, submitted as a name/value pair with form data.",
              "attribute": "value"
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "\"small\" | \"medium\" | \"large\""
              },
              "default": "\"medium\"",
              "description": "The switch’s size.",
              "attribute": "size",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disables the switch.",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "checked",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Enables the switch.",
              "attribute": "checked",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "defaultChecked",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "The default value of the switch. Primarily used for resetting the switch."
            },
            {
              "kind": "field",
              "name": "form",
              "type": {
                "text": "string"
              },
              "default": "\"\"",
              "description": "By default, form controls are associated with the nearest containing `<form>` element. This attribute allows you to place the form control outside of a form and associate it with the form that has this `id`. The form must be in the same document or shadow root for this to work.",
              "attribute": "form",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Makes the switch a required field.",
              "attribute": "required",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "hint",
              "type": {
                "text": "string"
              },
              "default": "\"\"",
              "description": "The switch’s hint. if you need to display HTML, use the `hint` slot instead.",
              "attribute": "hint"
            },
            {
              "kind": "field",
              "name": "validity",
              "description": "Gets the validity state object.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "validationMessage",
              "description": "Gets the validation message.",
              "readonly": true
            },
            {
              "kind": "method",
              "name": "handleClick",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleInput",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleFocus",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleBlur",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleInvalid",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleKeyDown",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "click",
              "description": "Simulates a click on the switch."
            },
            {
              "kind": "method",
              "name": "focus",
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "FocusOptions"
                  }
                }
              ],
              "description": "Focuses the switch."
            },
            {
              "kind": "method",
              "name": "blur",
              "description": "Unfocuses/blurs the switch."
            },
            {
              "kind": "method",
              "name": "checkValidity",
              "description": "Checks for validity but doesn’t show a validation message. Returns `true` when valid and `false` when invalid."
            },
            {
              "kind": "method",
              "name": "getForm",
              "return": {
                "type": {
                  "text": "HTMLFormElement | null"
                }
              },
              "description": "Gets the associated form if one exists."
            },
            {
              "kind": "method",
              "name": "reportValidity",
              "description": "Checks for validity and shows the browser’s validation message if the control is invalid."
            },
            {
              "kind": "method",
              "name": "setCustomValidity",
              "parameters": [
                {
                  "name": "message",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Sets a custom validation message. Pass an empty string to restore validity."
            }
          ],
          "events": [
            {
              "description": "— Emitted when the switch’s state changes.",
              "name": "pc-change"
            },
            {
              "description": "— Emitted when the switch gains focus.",
              "name": "pc-focus"
            },
            {
              "description": "— Emitted when the switch loses focus (i.e. is blurred).",
              "name": "pc-blur"
            },
            {
              "description": "— Emitted when the switch receives input.",
              "name": "pc-input"
            },
            {
              "description": "— Emitted when the form control has been checked for validity and its constraints aren’t satisfied.",
              "name": "pc-invalid"
            }
          ],
          "attributes": [
            {
              "name": "name",
              "type": {
                "text": "string"
              },
              "default": "\"\"",
              "description": "The name of the switch, submitted as a name/value pair with form data.",
              "fieldName": "name"
            },
            {
              "name": "value",
              "type": {
                "text": "string | undefined"
              },
              "description": "The current value of the switch, submitted as a name/value pair with form data.",
              "fieldName": "value"
            },
            {
              "name": "size",
              "type": {
                "text": "\"small\" | \"medium\" | \"large\""
              },
              "default": "\"medium\"",
              "description": "The switch’s size.",
              "fieldName": "size"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disables the switch.",
              "fieldName": "disabled"
            },
            {
              "name": "checked",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Enables the switch.",
              "fieldName": "checked"
            },
            {
              "name": "form",
              "type": {
                "text": "string"
              },
              "default": "\"\"",
              "description": "By default, form controls are associated with the nearest containing `<form>` element. This attribute allows you to place the form control outside of a form and associate it with the form that has this `id`. The form must be in the same document or shadow root for this to work.",
              "fieldName": "form"
            },
            {
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Makes the switch a required field.",
              "fieldName": "required"
            },
            {
              "name": "hint",
              "type": {
                "text": "string"
              },
              "default": "\"\"",
              "description": "The switch’s hint. if you need to display HTML, use the `hint` slot instead.",
              "fieldName": "hint"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "summary": "Switches allow the user to toggle an option on or off.",
          "jsDoc": "/**\n * @summary Switches allow the user to toggle an option on or off.\n * @status experimental\n * @since 0.1.0\n *\n * @slot — The switch’s label.\n * @slot hint — Text that describes how to use the switch. Alternatively, you can use the `hint` attribute.\n *\n * @event pc-change — Emitted when the switch’s state changes.\n * @event pc-focus — Emitted when the switch gains focus.\n * @event pc-blur — Emitted when the switch loses focus (i.e. is blurred).\n * @event pc-input — Emitted when the switch receives input.\n * @event pc-invalid — Emitted when the form control has been checked for validity and its constraints aren’t satisfied.\n *\n * @csspart base — The component’s base wrapper.\n * @csspart control — The control that houses the switch’s thumb.\n * @csspart thumb — The switch’s thumb.\n * @csspart label — The switch’s label.\n * @csspart hint — The hint’s wrapper.\n *\n * @cssproperty --width — The width of the switch.\n * @cssproperty --height — The height of the switch.\n * @cssproperty --thumb-size — The size of the thumb.\n */",
          "status": "experimental",
          "since": "0.1.0",
          "tagName": "pc-switch",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "PcSwitch",
          "declaration": {
            "name": "PcSwitch",
            "module": "components/switch/switch.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "pc-switch",
          "declaration": {
            "name": "PcSwitch",
            "module": "components/switch/switch.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/tab/tab.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "PcTab",
          "members": [
            {
              "kind": "field",
              "name": "dependencies",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{ \"pc-icon-button\": PcIconButton }"
            },
            {
              "kind": "field",
              "name": "attributeID",
              "type": {
                "text": "number"
              },
              "privacy": "private",
              "readonly": true,
              "default": "++id"
            },
            {
              "kind": "field",
              "name": "componentID",
              "privacy": "private",
              "readonly": true,
              "default": "`pc-tab-${this.attributeID}`"
            },
            {
              "kind": "field",
              "name": "tab",
              "type": {
                "text": "HTMLElement"
              }
            },
            {
              "kind": "field",
              "name": "active",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "active",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "closable",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "closable",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "panel",
              "type": {
                "text": "string"
              },
              "default": "\"\"",
              "attribute": "panel",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "tabIndex",
              "type": {
                "text": "number"
              },
              "default": "0",
              "attribute": "tabIndex",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "handleCloseClick",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleActiveChange"
            },
            {
              "kind": "method",
              "name": "handleDisabledChange"
            }
          ],
          "attributes": [
            {
              "name": "active",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "active"
            },
            {
              "name": "closable",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "closable"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "disabled"
            },
            {
              "name": "panel",
              "type": {
                "text": "string"
              },
              "default": "\"\"",
              "fieldName": "panel"
            },
            {
              "name": "tabIndex",
              "type": {
                "text": "number"
              },
              "default": "0",
              "fieldName": "tabIndex"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "pc-tab",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "PcTab",
          "declaration": {
            "name": "PcTab",
            "module": "components/tab/tab.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "pc-tab",
          "declaration": {
            "name": "PcTab",
            "module": "components/tab/tab.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/tab-group/tab-group.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "PcTabGroup",
          "members": [
            {
              "kind": "field",
              "name": "dependencies",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{ \"pc-icon-button\": PcIconButton, \"pc-resize-observer\": PcResizeObserver, }"
            },
            {
              "kind": "field",
              "name": "activeTab",
              "type": {
                "text": "PcTab | undefined"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "mutationObserver",
              "type": {
                "text": "MutationObserver"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "resizeObserver",
              "type": {
                "text": "ResizeObserver"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "tabs",
              "type": {
                "text": "PcTab[]"
              },
              "privacy": "private",
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "focusableTabs",
              "type": {
                "text": "PcTab[]"
              },
              "privacy": "private",
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "panels",
              "type": {
                "text": "PcTabPanel[]"
              },
              "privacy": "private",
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "tabGroup",
              "type": {
                "text": "HTMLElement"
              }
            },
            {
              "kind": "field",
              "name": "body",
              "type": {
                "text": "HTMLSlotElement"
              }
            },
            {
              "kind": "field",
              "name": "navigation",
              "type": {
                "text": "HTMLElement"
              }
            },
            {
              "kind": "field",
              "name": "indicator",
              "type": {
                "text": "HTMLElement"
              }
            },
            {
              "kind": "field",
              "name": "hasScrollControls",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "shouldHideScrollStartButton",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "shouldHideScrollEndButton",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "activation",
              "type": {
                "text": "\"auto\" | \"manual\""
              },
              "default": "\"auto\"",
              "attribute": "activation"
            },
            {
              "kind": "field",
              "name": "fixedScrollControls",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "fixed-scroll-controls"
            },
            {
              "kind": "field",
              "name": "noScrollControls",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "no-scroll-controls"
            },
            {
              "kind": "field",
              "name": "placement",
              "type": {
                "text": "\"top\" | \"bottom\" | \"start\" | \"end\""
              },
              "default": "\"top\"",
              "attribute": "placement"
            },
            {
              "kind": "method",
              "name": "getAllTabs",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "getAllPanels",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "getActiveTab",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleClick",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleKeyDown",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleScrollToStart",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleScrollToEnd",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "setActiveTab",
              "privacy": "private",
              "parameters": [
                {
                  "name": "tab",
                  "type": {
                    "text": "PcTab"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "{ emitEvents?: boolean; scrollBehavior?: \"auto\" | \"smooth\" }"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "setAriaLabels",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "repositionIndicator",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "syncTabsAndPanels",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "findNextFocusableTab",
              "privacy": "private",
              "parameters": [
                {
                  "name": "currentIndex",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "direction",
                  "type": {
                    "text": "\"forward\" | \"backward\""
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "scrollOffset",
              "type": {
                "text": "number"
              },
              "privacy": "private",
              "default": "1"
            },
            {
              "kind": "method",
              "name": "updateScrollButtons",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "isScrolledToEnd",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "scrollFromStart",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "updateScrollControls"
            },
            {
              "kind": "method",
              "name": "syncIndicator"
            },
            {
              "kind": "method",
              "name": "show",
              "parameters": [
                {
                  "name": "panel",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            }
          ],
          "attributes": [
            {
              "name": "activation",
              "type": {
                "text": "\"auto\" | \"manual\""
              },
              "default": "\"auto\"",
              "fieldName": "activation"
            },
            {
              "name": "fixed-scroll-controls",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "fixedScrollControls"
            },
            {
              "name": "no-scroll-controls",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "noScrollControls"
            },
            {
              "name": "placement",
              "type": {
                "text": "\"top\" | \"bottom\" | \"start\" | \"end\""
              },
              "default": "\"top\"",
              "fieldName": "placement"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "pc-tab-group",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "PcTabGroup",
          "declaration": {
            "name": "PcTabGroup",
            "module": "components/tab-group/tab-group.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "pc-tab-group",
          "declaration": {
            "name": "PcTabGroup",
            "module": "components/tab-group/tab-group.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/tab-panel/tab-panel.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "PcTabPanel",
          "members": [
            {
              "kind": "field",
              "name": "attributeID",
              "type": {
                "text": "number"
              },
              "privacy": "private",
              "readonly": true,
              "default": "++id"
            },
            {
              "kind": "field",
              "name": "componentID",
              "privacy": "private",
              "readonly": true,
              "default": "`pc-tab-panel-${this.attributeID}`"
            },
            {
              "kind": "field",
              "name": "active",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "active",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "default": "\"\"",
              "attribute": "name",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "handleActiveChange"
            }
          ],
          "attributes": [
            {
              "name": "active",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "active"
            },
            {
              "name": "name",
              "type": {
                "text": "string"
              },
              "default": "\"\"",
              "fieldName": "name"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "pc-tab-panel",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "PcTabPanel",
          "declaration": {
            "name": "PcTabPanel",
            "module": "components/tab-panel/tab-panel.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "pc-tab-panel",
          "declaration": {
            "name": "PcTabPanel",
            "module": "components/tab-panel/tab-panel.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/tooltip/tooltip.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "PcTooltip",
          "members": [
            {
              "kind": "field",
              "name": "dependencies",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{ \"pc-popup\": PcPopup }"
            },
            {
              "kind": "field",
              "name": "hoverTimeout",
              "type": {
                "text": "number"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "closeWatcher",
              "type": {
                "text": "CloseWatcher | null"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "defaultSlot",
              "type": {
                "text": "HTMLSlotElement"
              }
            },
            {
              "kind": "field",
              "name": "body",
              "type": {
                "text": "HTMLElement"
              }
            },
            {
              "kind": "field",
              "name": "popup",
              "type": {
                "text": "PcPopup"
              }
            },
            {
              "kind": "field",
              "name": "content",
              "type": {
                "text": "string"
              },
              "default": "\"\"",
              "attribute": "content"
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "distance",
              "type": {
                "text": "number"
              },
              "default": "8",
              "attribute": "distance"
            },
            {
              "kind": "field",
              "name": "hoist",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "hoist"
            },
            {
              "kind": "field",
              "name": "open",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "open",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "placement",
              "type": {
                "text": "| \"top\"\n        | \"top-start\"\n        | \"top-end\"\n        | \"right\"\n        | \"right-start\"\n        | \"right-end\"\n        | \"bottom\"\n        | \"bottom-start\"\n        | \"bottom-end\"\n        | \"left\"\n        | \"left-start\"\n        | \"left-end\""
              },
              "default": "\"top\"",
              "attribute": "placement"
            },
            {
              "kind": "field",
              "name": "skidding",
              "type": {
                "text": "number"
              },
              "default": "0",
              "attribute": "skidding"
            },
            {
              "kind": "field",
              "name": "trigger",
              "type": {
                "text": "string"
              },
              "default": "\"hover focus\"",
              "attribute": "trigger"
            },
            {
              "kind": "field",
              "name": "handleClick",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "handleFocus",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "handleBlur",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "handleDocumentKeyDown",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "handleMouseOver",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "handleMouseOut",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "hasTrigger",
              "privacy": "private",
              "parameters": [
                {
                  "name": "triggerType",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleOpenChange"
            },
            {
              "kind": "method",
              "name": "handleOptionsChange"
            },
            {
              "kind": "method",
              "name": "handleDisabledChange"
            },
            {
              "kind": "method",
              "name": "show"
            },
            {
              "kind": "method",
              "name": "hide"
            }
          ],
          "attributes": [
            {
              "name": "content",
              "type": {
                "text": "string"
              },
              "default": "\"\"",
              "fieldName": "content"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "disabled"
            },
            {
              "name": "distance",
              "type": {
                "text": "number"
              },
              "default": "8",
              "fieldName": "distance"
            },
            {
              "name": "hoist",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "hoist"
            },
            {
              "name": "open",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "open"
            },
            {
              "name": "placement",
              "type": {
                "text": "| \"top\"\n        | \"top-start\"\n        | \"top-end\"\n        | \"right\"\n        | \"right-start\"\n        | \"right-end\"\n        | \"bottom\"\n        | \"bottom-start\"\n        | \"bottom-end\"\n        | \"left\"\n        | \"left-start\"\n        | \"left-end\""
              },
              "default": "\"top\"",
              "fieldName": "placement"
            },
            {
              "name": "skidding",
              "type": {
                "text": "number"
              },
              "default": "0",
              "fieldName": "skidding"
            },
            {
              "name": "trigger",
              "type": {
                "text": "string"
              },
              "default": "\"hover focus\"",
              "fieldName": "trigger"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "pc-tooltip",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "PcTooltip",
          "declaration": {
            "name": "PcTooltip",
            "module": "components/tooltip/tooltip.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "pc-tooltip",
          "declaration": {
            "name": "PcTooltip",
            "module": "components/tooltip/tooltip.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/tag/tag.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "PcTag",
          "cssParts": [
            {
              "description": "— The tag’s base wrapper.",
              "name": "base"
            },
            {
              "description": "— The tag’s content.",
              "name": "content"
            },
            {
              "description": "— The tag’s remove button, a `<pc-icon-button>`.",
              "name": "remove-button"
            },
            {
              "description": "— The remove button’s base part.",
              "name": "remove-button__base"
            }
          ],
          "slots": [
            {
              "description": "The tag’s content.",
              "name": "—"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "appearance",
              "type": {
                "text": "| \"primary\"\n        | \"success\"\n        | \"neutral\"\n        | \"warning\"\n        | \"danger\""
              },
              "default": "\"neutral\"",
              "description": "The tag’s appearance.",
              "attribute": "appearance",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "\"small\" | \"medium\" | \"large\""
              },
              "default": "\"medium\"",
              "description": "The tag’s size.",
              "attribute": "size",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "outlined",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Draws an outlined tag.",
              "attribute": "outlined",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "pill",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Draws a pill‐style tag.",
              "attribute": "pill",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "removable",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Adds a remove button to the tag.",
              "attribute": "removable"
            },
            {
              "kind": "method",
              "name": "handleRemoveClick",
              "privacy": "private"
            }
          ],
          "events": [
            {
              "description": "— Emitted when the remove button is pressed.",
              "name": "pc-remove"
            }
          ],
          "attributes": [
            {
              "name": "appearance",
              "type": {
                "text": "| \"primary\"\n        | \"success\"\n        | \"neutral\"\n        | \"warning\"\n        | \"danger\""
              },
              "default": "\"neutral\"",
              "description": "The tag’s appearance.",
              "fieldName": "appearance"
            },
            {
              "name": "size",
              "type": {
                "text": "\"small\" | \"medium\" | \"large\""
              },
              "default": "\"medium\"",
              "description": "The tag’s size.",
              "fieldName": "size"
            },
            {
              "name": "outlined",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Draws an outlined tag.",
              "fieldName": "outlined"
            },
            {
              "name": "pill",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Draws a pill‐style tag.",
              "fieldName": "pill"
            },
            {
              "name": "removable",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Adds a remove button to the tag.",
              "fieldName": "removable"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "summary": "Tags are used as labels to organise things or to indicate a selection.",
          "jsDoc": "/**\n * @summary Tags are used as labels to organise things or to indicate a selection.\n * @status experimental\n * @since 0.5.0\n *\n * @dependency pc-icon-button\n *\n * @slot — The tag’s content.\n *\n * @event pc-remove — Emitted when the remove button is pressed.\n *\n * @csspart base — The tag’s base wrapper.\n * @csspart content — The tag’s content.\n * @csspart remove-button — The tag’s remove button, a `<pc-icon-button>`.\n * @csspart remove-button__base — The remove button’s base part.\n */",
          "status": "experimental",
          "since": "0.5.0",
          "dependencies": [
            "pc-icon-button"
          ],
          "tagName": "pc-tag",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "PcTag",
          "declaration": {
            "name": "PcTag",
            "module": "components/tag/tag.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "pc-tag",
          "declaration": {
            "name": "PcTag",
            "module": "components/tag/tag.js"
          }
        }
      ]
    }
  ],
  "package": {
    "name": "placer-toolkit",
    "description": "The go‐to web component library for the web! 🛠️",
    "version": "0.5.0",
    "author": "randomguy-2650",
    "license": "MIT"
  }
}
