{
    "schemaVersion": "1.0.0",
    "readme": "",
    "modules": [
        {
            "kind": "javascript-module",
            "path": "src/placer-autoloader.ts",
            "declarations": [
                {
                    "kind": "function",
                    "name": "discover",
                    "parameters": [
                        {
                            "name": "root",
                            "type": {
                                "text": "Element | ShadowRoot"
                            }
                        }
                    ]
                }
            ],
            "exports": [
                {
                    "kind": "js",
                    "name": "discover",
                    "declaration": {
                        "name": "discover",
                        "module": "src/placer-autoloader.ts"
                    }
                }
            ]
        },
        {
            "kind": "javascript-module",
            "path": "src/placer.ts",
            "declarations": [],
            "exports": [
                {
                    "kind": "js",
                    "name": "PcAvatar",
                    "declaration": {
                        "name": "default",
                        "module": "\"./components/avatar/avatar.js\""
                    }
                },
                {
                    "kind": "js",
                    "name": "PcBadge",
                    "declaration": {
                        "name": "default",
                        "module": "\"./components/badge/badge.js\""
                    }
                },
                {
                    "kind": "js",
                    "name": "PcButton",
                    "declaration": {
                        "name": "default",
                        "module": "\"./components/button/button.js\""
                    }
                },
                {
                    "kind": "js",
                    "name": "PcCard",
                    "declaration": {
                        "name": "default",
                        "module": "\"./components/card/card.js\""
                    }
                },
                {
                    "kind": "js",
                    "name": "PcCheckbox",
                    "declaration": {
                        "name": "default",
                        "module": "\"./components/checkbox/checkbox.js\""
                    }
                },
                {
                    "kind": "js",
                    "name": "PcIcon",
                    "declaration": {
                        "name": "default",
                        "module": "\"./components/icon/icon.js\""
                    }
                },
                {
                    "kind": "js",
                    "name": "PcIconButton",
                    "declaration": {
                        "name": "default",
                        "module": "\"./components/icon-button/icon-button.js\""
                    }
                },
                {
                    "kind": "js",
                    "name": "PcQrCode",
                    "declaration": {
                        "name": "default",
                        "module": "\"./components/qr-code/qr-code.js\""
                    }
                },
                {
                    "kind": "js",
                    "name": "PcRating",
                    "declaration": {
                        "name": "default",
                        "module": "\"./components/rating/rating.js\""
                    }
                },
                {
                    "kind": "js",
                    "name": "PcResizeObserver",
                    "declaration": {
                        "name": "default",
                        "module": "\"./components/resize-observer/resize-observer.js\""
                    }
                },
                {
                    "kind": "js",
                    "name": "PcSpinner",
                    "declaration": {
                        "name": "default",
                        "module": "\"./components/spinner/spinner.js\""
                    }
                },
                {
                    "kind": "js",
                    "name": "PcSwitch",
                    "declaration": {
                        "name": "default",
                        "module": "\"./components/switch/switch.js\""
                    }
                },
                {
                    "kind": "js",
                    "name": "PcTab",
                    "declaration": {
                        "name": "default",
                        "module": "\"./components/tab/tab.js\""
                    }
                },
                {
                    "kind": "js",
                    "name": "PcTabGroup",
                    "declaration": {
                        "name": "default",
                        "module": "\"./components/tab-group/tab-group.js\""
                    }
                },
                {
                    "kind": "js",
                    "name": "PcTabPanel",
                    "declaration": {
                        "name": "default",
                        "module": "\"./components/tab-panel/tab-panel.js\""
                    }
                },
                {
                    "kind": "js",
                    "name": "PcVisuallyHidden",
                    "declaration": {
                        "name": "default",
                        "module": "\"./components/visually-hidden/visually-hidden.js\""
                    }
                },
                {
                    "kind": "js",
                    "name": "*",
                    "declaration": {
                        "name": "*",
                        "package": "\"./utilities/base-path.js\""
                    }
                },
                {
                    "kind": "js",
                    "name": "*",
                    "declaration": {
                        "name": "*",
                        "package": "\"./utilities/icon-library.js\""
                    }
                }
            ]
        },
        {
            "kind": "javascript-module",
            "path": "src/internal/active-elements.ts",
            "declarations": [
                {
                    "kind": "function",
                    "name": "activeElements",
                    "return": {
                        "type": {
                            "text": "Generator<Element>"
                        }
                    },
                    "parameters": [
                        {
                            "name": "activeElement",
                            "default": "document.activeElement",
                            "type": {
                                "text": "Element | null"
                            }
                        }
                    ]
                },
                {
                    "kind": "function",
                    "name": "getDeepestActiveElement"
                }
            ],
            "exports": [
                {
                    "kind": "js",
                    "name": "activeElements",
                    "declaration": {
                        "name": "activeElements",
                        "module": "src/internal/active-elements.ts"
                    }
                },
                {
                    "kind": "js",
                    "name": "getDeepestActiveElement",
                    "declaration": {
                        "name": "getDeepestActiveElement",
                        "module": "src/internal/active-elements.ts"
                    }
                }
            ]
        },
        {
            "kind": "javascript-module",
            "path": "src/internal/animate.ts",
            "declarations": [
                {
                    "kind": "function",
                    "name": "animateTo",
                    "parameters": [
                        {
                            "name": "el",
                            "type": {
                                "text": "HTMLElement"
                            }
                        },
                        {
                            "name": "keyframes",
                            "type": {
                                "text": "Keyframe[]"
                            }
                        },
                        {
                            "name": "options",
                            "optional": true,
                            "type": {
                                "text": "KeyframeAnimationOptions"
                            }
                        }
                    ]
                },
                {
                    "kind": "function",
                    "name": "parseDuration",
                    "parameters": [
                        {
                            "name": "delay",
                            "type": {
                                "text": "number | string"
                            }
                        }
                    ]
                },
                {
                    "kind": "function",
                    "name": "prefersReducedMotion"
                },
                {
                    "kind": "function",
                    "name": "stopAnimations",
                    "parameters": [
                        {
                            "name": "el",
                            "type": {
                                "text": "HTMLElement"
                            }
                        }
                    ]
                },
                {
                    "kind": "function",
                    "name": "shimKeyframesHeightAuto",
                    "parameters": [
                        {
                            "name": "keyframes",
                            "type": {
                                "text": "Keyframe[]"
                            }
                        },
                        {
                            "name": "calculatedHeight",
                            "type": {
                                "text": "number"
                            }
                        }
                    ]
                }
            ],
            "exports": [
                {
                    "kind": "js",
                    "name": "animateTo",
                    "declaration": {
                        "name": "animateTo",
                        "module": "src/internal/animate.ts"
                    }
                },
                {
                    "kind": "js",
                    "name": "parseDuration",
                    "declaration": {
                        "name": "parseDuration",
                        "module": "src/internal/animate.ts"
                    }
                },
                {
                    "kind": "js",
                    "name": "prefersReducedMotion",
                    "declaration": {
                        "name": "prefersReducedMotion",
                        "module": "src/internal/animate.ts"
                    }
                },
                {
                    "kind": "js",
                    "name": "stopAnimations",
                    "declaration": {
                        "name": "stopAnimations",
                        "module": "src/internal/animate.ts"
                    }
                },
                {
                    "kind": "js",
                    "name": "shimKeyframesHeightAuto",
                    "declaration": {
                        "name": "shimKeyframesHeightAuto",
                        "module": "src/internal/animate.ts"
                    }
                }
            ]
        },
        {
            "kind": "javascript-module",
            "path": "src/internal/close-active-element.ts",
            "declarations": [
                {
                    "kind": "function",
                    "name": "blurActiveElement",
                    "parameters": [
                        {
                            "name": "element",
                            "type": {
                                "text": "HTMLElement"
                            }
                        }
                    ]
                }
            ],
            "exports": [
                {
                    "kind": "js",
                    "name": "blurActiveElement",
                    "declaration": {
                        "name": "blurActiveElement",
                        "module": "src/internal/close-active-element.ts"
                    }
                }
            ]
        },
        {
            "kind": "javascript-module",
            "path": "src/internal/debounce.ts",
            "declarations": [
                {
                    "kind": "function",
                    "name": "debounce",
                    "parameters": [
                        {
                            "name": "delay",
                            "type": {
                                "text": "number"
                            }
                        }
                    ]
                }
            ],
            "exports": [
                {
                    "kind": "js",
                    "name": "debounce",
                    "declaration": {
                        "name": "debounce",
                        "module": "src/internal/debounce.ts"
                    }
                }
            ]
        },
        {
            "kind": "javascript-module",
            "path": "src/internal/default-value.ts",
            "declarations": [
                {
                    "kind": "function",
                    "name": "defaultValue",
                    "parameters": [
                        {
                            "name": "propertyName",
                            "default": "\"value\""
                        }
                    ]
                }
            ],
            "exports": [
                {
                    "kind": "js",
                    "name": "defaultValue",
                    "declaration": {
                        "name": "defaultValue",
                        "module": "src/internal/default-value.ts"
                    }
                }
            ]
        },
        {
            "kind": "javascript-module",
            "path": "src/internal/drag.ts",
            "declarations": [
                {
                    "kind": "function",
                    "name": "drag",
                    "parameters": [
                        {
                            "name": "container",
                            "type": {
                                "text": "HTMLElement"
                            }
                        },
                        {
                            "name": "options",
                            "optional": true,
                            "type": {
                                "text": "Partial<DragOptions>"
                            }
                        }
                    ]
                }
            ],
            "exports": [
                {
                    "kind": "js",
                    "name": "drag",
                    "declaration": {
                        "name": "drag",
                        "module": "src/internal/drag.ts"
                    }
                }
            ]
        },
        {
            "kind": "javascript-module",
            "path": "src/internal/emit.ts",
            "declarations": [
                {
                    "kind": "function",
                    "name": "emit",
                    "parameters": [
                        {
                            "name": "target",
                            "type": {
                                "text": "EventTarget"
                            }
                        },
                        {
                            "name": "eventName",
                            "type": {
                                "text": "string"
                            }
                        },
                        {
                            "name": "eventDetail",
                            "optional": true,
                            "type": {
                                "text": "CustomEventInit"
                            }
                        }
                    ]
                },
                {
                    "kind": "function",
                    "name": "bindEmit",
                    "parameters": [
                        {
                            "name": "context",
                            "type": {
                                "text": "EventTarget"
                            }
                        }
                    ]
                }
            ],
            "exports": [
                {
                    "kind": "js",
                    "name": "emit",
                    "declaration": {
                        "name": "emit",
                        "module": "src/internal/emit.ts"
                    }
                },
                {
                    "kind": "js",
                    "name": "bindEmit",
                    "declaration": {
                        "name": "bindEmit",
                        "module": "src/internal/emit.ts"
                    }
                }
            ]
        },
        {
            "kind": "javascript-module",
            "path": "src/internal/event.ts",
            "declarations": [
                {
                    "kind": "function",
                    "name": "waitForEvent",
                    "parameters": [
                        {
                            "name": "element",
                            "type": {
                                "text": "HTMLElement"
                            }
                        },
                        {
                            "name": "eventName",
                            "type": {
                                "text": "string"
                            }
                        }
                    ]
                }
            ],
            "exports": [
                {
                    "kind": "js",
                    "name": "waitForEvent",
                    "declaration": {
                        "name": "waitForEvent",
                        "module": "src/internal/event.ts"
                    }
                }
            ]
        },
        {
            "kind": "javascript-module",
            "path": "src/internal/form.ts",
            "declarations": [
                {
                    "kind": "variable",
                    "name": "formCollections",
                    "type": {
                        "text": "WeakMap<\r\n    HTMLFormElement,\r\n    Set<HTMLInputElement>\r\n>"
                    },
                    "default": "new WeakMap()"
                },
                {
                    "kind": "class",
                    "description": "",
                    "name": "FormControlController",
                    "members": [
                        {
                            "kind": "field",
                            "name": "host",
                            "type": {
                                "text": "HTMLInputElement & ReactiveControllerHost"
                            }
                        },
                        {
                            "kind": "field",
                            "name": "form",
                            "type": {
                                "text": "HTMLFormElement | null | undefined"
                            }
                        },
                        {
                            "kind": "field",
                            "name": "options",
                            "type": {
                                "text": "FormControlControllerOptions"
                            },
                            "default": "{ form: (input) => input.closest(\"form\"), name: (input) => input.name, value: (input) => input.value, defaultValue: (input) => input.defaultValue, disabled: (input) => input.disabled, reportValidity: (input) => typeof input.reportValidity === \"function\" ? input.reportValidity() : true, checkValidity: (input) => typeof input.checkValidity === \"function\" ? input.checkValidity() : true, setValue: (input, value: unknown) => (input.value = value as string), assumeInteractionOn: [\"input\"], ...options, }"
                        },
                        {
                            "kind": "method",
                            "name": "hostConnected"
                        },
                        {
                            "kind": "method",
                            "name": "hostDisconnected"
                        },
                        {
                            "kind": "method",
                            "name": "hostUpdated"
                        },
                        {
                            "kind": "method",
                            "name": "attachForm",
                            "privacy": "private",
                            "parameters": [
                                {
                                    "name": "form",
                                    "optional": true,
                                    "type": {
                                        "text": "HTMLFormElement"
                                    }
                                }
                            ]
                        },
                        {
                            "kind": "method",
                            "name": "detachForm",
                            "privacy": "private"
                        },
                        {
                            "kind": "field",
                            "name": "handleFormData",
                            "privacy": "private"
                        },
                        {
                            "kind": "field",
                            "name": "handleFormSubmit",
                            "privacy": "private"
                        },
                        {
                            "kind": "field",
                            "name": "handleFormReset",
                            "privacy": "private"
                        },
                        {
                            "kind": "field",
                            "name": "handleInteraction",
                            "privacy": "private"
                        },
                        {
                            "kind": "field",
                            "name": "checkFormValidity",
                            "privacy": "private"
                        },
                        {
                            "kind": "field",
                            "name": "reportFormValidity",
                            "privacy": "private"
                        },
                        {
                            "kind": "method",
                            "name": "setUserInteracted",
                            "privacy": "private",
                            "parameters": [
                                {
                                    "name": "el",
                                    "type": {
                                        "text": "HTMLInputElement"
                                    }
                                },
                                {
                                    "name": "hasInteracted",
                                    "type": {
                                        "text": "boolean"
                                    }
                                }
                            ]
                        },
                        {
                            "kind": "method",
                            "name": "doAction",
                            "privacy": "private",
                            "parameters": [
                                {
                                    "name": "type",
                                    "type": {
                                        "text": "\"submit\" | \"reset\""
                                    }
                                },
                                {
                                    "name": "submitter",
                                    "optional": true,
                                    "type": {
                                        "text": "HTMLInputElement"
                                    }
                                }
                            ]
                        },
                        {
                            "kind": "method",
                            "name": "getForm"
                        },
                        {
                            "kind": "method",
                            "name": "reset",
                            "parameters": [
                                {
                                    "name": "submitter",
                                    "optional": true,
                                    "type": {
                                        "text": "HTMLInputElement"
                                    }
                                }
                            ]
                        },
                        {
                            "kind": "method",
                            "name": "submit",
                            "parameters": [
                                {
                                    "name": "submitter",
                                    "optional": true,
                                    "type": {
                                        "text": "HTMLInputElement"
                                    }
                                }
                            ]
                        },
                        {
                            "kind": "method",
                            "name": "setValidity",
                            "parameters": [
                                {
                                    "name": "isValid",
                                    "type": {
                                        "text": "boolean"
                                    }
                                }
                            ]
                        },
                        {
                            "kind": "method",
                            "name": "updateValidity"
                        },
                        {
                            "kind": "method",
                            "name": "emitInvalidEvent",
                            "parameters": [
                                {
                                    "name": "originalInvalidEvent",
                                    "optional": true,
                                    "type": {
                                        "text": "Event"
                                    }
                                }
                            ]
                        }
                    ]
                },
                {
                    "kind": "variable",
                    "name": "validValidityState",
                    "type": {
                        "text": "ValidityState"
                    }
                },
                {
                    "kind": "variable",
                    "name": "valueMissingValidityState",
                    "type": {
                        "text": "ValidityState"
                    }
                },
                {
                    "kind": "variable",
                    "name": "customErrorValidityState",
                    "type": {
                        "text": "ValidityState"
                    }
                }
            ],
            "exports": [
                {
                    "kind": "js",
                    "name": "formCollections",
                    "declaration": {
                        "name": "formCollections",
                        "module": "src/internal/form.ts"
                    }
                },
                {
                    "kind": "js",
                    "name": "FormControlController",
                    "declaration": {
                        "name": "FormControlController",
                        "module": "src/internal/form.ts"
                    }
                },
                {
                    "kind": "js",
                    "name": "validValidityState",
                    "declaration": {
                        "name": "validValidityState",
                        "module": "src/internal/form.ts"
                    }
                },
                {
                    "kind": "js",
                    "name": "valueMissingValidityState",
                    "declaration": {
                        "name": "valueMissingValidityState",
                        "module": "src/internal/form.ts"
                    }
                },
                {
                    "kind": "js",
                    "name": "customErrorValidityState",
                    "declaration": {
                        "name": "customErrorValidityState",
                        "module": "src/internal/form.ts"
                    }
                }
            ]
        },
        {
            "kind": "javascript-module",
            "path": "src/internal/math.ts",
            "declarations": [
                {
                    "kind": "function",
                    "name": "clamp",
                    "parameters": [
                        {
                            "name": "value",
                            "type": {
                                "text": "number"
                            }
                        },
                        {
                            "name": "min",
                            "type": {
                                "text": "number"
                            }
                        },
                        {
                            "name": "max",
                            "type": {
                                "text": "number"
                            }
                        }
                    ]
                }
            ],
            "exports": [
                {
                    "kind": "js",
                    "name": "clamp",
                    "declaration": {
                        "name": "clamp",
                        "module": "src/internal/math.ts"
                    }
                }
            ]
        },
        {
            "kind": "javascript-module",
            "path": "src/internal/modal.ts",
            "declarations": [
                {
                    "kind": "class",
                    "description": "",
                    "name": "Modal",
                    "members": [
                        {
                            "kind": "field",
                            "name": "element",
                            "type": {
                                "text": "HTMLElement"
                            },
                            "default": "element"
                        },
                        {
                            "kind": "field",
                            "name": "isExternalActivated",
                            "type": {
                                "text": "boolean"
                            }
                        },
                        {
                            "kind": "field",
                            "name": "tabDirection",
                            "type": {
                                "text": "\"forward\" | \"backward\""
                            },
                            "default": "\"forward\""
                        },
                        {
                            "kind": "field",
                            "name": "currentFocus",
                            "type": {
                                "text": "HTMLElement | null"
                            }
                        },
                        {
                            "kind": "field",
                            "name": "previousFocus",
                            "type": {
                                "text": "HTMLElement | null"
                            }
                        },
                        {
                            "kind": "field",
                            "name": "elementsWithTabbableControls",
                            "type": {
                                "text": "string[]"
                            },
                            "default": "[\"iframe\"]"
                        },
                        {
                            "kind": "method",
                            "name": "activate"
                        },
                        {
                            "kind": "method",
                            "name": "deactivate"
                        },
                        {
                            "kind": "method",
                            "name": "isActive"
                        },
                        {
                            "kind": "method",
                            "name": "activateExternal"
                        },
                        {
                            "kind": "method",
                            "name": "deactivateExternal"
                        },
                        {
                            "kind": "method",
                            "name": "checkFocus",
                            "privacy": "private"
                        },
                        {
                            "kind": "field",
                            "name": "handleFocusIn",
                            "privacy": "private"
                        },
                        {
                            "kind": "method",
                            "name": "possiblyHasTabbableChildren",
                            "privacy": "private",
                            "parameters": [
                                {
                                    "name": "element",
                                    "type": {
                                        "text": "HTMLElement"
                                    }
                                }
                            ]
                        },
                        {
                            "kind": "field",
                            "name": "handleKeyDown",
                            "privacy": "private"
                        },
                        {
                            "kind": "field",
                            "name": "handleKeyUp",
                            "privacy": "private"
                        }
                    ]
                }
            ],
            "exports": [
                {
                    "kind": "js",
                    "name": "default",
                    "declaration": {
                        "name": "Modal",
                        "module": "src/internal/modal.ts"
                    }
                }
            ]
        },
        {
            "kind": "javascript-module",
            "path": "src/internal/offset.ts",
            "declarations": [
                {
                    "kind": "function",
                    "name": "getOffset",
                    "parameters": [
                        {
                            "name": "element",
                            "type": {
                                "text": "HTMLElement"
                            }
                        },
                        {
                            "name": "parent",
                            "type": {
                                "text": "HTMLElement"
                            }
                        }
                    ]
                }
            ],
            "exports": [
                {
                    "kind": "js",
                    "name": "getOffset",
                    "declaration": {
                        "name": "getOffset",
                        "module": "src/internal/offset.ts"
                    }
                }
            ]
        },
        {
            "kind": "javascript-module",
            "path": "src/internal/scroll.ts",
            "declarations": [
                {
                    "kind": "function",
                    "name": "lockBodyScrolling",
                    "parameters": [
                        {
                            "name": "lockingElement",
                            "type": {
                                "text": "HTMLElement"
                            }
                        }
                    ]
                },
                {
                    "kind": "function",
                    "name": "unlockBodyScrolling",
                    "parameters": [
                        {
                            "name": "lockingElement",
                            "type": {
                                "text": "HTMLElement"
                            }
                        }
                    ]
                },
                {
                    "kind": "function",
                    "name": "scrollIntoView",
                    "parameters": [
                        {
                            "name": "element",
                            "type": {
                                "text": "HTMLElement"
                            }
                        },
                        {
                            "name": "container",
                            "type": {
                                "text": "HTMLElement"
                            }
                        },
                        {
                            "name": "direction",
                            "default": "\"vertical\"",
                            "type": {
                                "text": "\"horizontal\" | \"vertical\" | \"both\""
                            }
                        },
                        {
                            "name": "behavior",
                            "default": "\"smooth\"",
                            "type": {
                                "text": "\"smooth\" | \"auto\""
                            }
                        }
                    ]
                }
            ],
            "exports": [
                {
                    "kind": "js",
                    "name": "lockBodyScrolling",
                    "declaration": {
                        "name": "lockBodyScrolling",
                        "module": "src/internal/scroll.ts"
                    }
                },
                {
                    "kind": "js",
                    "name": "unlockBodyScrolling",
                    "declaration": {
                        "name": "unlockBodyScrolling",
                        "module": "src/internal/scroll.ts"
                    }
                },
                {
                    "kind": "js",
                    "name": "scrollIntoView",
                    "declaration": {
                        "name": "scrollIntoView",
                        "module": "src/internal/scroll.ts"
                    }
                }
            ]
        },
        {
            "kind": "javascript-module",
            "path": "src/internal/scrollend-polyfill.ts",
            "declarations": [],
            "exports": []
        },
        {
            "kind": "javascript-module",
            "path": "src/internal/slot.ts",
            "declarations": [
                {
                    "kind": "class",
                    "description": "",
                    "name": "HasSlotController",
                    "members": [
                        {
                            "kind": "field",
                            "name": "host",
                            "type": {
                                "text": "ReactiveControllerHost & Element"
                            }
                        },
                        {
                            "kind": "field",
                            "name": "slotNames",
                            "type": {
                                "text": "string[]"
                            },
                            "default": "slotNames"
                        },
                        {
                            "kind": "method",
                            "name": "hasDefaultSlot",
                            "privacy": "private"
                        },
                        {
                            "kind": "method",
                            "name": "hasNamedSlot",
                            "privacy": "private",
                            "parameters": [
                                {
                                    "name": "name",
                                    "type": {
                                        "text": "string"
                                    }
                                }
                            ]
                        },
                        {
                            "kind": "method",
                            "name": "test",
                            "parameters": [
                                {
                                    "name": "slotName",
                                    "type": {
                                        "text": "string"
                                    }
                                }
                            ]
                        },
                        {
                            "kind": "method",
                            "name": "hostConnected"
                        },
                        {
                            "kind": "method",
                            "name": "hostDisconnected"
                        },
                        {
                            "kind": "field",
                            "name": "handleSlotChange",
                            "privacy": "private"
                        }
                    ]
                },
                {
                    "kind": "function",
                    "name": "getInnerHTML",
                    "return": {
                        "type": {
                            "text": "string"
                        }
                    },
                    "parameters": [
                        {
                            "name": "slot",
                            "type": {
                                "text": "HTMLSlotElement"
                            }
                        }
                    ]
                },
                {
                    "kind": "function",
                    "name": "getTextContent",
                    "return": {
                        "type": {
                            "text": "string"
                        }
                    },
                    "parameters": [
                        {
                            "name": "slot",
                            "type": {
                                "text": "HTMLSlotElement | undefined | null"
                            }
                        }
                    ]
                }
            ],
            "exports": [
                {
                    "kind": "js",
                    "name": "HasSlotController",
                    "declaration": {
                        "name": "HasSlotController",
                        "module": "src/internal/slot.ts"
                    }
                },
                {
                    "kind": "js",
                    "name": "getInnerHTML",
                    "declaration": {
                        "name": "getInnerHTML",
                        "module": "src/internal/slot.ts"
                    }
                },
                {
                    "kind": "js",
                    "name": "getTextContent",
                    "declaration": {
                        "name": "getTextContent",
                        "module": "src/internal/slot.ts"
                    }
                }
            ]
        },
        {
            "kind": "javascript-module",
            "path": "src/internal/string.ts",
            "declarations": [
                {
                    "kind": "function",
                    "name": "uppercaseFirstLetter",
                    "parameters": [
                        {
                            "name": "string",
                            "type": {
                                "text": "string"
                            }
                        }
                    ]
                }
            ],
            "exports": [
                {
                    "kind": "js",
                    "name": "uppercaseFirstLetter",
                    "declaration": {
                        "name": "uppercaseFirstLetter",
                        "module": "src/internal/string.ts"
                    }
                }
            ]
        },
        {
            "kind": "javascript-module",
            "path": "src/internal/tabbable.ts",
            "declarations": [
                {
                    "kind": "function",
                    "name": "getTabbableBoundary",
                    "parameters": [
                        {
                            "name": "root",
                            "type": {
                                "text": "HTMLElement | ShadowRoot"
                            }
                        }
                    ]
                },
                {
                    "kind": "function",
                    "name": "getTabbableElements",
                    "parameters": [
                        {
                            "name": "root",
                            "type": {
                                "text": "HTMLElement | ShadowRoot"
                            }
                        }
                    ]
                }
            ],
            "exports": [
                {
                    "kind": "js",
                    "name": "getTabbableBoundary",
                    "declaration": {
                        "name": "getTabbableBoundary",
                        "module": "src/internal/tabbable.ts"
                    }
                },
                {
                    "kind": "js",
                    "name": "getTabbableElements",
                    "declaration": {
                        "name": "getTabbableElements",
                        "module": "src/internal/tabbable.ts"
                    }
                }
            ]
        },
        {
            "kind": "javascript-module",
            "path": "src/internal/watch.ts",
            "declarations": [
                {
                    "kind": "function",
                    "name": "watch",
                    "parameters": [
                        {
                            "name": "propertyName",
                            "type": {
                                "text": "string | string[]"
                            }
                        },
                        {
                            "name": "options",
                            "optional": true,
                            "type": {
                                "text": "WatchOptions"
                            }
                        }
                    ]
                }
            ],
            "exports": [
                {
                    "kind": "js",
                    "name": "watch",
                    "declaration": {
                        "name": "watch",
                        "module": "src/internal/watch.ts"
                    }
                }
            ]
        },
        {
            "kind": "javascript-module",
            "path": "src/utilities/base-path.ts",
            "declarations": [
                {
                    "kind": "function",
                    "name": "setBasePath",
                    "parameters": [
                        {
                            "name": "path",
                            "type": {
                                "text": "string"
                            }
                        }
                    ]
                },
                {
                    "kind": "function",
                    "name": "getBasePath",
                    "parameters": [
                        {
                            "name": "subpath",
                            "default": "\"\""
                        }
                    ]
                }
            ],
            "exports": [
                {
                    "kind": "js",
                    "name": "setBasePath",
                    "declaration": {
                        "name": "setBasePath",
                        "module": "src/utilities/base-path.ts"
                    }
                },
                {
                    "kind": "js",
                    "name": "getBasePath",
                    "declaration": {
                        "name": "getBasePath",
                        "module": "src/utilities/base-path.ts"
                    }
                }
            ]
        },
        {
            "kind": "javascript-module",
            "path": "src/utilities/icon-library.ts",
            "declarations": [],
            "exports": [
                {
                    "kind": "js",
                    "name": "registerIconLibrary",
                    "declaration": {
                        "name": "registerIconLibrary",
                        "module": "\"../components/icon/library.js\""
                    }
                },
                {
                    "kind": "js",
                    "name": "unregisterIconLibrary",
                    "declaration": {
                        "name": "unregisterIconLibrary",
                        "module": "\"../components/icon/library.js\""
                    }
                }
            ]
        },
        {
            "kind": "javascript-module",
            "path": "src/components/avatar/avatar.component.ts",
            "declarations": [
                {
                    "kind": "class",
                    "description": "",
                    "name": "PcAvatar",
                    "members": [
                        {
                            "kind": "field",
                            "name": "dependencies",
                            "type": {
                                "text": "object"
                            },
                            "static": true,
                            "default": "{ \"pc-icon\": PcIcon }"
                        },
                        {
                            "kind": "field",
                            "name": "hasError",
                            "type": {
                                "text": "boolean"
                            },
                            "privacy": "private",
                            "default": "false"
                        },
                        {
                            "kind": "field",
                            "name": "image",
                            "type": {
                                "text": "string"
                            },
                            "default": "\"\"",
                            "attribute": "image"
                        },
                        {
                            "kind": "field",
                            "name": "initials",
                            "type": {
                                "text": "string"
                            },
                            "default": "\"\"",
                            "attribute": "initials"
                        },
                        {
                            "kind": "field",
                            "name": "label",
                            "type": {
                                "text": "string"
                            },
                            "default": "\"\"",
                            "attribute": "label"
                        },
                        {
                            "kind": "field",
                            "name": "loading",
                            "type": {
                                "text": "\"eager\" | \"lazy\""
                            },
                            "default": "\"eager\"",
                            "attribute": "loading"
                        },
                        {
                            "kind": "field",
                            "name": "shape",
                            "type": {
                                "text": "\"circle\" | \"rounded\" | \"square\""
                            },
                            "default": "\"circle\"",
                            "attribute": "shape",
                            "reflects": true
                        },
                        {
                            "kind": "method",
                            "name": "handleImageChange"
                        },
                        {
                            "kind": "method",
                            "name": "handleImageLoadError",
                            "privacy": "private"
                        }
                    ],
                    "attributes": [
                        {
                            "name": "image",
                            "type": {
                                "text": "string"
                            },
                            "default": "\"\"",
                            "fieldName": "image"
                        },
                        {
                            "name": "initials",
                            "type": {
                                "text": "string"
                            },
                            "default": "\"\"",
                            "fieldName": "initials"
                        },
                        {
                            "name": "label",
                            "type": {
                                "text": "string"
                            },
                            "default": "\"\"",
                            "fieldName": "label"
                        },
                        {
                            "name": "loading",
                            "type": {
                                "text": "\"eager\" | \"lazy\""
                            },
                            "default": "\"eager\"",
                            "fieldName": "loading"
                        },
                        {
                            "name": "shape",
                            "type": {
                                "text": "\"circle\" | \"rounded\" | \"square\""
                            },
                            "default": "\"circle\"",
                            "fieldName": "shape"
                        }
                    ],
                    "superclass": {
                        "name": "LitElement",
                        "package": "lit"
                    },
                    "tagName": "pc-avatar",
                    "customElement": true
                }
            ],
            "exports": [
                {
                    "kind": "js",
                    "name": "PcAvatar",
                    "declaration": {
                        "name": "PcAvatar",
                        "module": "src/components/avatar/avatar.component.ts"
                    }
                },
                {
                    "kind": "custom-element-definition",
                    "name": "pc-avatar",
                    "declaration": {
                        "name": "PcAvatar",
                        "module": "src/components/avatar/avatar.component.ts"
                    }
                }
            ]
        },
        {
            "kind": "javascript-module",
            "path": "src/components/avatar/Avatar.stories.ts",
            "declarations": [
                {
                    "kind": "variable",
                    "name": "meta",
                    "type": {
                        "text": "Meta"
                    },
                    "default": "{ title: \"Components/Avatar\", component: \"pc-avatar\", argTypes: { image: { control: \"file\" }, initials: { control: \"text\" }, label: { control: \"text\" }, loading: { control: \"select\", options: [\"eager\", \"lazy\"], }, shape: { control: \"select\", options: [\"circle\", \"rounded\", \"square\"], }, }, args: { image: undefined, initials: undefined, label: \"User avatar\", loading: \"eager\", shape: \"circle\", }, }"
                },
                {
                    "kind": "variable",
                    "name": "Default",
                    "type": {
                        "text": "Story"
                    },
                    "default": "{ render: ({ image, initials, label, loading, shape }) => html` <pc-avatar image=${image} initials=${initials} label=${label} loading=${loading} shape=${shape} ></pc-avatar> `, }"
                },
                {
                    "kind": "variable",
                    "name": "Image",
                    "type": {
                        "text": "Story"
                    },
                    "default": "{ args: { image: \"/avatar.png\", label: \"randomguy-2650’s avatar\", loading: \"eager\", shape: \"circle\", }, render: ({ image, initials, label, loading, shape }) => html` <pc-avatar image=${image} initials=${initials} label=${label} loading=${loading} shape=${shape} ></pc-avatar> `, }"
                },
                {
                    "kind": "variable",
                    "name": "Initials",
                    "type": {
                        "text": "Story"
                    },
                    "default": "{ args: { initials: \"PC\", label: \"Placer Toolkit’s avatar\", loading: \"eager\", shape: \"circle\", }, render: ({ image, initials, label, loading, shape }) => html` <pc-avatar image=${image} initials=${initials} label=${label} loading=${loading} shape=${shape} ></pc-avatar> `, }"
                },
                {
                    "kind": "variable",
                    "name": "Rounded",
                    "type": {
                        "text": "Story"
                    },
                    "default": "{ args: { label: \"Rounded user avatar\", loading: \"eager\", shape: \"rounded\", }, render: ({ image, initials, label, loading, shape }) => html` <pc-avatar image=${image} initials=${initials} label=${label} loading=${loading} shape=${shape} ></pc-avatar> `, }"
                },
                {
                    "kind": "variable",
                    "name": "Square",
                    "type": {
                        "text": "Story"
                    },
                    "default": "{ args: { label: \"Square user avatar\", loading: \"eager\", shape: \"square\", }, render: ({ image, initials, label, loading, shape }) => html` <pc-avatar image=${image} initials=${initials} label=${label} loading=${loading} shape=${shape} ></pc-avatar> `, }"
                },
                {
                    "kind": "variable",
                    "name": "LazyLoaded",
                    "type": {
                        "text": "Story"
                    },
                    "default": "{ args: { image: \"/avatar.png\", label: \"Lazy‐loaded user avatar\", loading: \"lazy\", shape: \"circle\", }, render: ({ image, initials, label, loading, shape }) => html` <pc-avatar image=${image} initials=${initials} label=${label} loading=${loading} shape=${shape} ></pc-avatar> `, }"
                }
            ],
            "exports": [
                {
                    "kind": "js",
                    "name": "default",
                    "declaration": {
                        "name": "meta",
                        "module": "src/components/avatar/Avatar.stories.ts"
                    }
                },
                {
                    "kind": "js",
                    "name": "Default",
                    "declaration": {
                        "name": "Default",
                        "module": "src/components/avatar/Avatar.stories.ts"
                    }
                },
                {
                    "kind": "js",
                    "name": "Image",
                    "declaration": {
                        "name": "Image",
                        "module": "src/components/avatar/Avatar.stories.ts"
                    }
                },
                {
                    "kind": "js",
                    "name": "Initials",
                    "declaration": {
                        "name": "Initials",
                        "module": "src/components/avatar/Avatar.stories.ts"
                    }
                },
                {
                    "kind": "js",
                    "name": "Rounded",
                    "declaration": {
                        "name": "Rounded",
                        "module": "src/components/avatar/Avatar.stories.ts"
                    }
                },
                {
                    "kind": "js",
                    "name": "Square",
                    "declaration": {
                        "name": "Square",
                        "module": "src/components/avatar/Avatar.stories.ts"
                    }
                },
                {
                    "kind": "js",
                    "name": "LazyLoaded",
                    "declaration": {
                        "name": "LazyLoaded",
                        "module": "src/components/avatar/Avatar.stories.ts"
                    }
                }
            ]
        },
        {
            "kind": "javascript-module",
            "path": "src/components/avatar/avatar.styles.ts",
            "declarations": [
                {
                    "kind": "variable",
                    "name": "styles",
                    "default": "css` :host { --size: 3rem; display: inline-block; } .avatar { display: inline-flex; position: relative; align-items: center; justify-content: center; width: var(--size); height: var(--size); background-color: var(--pc-color-neutral-500); color: var(--pc-color-neutral-0); font-family: var(--pc-font-sans); font-size: calc(var(--size) * 0.4); font-weight: var(--pc-font-weight-bold); user-select: none; -webkit-user-select: none; vertical-align: middle; transition: all var(--pc-transition-fast) ease-in-out; } .circle, .circle .image { border-radius: var(--pc-border-radius-circle); } .rounded, .rounded .image { border-radius: var(--pc-border-radius-m); } .square { border-radius: 0; } .icon { display: flex; position: absolute; align-items: center; justify-content: center; top: 0; left: 0; width: 100%; height: 100%; } .initials { line-height: 1; text-transform: uppercase; } .image { position: absolute; top: 0; left: 0; width: 100%; height: 100%; object-fit: cover; overflow: hidden; } `"
                }
            ],
            "exports": [
                {
                    "kind": "js",
                    "name": "styles",
                    "declaration": {
                        "name": "styles",
                        "module": "src/components/avatar/avatar.styles.ts"
                    }
                }
            ]
        },
        {
            "kind": "javascript-module",
            "path": "src/components/avatar/avatar.ts",
            "declarations": [],
            "exports": [
                {
                    "kind": "js",
                    "name": "*",
                    "declaration": {
                        "name": "*",
                        "package": "\"./avatar.component.js\""
                    }
                },
                {
                    "kind": "js",
                    "name": "default",
                    "declaration": {
                        "name": "PcAvatar",
                        "module": "src/components/avatar/avatar.ts"
                    }
                }
            ]
        },
        {
            "kind": "javascript-module",
            "path": "src/components/badge/badge.component.ts",
            "declarations": [
                {
                    "kind": "class",
                    "description": "",
                    "name": "PcBadge",
                    "members": [
                        {
                            "kind": "field",
                            "name": "appearance",
                            "type": {
                                "text": "| \"primary\"\r\n        | \"success\"\r\n        | \"neutral\"\r\n        | \"warning\"\r\n        | \"danger\""
                            },
                            "default": "\"primary\"",
                            "attribute": "appearance",
                            "reflects": true
                        },
                        {
                            "kind": "field",
                            "name": "rounded",
                            "type": {
                                "text": "boolean"
                            },
                            "default": "false",
                            "attribute": "rounded",
                            "reflects": true
                        },
                        {
                            "kind": "field",
                            "name": "pulse",
                            "type": {
                                "text": "boolean"
                            },
                            "default": "false",
                            "attribute": "pulse",
                            "reflects": true
                        }
                    ],
                    "attributes": [
                        {
                            "name": "appearance",
                            "type": {
                                "text": "| \"primary\"\r\n        | \"success\"\r\n        | \"neutral\"\r\n        | \"warning\"\r\n        | \"danger\""
                            },
                            "default": "\"primary\"",
                            "fieldName": "appearance"
                        },
                        {
                            "name": "rounded",
                            "type": {
                                "text": "boolean"
                            },
                            "default": "false",
                            "fieldName": "rounded"
                        },
                        {
                            "name": "pulse",
                            "type": {
                                "text": "boolean"
                            },
                            "default": "false",
                            "fieldName": "pulse"
                        }
                    ],
                    "superclass": {
                        "name": "LitElement",
                        "package": "lit"
                    },
                    "tagName": "pc-badge",
                    "customElement": true
                }
            ],
            "exports": [
                {
                    "kind": "js",
                    "name": "PcBadge",
                    "declaration": {
                        "name": "PcBadge",
                        "module": "src/components/badge/badge.component.ts"
                    }
                },
                {
                    "kind": "custom-element-definition",
                    "name": "pc-badge",
                    "declaration": {
                        "name": "PcBadge",
                        "module": "src/components/badge/badge.component.ts"
                    }
                }
            ]
        },
        {
            "kind": "javascript-module",
            "path": "src/components/badge/Badge.stories.ts",
            "declarations": [
                {
                    "kind": "variable",
                    "name": "meta",
                    "type": {
                        "text": "Meta"
                    },
                    "default": "{ title: \"Components/Badge\", component: \"pc-badge\", argTypes: { appearance: { control: \"select\", options: [\"primary\", \"success\", \"neutral\", \"warning\", \"danger\"], }, label: { control: \"text\" }, rounded: { control: \"boolean\" }, pulse: { control: \"boolean\" }, }, args: { appearance: \"primary\", label: \"Badge\", rounded: false, pulse: false, }, }"
                },
                {
                    "kind": "variable",
                    "name": "Default",
                    "type": {
                        "text": "Story"
                    },
                    "default": "{ render: ({ appearance, label, rounded, pulse }) => html` <pc-badge appearance=${appearance} ?rounded=${rounded} ?pulse=${pulse}> ${label} </pc-badge> `, }"
                },
                {
                    "kind": "variable",
                    "name": "Success",
                    "type": {
                        "text": "Story"
                    },
                    "default": "{ args: { appearance: \"success\", label: \"Success\", rounded: false, pulse: false, }, render: ({ appearance, label, rounded, pulse }) => html` <pc-badge appearance=${appearance} ?rounded=${rounded} ?pulse=${pulse}> ${label} </pc-badge> `, }"
                },
                {
                    "kind": "variable",
                    "name": "Rounded",
                    "type": {
                        "text": "Story"
                    },
                    "default": "{ args: { appearance: \"primary\", label: \"Rounded\", rounded: true, pulse: false, }, render: ({ appearance, label, rounded, pulse }) => html` <pc-badge appearance=${appearance} ?rounded=${rounded} ?pulse=${pulse}> ${label} </pc-badge> `, }"
                },
                {
                    "kind": "variable",
                    "name": "Pulse",
                    "type": {
                        "text": "Story"
                    },
                    "default": "{ args: { appearance: \"primary\", label: \"Pulse\", rounded: false, pulse: true, }, render: ({ appearance, label, rounded, pulse }) => html` <pc-badge appearance=${appearance} ?rounded=${rounded} ?pulse=${pulse}> ${label} </pc-badge> `, }"
                }
            ],
            "exports": [
                {
                    "kind": "js",
                    "name": "default",
                    "declaration": {
                        "name": "meta",
                        "module": "src/components/badge/Badge.stories.ts"
                    }
                },
                {
                    "kind": "js",
                    "name": "Default",
                    "declaration": {
                        "name": "Default",
                        "module": "src/components/badge/Badge.stories.ts"
                    }
                },
                {
                    "kind": "js",
                    "name": "Success",
                    "declaration": {
                        "name": "Success",
                        "module": "src/components/badge/Badge.stories.ts"
                    }
                },
                {
                    "kind": "js",
                    "name": "Rounded",
                    "declaration": {
                        "name": "Rounded",
                        "module": "src/components/badge/Badge.stories.ts"
                    }
                },
                {
                    "kind": "js",
                    "name": "Pulse",
                    "declaration": {
                        "name": "Pulse",
                        "module": "src/components/badge/Badge.stories.ts"
                    }
                }
            ]
        },
        {
            "kind": "javascript-module",
            "path": "src/components/badge/badge.styles.ts",
            "declarations": [
                {
                    "kind": "variable",
                    "name": "styles",
                    "default": "css` :host { display: inline-flex; } span { padding: var(--pc-spacing-xs) var(--pc-spacing-s); font-family: var(--pc-font-sans); font-size: var(--pc-font-size-xs); font-weight: var(--pc-font-weight-bold); color: var(--pc-color-neutral-0); border: 1px solid transparent; border-radius: var(--pc-border-radius-pill); user-select: none; -webkit-user-select: none; cursor: inherit; transition: all var(--pc-transition-fast) ease-in-out; } span, span.appearance-primary { --pulse-color: var(--pc-color-primary-600); background-color: var(--pc-color-primary-500); border: 1px solid var(--pc-color-primary-400); } span.appearance-success { --pulse-color: var(--pc-color-success-600); background-color: var(--pc-color-success-500); border: 1px solid var(--pc-color-success-400); } span.appearance-neutral { --pulse-color: var(--pc-color-neutral-600); background-color: var(--pc-color-neutral-500); border: 1px solid var(--pc-color-neutral-400); } span.appearance-warning { --pulse-color: var(--pc-color-warning-600); background-color: var(--pc-color-warning-500); border: 1px solid var(--pc-color-warning-400); } span.appearance-danger { --pulse-color: var(--pc-color-danger-600); background-color: var(--pc-color-danger-500); border: 1px solid var(--pc-color-danger-400); } span.rounded { border-radius: var(--pc-border-radius-s); } span.pulse { animation: pulse 1.5s cubic-bezier(0, 0.55, 0.45, 1) infinite; } @keyframes pulse { 0% { box-shadow: 0 0 0 0 var(--pulse-color); } 70% { box-shadow: 0 0 0 0.5rem transparent; } 100% { box-shadow: 0 0 0 0 transparent; } } `"
                }
            ],
            "exports": [
                {
                    "kind": "js",
                    "name": "styles",
                    "declaration": {
                        "name": "styles",
                        "module": "src/components/badge/badge.styles.ts"
                    }
                }
            ]
        },
        {
            "kind": "javascript-module",
            "path": "src/components/badge/badge.ts",
            "declarations": [],
            "exports": [
                {
                    "kind": "js",
                    "name": "*",
                    "declaration": {
                        "name": "*",
                        "package": "\"./badge.component.js\""
                    }
                },
                {
                    "kind": "js",
                    "name": "default",
                    "declaration": {
                        "name": "PcBadge",
                        "module": "src/components/badge/badge.ts"
                    }
                }
            ]
        },
        {
            "kind": "javascript-module",
            "path": "src/components/button/button.component.ts",
            "declarations": [
                {
                    "kind": "class",
                    "description": "",
                    "name": "PcButton",
                    "members": [
                        {
                            "kind": "field",
                            "name": "dependencies",
                            "type": {
                                "text": "object"
                            },
                            "static": true,
                            "default": "{ \"pc-icon\": PcIcon }"
                        },
                        {
                            "kind": "field",
                            "name": "formControlController",
                            "privacy": "private",
                            "readonly": true,
                            "default": "new FormControlController(this, { assumeInteractionOn: [\"click\"], })"
                        },
                        {
                            "kind": "field",
                            "name": "hasSlotController",
                            "privacy": "private",
                            "readonly": true,
                            "default": "new HasSlotController( this, \"[default]\", \"prefix\", \"suffix\" )"
                        },
                        {
                            "kind": "field",
                            "name": "button",
                            "type": {
                                "text": "HTMLButtonElement | HTMLLinkElement"
                            }
                        },
                        {
                            "kind": "field",
                            "name": "hasFocus",
                            "type": {
                                "text": "boolean"
                            },
                            "privacy": "private",
                            "default": "false"
                        },
                        {
                            "kind": "field",
                            "name": "invalid",
                            "type": {
                                "text": "boolean"
                            },
                            "default": "false"
                        },
                        {
                            "kind": "field",
                            "name": "title",
                            "type": {
                                "text": "string"
                            },
                            "default": "\"\"",
                            "attribute": "title"
                        },
                        {
                            "kind": "field",
                            "name": "appearance",
                            "type": {
                                "text": "| \"default\"\r\n        | \"primary\"\r\n        | \"success\"\r\n        | \"warning\"\r\n        | \"danger\"\r\n        | \"text\""
                            },
                            "default": "\"default\"",
                            "attribute": "appearance",
                            "reflects": true
                        },
                        {
                            "kind": "field",
                            "name": "disabled",
                            "type": {
                                "text": "boolean"
                            },
                            "default": "false",
                            "attribute": "disabled",
                            "reflects": true
                        },
                        {
                            "kind": "field",
                            "name": "download",
                            "type": {
                                "text": "string | undefined"
                            },
                            "attribute": "download"
                        },
                        {
                            "kind": "field",
                            "name": "form",
                            "type": {
                                "text": "string | undefined"
                            },
                            "attribute": "form"
                        },
                        {
                            "kind": "field",
                            "name": "formAction",
                            "type": {
                                "text": "string | undefined"
                            },
                            "attribute": "formaction"
                        },
                        {
                            "kind": "field",
                            "name": "formEnctype",
                            "type": {
                                "text": "| \"application/x-www-form-url-encoded\"\r\n        | \"multipart/form-data\"\r\n        | \"text/plain\" | undefined"
                            },
                            "attribute": "formenctype"
                        },
                        {
                            "kind": "field",
                            "name": "formMethod",
                            "type": {
                                "text": "\"GET\" | \"POST\" | undefined"
                            },
                            "attribute": "formmethod"
                        },
                        {
                            "kind": "field",
                            "name": "formNoValidate",
                            "type": {
                                "text": "boolean | undefined"
                            },
                            "attribute": "formnovalidate"
                        },
                        {
                            "kind": "field",
                            "name": "formTarget",
                            "type": {
                                "text": "| \"_self\"\r\n        | \"_blank\"\r\n        | \"_parent\"\r\n        | \"_top\"\r\n        | string | undefined"
                            },
                            "attribute": "formtarget"
                        },
                        {
                            "kind": "field",
                            "name": "href",
                            "type": {
                                "text": "string"
                            },
                            "default": "\"\"",
                            "attribute": "href"
                        },
                        {
                            "kind": "field",
                            "name": "name",
                            "type": {
                                "text": "string"
                            },
                            "default": "\"\"",
                            "attribute": "name"
                        },
                        {
                            "kind": "field",
                            "name": "outlined",
                            "type": {
                                "text": "boolean"
                            },
                            "default": "false",
                            "attribute": "outlined",
                            "reflects": true
                        },
                        {
                            "kind": "field",
                            "name": "pill",
                            "type": {
                                "text": "boolean"
                            },
                            "default": "false",
                            "attribute": "pill",
                            "reflects": true
                        },
                        {
                            "kind": "field",
                            "name": "rel",
                            "type": {
                                "text": "string"
                            },
                            "default": "\"noreferrer noopener\"",
                            "attribute": "rel"
                        },
                        {
                            "kind": "field",
                            "name": "size",
                            "type": {
                                "text": "\"small\" | \"medium\" | \"large\""
                            },
                            "default": "\"medium\"",
                            "attribute": "size",
                            "reflects": true
                        },
                        {
                            "kind": "field",
                            "name": "target",
                            "type": {
                                "text": "\"_blank\" | \"_parent\" | \"_self\" | \"_top\" | undefined"
                            },
                            "attribute": "target"
                        },
                        {
                            "kind": "field",
                            "name": "type",
                            "type": {
                                "text": "| \"button\"\r\n        | \"submit\"\r\n        | \"reset\""
                            },
                            "default": "\"button\"",
                            "attribute": "type",
                            "reflects": true
                        },
                        {
                            "kind": "field",
                            "name": "value",
                            "type": {
                                "text": "string"
                            },
                            "default": "\"\"",
                            "attribute": "value"
                        },
                        {
                            "kind": "field",
                            "name": "direction",
                            "type": {
                                "text": "\"ltr\" | \"rtl\""
                            },
                            "privacy": "private",
                            "default": "\"ltr\""
                        },
                        {
                            "kind": "field",
                            "name": "validity",
                            "readonly": true
                        },
                        {
                            "kind": "field",
                            "name": "validationMessage",
                            "readonly": true
                        },
                        {
                            "kind": "method",
                            "name": "updateDirection",
                            "privacy": "private"
                        },
                        {
                            "kind": "method",
                            "name": "handleBlur",
                            "privacy": "private"
                        },
                        {
                            "kind": "method",
                            "name": "handleFocus",
                            "privacy": "private"
                        },
                        {
                            "kind": "method",
                            "name": "handleClick",
                            "privacy": "private"
                        },
                        {
                            "kind": "method",
                            "name": "handleInvalid",
                            "privacy": "private",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": {
                                        "text": "Event"
                                    }
                                }
                            ]
                        },
                        {
                            "kind": "method",
                            "name": "isButton",
                            "privacy": "private"
                        },
                        {
                            "kind": "method",
                            "name": "isLink",
                            "privacy": "private"
                        },
                        {
                            "kind": "method",
                            "name": "handleDisabledChange"
                        },
                        {
                            "kind": "method",
                            "name": "click"
                        },
                        {
                            "kind": "method",
                            "name": "focus",
                            "parameters": [
                                {
                                    "name": "options",
                                    "optional": true,
                                    "type": {
                                        "text": "FocusOptions"
                                    }
                                }
                            ]
                        },
                        {
                            "kind": "method",
                            "name": "blur"
                        },
                        {
                            "kind": "method",
                            "name": "checkValidity"
                        },
                        {
                            "kind": "method",
                            "name": "getForm",
                            "return": {
                                "type": {
                                    "text": "HTMLFormElement | null"
                                }
                            }
                        },
                        {
                            "kind": "method",
                            "name": "reportValidity"
                        },
                        {
                            "kind": "method",
                            "name": "setCustomValidity",
                            "parameters": [
                                {
                                    "name": "message",
                                    "type": {
                                        "text": "string"
                                    }
                                }
                            ]
                        }
                    ],
                    "attributes": [
                        {
                            "name": "title",
                            "type": {
                                "text": "string"
                            },
                            "default": "\"\"",
                            "fieldName": "title"
                        },
                        {
                            "name": "appearance",
                            "type": {
                                "text": "| \"default\"\r\n        | \"primary\"\r\n        | \"success\"\r\n        | \"warning\"\r\n        | \"danger\"\r\n        | \"text\""
                            },
                            "default": "\"default\"",
                            "fieldName": "appearance"
                        },
                        {
                            "name": "disabled",
                            "type": {
                                "text": "boolean"
                            },
                            "default": "false",
                            "fieldName": "disabled"
                        },
                        {
                            "name": "download",
                            "type": {
                                "text": "string | undefined"
                            },
                            "fieldName": "download"
                        },
                        {
                            "name": "form",
                            "type": {
                                "text": "string | undefined"
                            },
                            "fieldName": "form"
                        },
                        {
                            "name": "formaction",
                            "type": {
                                "text": "string | undefined"
                            },
                            "fieldName": "formAction"
                        },
                        {
                            "name": "formenctype",
                            "type": {
                                "text": "| \"application/x-www-form-url-encoded\"\r\n        | \"multipart/form-data\"\r\n        | \"text/plain\" | undefined"
                            },
                            "fieldName": "formEnctype"
                        },
                        {
                            "name": "formmethod",
                            "type": {
                                "text": "\"GET\" | \"POST\" | undefined"
                            },
                            "fieldName": "formMethod"
                        },
                        {
                            "name": "formnovalidate",
                            "type": {
                                "text": "boolean | undefined"
                            },
                            "fieldName": "formNoValidate"
                        },
                        {
                            "name": "formtarget",
                            "type": {
                                "text": "| \"_self\"\r\n        | \"_blank\"\r\n        | \"_parent\"\r\n        | \"_top\"\r\n        | string | undefined"
                            },
                            "fieldName": "formTarget"
                        },
                        {
                            "name": "href",
                            "type": {
                                "text": "string"
                            },
                            "default": "\"\"",
                            "fieldName": "href"
                        },
                        {
                            "name": "name",
                            "type": {
                                "text": "string"
                            },
                            "default": "\"\"",
                            "fieldName": "name"
                        },
                        {
                            "name": "outlined",
                            "type": {
                                "text": "boolean"
                            },
                            "default": "false",
                            "fieldName": "outlined"
                        },
                        {
                            "name": "pill",
                            "type": {
                                "text": "boolean"
                            },
                            "default": "false",
                            "fieldName": "pill"
                        },
                        {
                            "name": "rel",
                            "type": {
                                "text": "string"
                            },
                            "default": "\"noreferrer noopener\"",
                            "fieldName": "rel"
                        },
                        {
                            "name": "size",
                            "type": {
                                "text": "\"small\" | \"medium\" | \"large\""
                            },
                            "default": "\"medium\"",
                            "fieldName": "size"
                        },
                        {
                            "name": "target",
                            "type": {
                                "text": "\"_blank\" | \"_parent\" | \"_self\" | \"_top\" | undefined"
                            },
                            "fieldName": "target"
                        },
                        {
                            "name": "type",
                            "type": {
                                "text": "| \"button\"\r\n        | \"submit\"\r\n        | \"reset\""
                            },
                            "default": "\"button\"",
                            "fieldName": "type"
                        },
                        {
                            "name": "value",
                            "type": {
                                "text": "string"
                            },
                            "default": "\"\"",
                            "fieldName": "value"
                        }
                    ],
                    "superclass": {
                        "name": "LitElement",
                        "package": "lit"
                    },
                    "tagName": "pc-button",
                    "customElement": true
                }
            ],
            "exports": [
                {
                    "kind": "js",
                    "name": "PcButton",
                    "declaration": {
                        "name": "PcButton",
                        "module": "src/components/button/button.component.ts"
                    }
                },
                {
                    "kind": "custom-element-definition",
                    "name": "pc-button",
                    "declaration": {
                        "name": "PcButton",
                        "module": "src/components/button/button.component.ts"
                    }
                }
            ]
        },
        {
            "kind": "javascript-module",
            "path": "src/components/button/Button.stories.ts",
            "declarations": [
                {
                    "kind": "variable",
                    "name": "meta",
                    "type": {
                        "text": "Meta"
                    },
                    "default": "{ title: \"Components/Button\", component: \"pc-button\", argTypes: { appearance: { control: \"select\", options: [ \"default\", \"primary\", \"success\", \"warning\", \"danger\", \"text\", ], }, disabled: { control: \"boolean\" }, download: { control: \"text\" }, form: { control: \"text\" }, formAction: { control: \"text\" }, formEnctype: { control: \"select\", options: [ \"application/x-www-form-url-encoded\", \"multipart/form-data\", \"text/plain\", ], }, formMethod: { control: \"select\", options: [\"GET\", \"POST\"], }, formNoValidate: { control: \"boolean\" }, formTarget: { control: \"select\", options: [\"_self\", \"_blank\", \"_parent\", \"_top\"], }, href: { control: \"text\" }, label: { control: \"text\" }, name: { control: \"text\" }, outlined: { control: \"boolean\" }, pill: { control: \"boolean\" }, prefix: { control: \"text\" }, rel: { control: \"text\" }, size: { control: \"select\", options: [\"small\", \"medium\", \"large\"], }, suffix: { control: \"text\" }, target: { control: \"select\", options: [\"_blank\", \"_parent\", \"_self\"], }, type: { control: \"select\", options: [\"button\", \"submit\", \"reset\"], }, value: { control: \"text\" }, }, args: { appearance: \"default\", disabled: false, download: undefined, form: undefined, formAction: undefined, formEnctype: undefined, formMethod: undefined, formNoValidate: undefined, formTarget: undefined, href: undefined, label: \"Button\", name: undefined, outlined: false, pill: false, prefix: undefined, rel: \"noreferrer noopener\", size: \"medium\", suffix: undefined, target: undefined, type: \"button\", value: undefined, }, }"
                },
                {
                    "kind": "variable",
                    "name": "Default",
                    "type": {
                        "text": "Story"
                    },
                    "default": "{ render: ({ appearance, disabled, download, form, formAction, formEnctype, formMethod, formNoValidate, formTarget, href, label, name, outlined, pill, prefix, rel, size, suffix, target, type, value, }) => html` <pc-button type=${type} appearance=${appearance} size=${size} href=${href} target=${target} rel=${rel} value=${value} download=${download} form=${form} formAction=${formAction} formEnctype=${formEnctype} formMethod=${formMethod} ?formNoValidate=${formNoValidate} formTarget=${formTarget} name=${name} ?outlined=${outlined} ?pill=${pill} ?disabled=${disabled} > ${prefix ? html`<span slot=\"prefix\">${prefix}</span>` : \"\"} ${label} ${suffix ? html`<span slot=\"suffix\">${suffix}</span>` : \"\"} </pc-button> `, }"
                },
                {
                    "kind": "variable",
                    "name": "Primary",
                    "type": {
                        "text": "Story"
                    },
                    "default": "{ args: { appearance: \"primary\", disabled: false, label: \"Primary\", outlined: false, pill: false, rel: \"noreferrer noopener\", size: \"medium\", type: \"button\", form: undefined, formAction: undefined, formEnctype: undefined, formMethod: undefined, formNoValidate: undefined, formTarget: undefined, name: undefined, value: undefined, }, render: ({ appearance, disabled, download, form, formAction, formEnctype, formMethod, formNoValidate, formTarget, href, label, name, outlined, pill, prefix, rel, size, suffix, target, type, value, }) => html` <pc-button type=${type} appearance=${appearance} size=${size} href=${href} target=${target} rel=${rel} value=${value} download=${download} form=${form} formAction=${formAction} formEnctype=${formEnctype} formMethod=${formMethod} ?formNoValidate=${formNoValidate} formTarget=${formTarget} name=${name} ?outlined=${outlined} ?pill=${pill} ?disabled=${disabled} > ${prefix ? html`<span slot=\"prefix\">${prefix}</span>` : \"\"} ${label} ${suffix ? html`<span slot=\"suffix\">${suffix}</span>` : \"\"} </pc-button> `, }"
                },
                {
                    "kind": "variable",
                    "name": "Large",
                    "type": {
                        "text": "Story"
                    },
                    "default": "{ args: { appearance: \"default\", disabled: false, label: \"Large\", outlined: false, pill: false, rel: \"noreferrer noopener\", size: \"large\", type: \"button\", form: undefined, formAction: undefined, formEnctype: undefined, formMethod: undefined, formNoValidate: undefined, formTarget: undefined, name: undefined, value: undefined, }, render: ({ appearance, disabled, download, form, formAction, formEnctype, formMethod, formNoValidate, formTarget, href, label, name, outlined, pill, prefix, rel, size, suffix, target, type, value, }) => html` <pc-button type=${type} appearance=${appearance} size=${size} href=${href} target=${target} rel=${rel} value=${value} download=${download} form=${form} formAction=${formAction} formEnctype=${formEnctype} formMethod=${formMethod} ?formNoValidate=${formNoValidate} formTarget=${formTarget} name=${name} ?outlined=${outlined} ?pill=${pill} ?disabled=${disabled} > ${prefix ? html`<span slot=\"prefix\">${prefix}</span>` : \"\"} ${label} ${suffix ? html`<span slot=\"suffix\">${suffix}</span>` : \"\"} </pc-button> `, }"
                },
                {
                    "kind": "variable",
                    "name": "Small",
                    "type": {
                        "text": "Story"
                    },
                    "default": "{ args: { appearance: \"default\", disabled: false, label: \"Small\", outlined: false, pill: false, rel: \"noreferrer noopener\", size: \"small\", type: \"button\", form: undefined, formAction: undefined, formEnctype: undefined, formMethod: undefined, formNoValidate: undefined, formTarget: undefined, name: undefined, value: undefined, }, render: ({ appearance, disabled, download, form, formAction, formEnctype, formMethod, formNoValidate, formTarget, href, label, name, outlined, pill, prefix, rel, size, suffix, target, type, value, }) => html` <pc-button type=${type} appearance=${appearance} size=${size} href=${href} target=${target} rel=${rel} value=${value} download=${download} form=${form} formAction=${formAction} formEnctype=${formEnctype} formMethod=${formMethod} ?formNoValidate=${formNoValidate} formTarget=${formTarget} name=${name} ?outlined=${outlined} ?pill=${pill} ?disabled=${disabled} > ${prefix ? html`<span slot=\"prefix\">${prefix}</span>` : \"\"} ${label} ${suffix ? html`<span slot=\"suffix\">${suffix}</span>` : \"\"} </pc-button> `, }"
                },
                {
                    "kind": "variable",
                    "name": "Link",
                    "type": {
                        "text": "Story"
                    },
                    "default": "{ args: { appearance: \"default\", disabled: false, href: \"https://example.com\", label: \"Link to example.com\", outlined: false, pill: false, rel: \"noreferrer noopener\", size: \"medium\", type: \"button\", target: \"_blank\", form: undefined, formAction: undefined, formEnctype: undefined, formMethod: undefined, formNoValidate: undefined, formTarget: undefined, name: undefined, value: undefined, }, render: ({ appearance, disabled, download, form, formAction, formEnctype, formMethod, formNoValidate, formTarget, href, label, name, outlined, pill, prefix, rel, size, suffix, target, type, value, }) => html` <pc-button type=${type} appearance=${appearance} size=${size} href=${href} target=${target} rel=${rel} value=${value} download=${download} form=${form} formAction=${formAction} formEnctype=${formEnctype} formMethod=${formMethod} ?formNoValidate=${formNoValidate} formTarget=${formTarget} name=${name} ?outlined=${outlined} ?pill=${pill} ?disabled=${disabled} > ${prefix ? html`<span slot=\"prefix\">${prefix}</span>` : \"\"} ${label} ${suffix ? html`<span slot=\"suffix\">${suffix}</span>` : \"\"} </pc-button> `, }"
                },
                {
                    "kind": "variable",
                    "name": "Disabled",
                    "type": {
                        "text": "Story"
                    },
                    "default": "{ args: { appearance: \"default\", disabled: true, label: \"Disabled\", outlined: false, pill: false, rel: \"noreferrer noopener\", size: \"medium\", type: \"button\", form: undefined, formAction: undefined, formEnctype: undefined, formMethod: undefined, formNoValidate: undefined, formTarget: undefined, name: undefined, value: undefined, }, render: ({ appearance, disabled, download, form, formAction, formEnctype, formMethod, formNoValidate, formTarget, href, label, name, outlined, pill, prefix, rel, size, suffix, target, type, value, }) => html` <pc-button type=${type} appearance=${appearance} size=${size} href=${href} target=${target} rel=${rel} value=${value} download=${download} form=${form} formAction=${formAction} formEnctype=${formEnctype} formMethod=${formMethod} ?formNoValidate=${formNoValidate} formTarget=${formTarget} name=${name} ?outlined=${outlined} ?pill=${pill} ?disabled=${disabled} > ${prefix ? html`<span slot=\"prefix\">${prefix}</span>` : \"\"} ${label} ${suffix ? html`<span slot=\"suffix\">${suffix}</span>` : \"\"} </pc-button> `, }"
                },
                {
                    "kind": "variable",
                    "name": "Outlined",
                    "type": {
                        "text": "Story"
                    },
                    "default": "{ args: { appearance: \"default\", disabled: false, label: \"Outlined\", outlined: true, pill: false, rel: \"noreferrer noopener\", size: \"medium\", type: \"button\", form: undefined, formAction: undefined, formEnctype: undefined, formMethod: undefined, formNoValidate: undefined, formTarget: undefined, name: undefined, value: undefined, }, render: ({ appearance, disabled, download, form, formAction, formEnctype, formMethod, formNoValidate, formTarget, href, label, name, outlined, pill, prefix, rel, size, suffix, target, type, value, }) => html` <pc-button type=${type} appearance=${appearance} size=${size} href=${href} target=${target} rel=${rel} value=${value} download=${download} form=${form} formAction=${formAction} formEnctype=${formEnctype} formMethod=${formMethod} ?formNoValidate=${formNoValidate} formTarget=${formTarget} name=${name} ?outlined=${outlined} ?pill=${pill} ?disabled=${disabled} > ${prefix ? html`<span slot=\"prefix\">${prefix}</span>` : \"\"} ${label} ${suffix ? html`<span slot=\"suffix\">${suffix}</span>` : \"\"} </pc-button> `, }"
                },
                {
                    "kind": "variable",
                    "name": "Pill",
                    "type": {
                        "text": "Story"
                    },
                    "default": "{ args: { appearance: \"default\", disabled: false, label: \"Pill\", outlined: false, pill: true, rel: \"noreferrer noopener\", size: \"medium\", type: \"button\", form: undefined, formAction: undefined, formEnctype: undefined, formMethod: undefined, formNoValidate: undefined, formTarget: undefined, name: undefined, value: undefined, }, render: ({ appearance, disabled, download, form, formAction, formEnctype, formMethod, formNoValidate, formTarget, href, label, name, outlined, pill, prefix, rel, size, suffix, target, type, value, }) => html` <pc-button type=${type} appearance=${appearance} size=${size} href=${href} target=${target} rel=${rel} value=${value} download=${download} form=${form} formAction=${formAction} formEnctype=${formEnctype} formMethod=${formMethod} ?formNoValidate=${formNoValidate} formTarget=${formTarget} name=${name} ?outlined=${outlined} ?pill=${pill} ?disabled=${disabled} > ${prefix ? html`<span slot=\"prefix\">${prefix}</span>` : \"\"} ${label} ${suffix ? html`<span slot=\"suffix\">${suffix}</span>` : \"\"} </pc-button> `, }"
                }
            ],
            "exports": [
                {
                    "kind": "js",
                    "name": "default",
                    "declaration": {
                        "name": "meta",
                        "module": "src/components/button/Button.stories.ts"
                    }
                },
                {
                    "kind": "js",
                    "name": "Default",
                    "declaration": {
                        "name": "Default",
                        "module": "src/components/button/Button.stories.ts"
                    }
                },
                {
                    "kind": "js",
                    "name": "Primary",
                    "declaration": {
                        "name": "Primary",
                        "module": "src/components/button/Button.stories.ts"
                    }
                },
                {
                    "kind": "js",
                    "name": "Large",
                    "declaration": {
                        "name": "Large",
                        "module": "src/components/button/Button.stories.ts"
                    }
                },
                {
                    "kind": "js",
                    "name": "Small",
                    "declaration": {
                        "name": "Small",
                        "module": "src/components/button/Button.stories.ts"
                    }
                },
                {
                    "kind": "js",
                    "name": "Link",
                    "declaration": {
                        "name": "Link",
                        "module": "src/components/button/Button.stories.ts"
                    }
                },
                {
                    "kind": "js",
                    "name": "Disabled",
                    "declaration": {
                        "name": "Disabled",
                        "module": "src/components/button/Button.stories.ts"
                    }
                },
                {
                    "kind": "js",
                    "name": "Outlined",
                    "declaration": {
                        "name": "Outlined",
                        "module": "src/components/button/Button.stories.ts"
                    }
                },
                {
                    "kind": "js",
                    "name": "Pill",
                    "declaration": {
                        "name": "Pill",
                        "module": "src/components/button/Button.stories.ts"
                    }
                }
            ]
        },
        {
            "kind": "javascript-module",
            "path": "src/components/button/button.styles.ts",
            "declarations": [
                {
                    "kind": "variable",
                    "name": "styles",
                    "default": "css` :host { position: relative; display: inline-block; width: auto; cursor: pointer; } .button { display: inline-flex; align-items: stretch; justify-content: center; width: auto; max-width: 100%; height: auto; border: none; border-radius: var(--pc-border-radius-s); padding: 0; box-sizing: border-box; color: var(--pc-color-neutral-900); font-family: var(--pc-input-font-family); font-weight: var(--pc-font-weight-bold); vertical-align: middle; white-space: nowrap; user-select: none; -webkit-user-select: none; cursor: inherit; text-decoration: none; transition: all var(--pc-transition-fast) ease-in-out; text-align: center; } .button::-moz-focus-inner { border: 0; } .button:focus { outline: none; } .button:focus-visible { outline: var(--pc-focus-ring); outline-offset: var(--pc-focus-ring-offset); } .prefix, .suffix { display: flex; align-items: center; flex: 0 0 auto; pointer-events: none; } .label::slotted(pc-icon) { vertical-align: -2px; } .label { display: inline-block; transition: color var(--pc-transition-fast) ease-in-out; } .button[disabled], .button[aria-disabled=\"true\"] { opacity: 0.6; cursor: not-allowed; } .button[disabled] *, .button[aria-disabled=\"true\"] * { pointer-events: none; } .button, .button.appearance-default { background-color: var(--pc-color-neutral-200); border: var(--pc-input-border-width) solid var(--pc-color-neutral-100); } .button:hover:not(.button[disabled]), .button.appearance-default:hover:not(.button[disabled]) { background-color: var(--pc-color-neutral-300); border: var(--pc-input-border-width) solid var(--pc-color-neutral-200); } .button:hover:active:not(.button[disabled]), .button.appearance-default:hover:active:not(.button[disabled]) { background-color: var(--pc-color-neutral-100); border: var(--pc-input-border-width) solid var(--pc-color-neutral-100); color: var(--pc-color-neutral-800); } .button.appearance-primary { background-color: var(--pc-color-primary-200); border: var(--pc-input-border-width) solid var(--pc-color-primary-100); } .button.appearance-primary:hover:not(.button[disabled]) { background-color: var(--pc-color-primary-300); border: var(--pc-input-border-width) solid var(--pc-color-primary-200); } .button.appearance-primary:hover:active:not(.button[disabled]) { background-color: var(--pc-color-primary-100); border: var(--pc-input-border-width) solid var(--pc-color-primary-100); color: var(--pc-color-primary-800); } .button.appearance-success { background-color: var(--pc-color-success-200); border: var(--pc-input-border-width) solid var(--pc-color-success-100); } .button.appearance-success:hover:not(.button[disabled]) { background-color: var(--pc-color-success-300); border: var(--pc-input-border-width) solid var(--pc-color-success-200); } .button.appearance-success:hover:active:not(.button[disabled]) { background-color: var(--pc-color-success-100); border: var(--pc-input-border-width) solid var(--pc-color-success-100); color: var(--pc-color-success-800); } .button.appearance-warning { background-color: var(--pc-color-warning-200); border: var(--pc-input-border-width) solid var(--pc-color-warning-100); } .button.appearance-warning:hover:not(.button[disabled]) { background-color: var(--pc-color-warning-300); border: var(--pc-input-border-width) solid var(--pc-color-warning-200); } .button.appearance-warning:hover:active:not(.button[disabled]) { background-color: var(--pc-color-warning-100); border: var(--pc-input-border-width) solid var(--pc-color-warning-100); color: var(--pc-color-warning-800); } .button.appearance-danger { background-color: var(--pc-color-danger-200); border: var(--pc-input-border-width) solid var(--pc-color-danger-100); } .button.appearance-danger:hover:not(.button[disabled]) { background-color: var(--pc-color-danger-300); border: var(--pc-input-border-width) solid var(--pc-color-danger-200); } .button.appearance-danger:hover:active:not(.button[disabled]) { background-color: var(--pc-color-danger-100); border: var(--pc-input-border-width) solid var(--pc-color-danger-100); color: var(--pc-color-danger-800); } .button.appearance-text { background-color: transparent; border: 1px solid transparent; } .button.appearance-text:hover:not(.button[disabled]) { background-color: var(--pc-color-neutral-200); border: 1px solid var(--pc-color-neutral-200); color: var(--pc-color-sky-600); } .button.appearance-text:hover:active:not(.button[disabled]) { background-color: var(--pc-color-neutral-100); border: 1px solid var(--pc-color-neutral-100); color: var(--pc-color-sky-500); } .button.size-small.has-prefix { padding-inline-start: var(--pc-spacing-s); } .button.size-small.has-suffix { padding-inline-end: var(--pc-spacing-s); } .button.size-medium.has-prefix { padding-inline-start: var(--pc-spacing-m); } .button.size-medium.has-suffix { padding-inline-end: var(--pc-spacing-m); } .button.size-large.has-prefix { padding-inline-start: var(--pc-spacing-l); } .button.size-large.has-suffix { padding-inline-end: var(--pc-spacing-l); } .button.has-prefix.has-label .label { padding-left: var(--pc-spacing-s); } .button.has-suffix.has-label .label { padding-right: var(--pc-spacing-s); } .button.size-small.has-label .label { padding: 0 var(--pc-spacing-s); } .button.size-medium.has-label .label { padding: 0 var(--pc-spacing-m); } .button.size-large.has-label .label { padding: 0 var(--pc-spacing-l); } .button.has-prefix.has-label .label { padding-left: var(--pc-spacing-s); } .button.has-suffix.has-label .label { padding-right: var(--pc-spacing-s); } .button.size-small { font-size: var(--pc-button-font-size-s); line-height: calc( var(--pc-input-height-s) - var(--pc-input-border-width) * 2 ); } .button.size-medium { min-height: var(--pc-input-height-m); font-size: var(--pc-button-font-size-m); line-height: calc( var(--pc-input-height-m) - var(--pc-input-border-width) * 2 ); } .button.size-large { font-size: var(--pc-button-font-size-l); line-height: calc( var(--pc-input-height-l) - var(--pc-input-border-width) * 2 ); } .button.outlined, .button.outlined:hover, .button.outlined:hover:active { background: transparent !important; } .button.pill { border-radius: var(--pc-border-radius-pill); } :host( [data-pc-button-group-button-first]:not( [data-pc-button-group-button-last] ) ) .button { border-start-end-radius: 0; border-end-end-radius: 0; } :host([data-pc-button-group-button-inner]) .button { border-radius: 0; } :host( [data-pc-button-group-button-last]:not( [data-pc-button-group-button-first] ) ) .button { border-start-start-radius: 0; border-end-start-radius: 0; } :host( [data-pc-button-group-button]:not( [data-pc-button-group-button-first] ) ) { margin-inline-start: calc(-1 * var(--pc-input-border-width)); } :host( [data-pc-button-group-button]:not( [data-pc-button-group-button-first], [data-pc-button-group-button-radio], [appearance=\"default\"] ):not(:hover) ) .button::after { content: \"\"; position: absolute; top: 0; inset-inline-start: 0; bottom: 0; border-left: 1px solid rgba(112, 120, 128, 0.33); mix-blend-mode: multiply; } :host([data-pc-button-group-button-hover]) { z-index: 1; } :host([data-pc-button-group-button-focus]), :host([data-pc-button-group-button][checked]) { z-index: 2; } `"
                }
            ],
            "exports": [
                {
                    "kind": "js",
                    "name": "styles",
                    "declaration": {
                        "name": "styles",
                        "module": "src/components/button/button.styles.ts"
                    }
                }
            ]
        },
        {
            "kind": "javascript-module",
            "path": "src/components/button/button.ts",
            "declarations": [],
            "exports": [
                {
                    "kind": "js",
                    "name": "*",
                    "declaration": {
                        "name": "*",
                        "package": "\"./button.component.js\""
                    }
                },
                {
                    "kind": "js",
                    "name": "default",
                    "declaration": {
                        "name": "PcButton",
                        "module": "src/components/button/button.ts"
                    }
                }
            ]
        },
        {
            "kind": "javascript-module",
            "path": "src/components/checkbox/checkbox.component.ts",
            "declarations": [
                {
                    "kind": "class",
                    "description": "",
                    "name": "PcCheckbox",
                    "members": [
                        {
                            "kind": "field",
                            "name": "dependencies",
                            "type": {
                                "text": "object"
                            },
                            "static": true,
                            "default": "{ \"pc-icon\": PcIcon }"
                        },
                        {
                            "kind": "field",
                            "name": "formControlController",
                            "privacy": "private",
                            "readonly": true,
                            "default": "new FormControlController(this, { value: (control: PcCheckbox) => control.checked ? control.value || \"on\" : undefined, defaultValue: (control: PcCheckbox) => control.defaultChecked, setValue: (control: PcCheckbox, checked: boolean) => (control.checked = checked), })"
                        },
                        {
                            "kind": "field",
                            "name": "hasSlotController",
                            "privacy": "private",
                            "readonly": true,
                            "default": "new HasSlotController(this, \"hint\")"
                        },
                        {
                            "kind": "field",
                            "name": "input",
                            "type": {
                                "text": "HTMLInputElement"
                            }
                        },
                        {
                            "kind": "field",
                            "name": "hasFocus",
                            "type": {
                                "text": "boolean"
                            },
                            "privacy": "private",
                            "default": "false"
                        },
                        {
                            "kind": "field",
                            "name": "isFadingOut",
                            "type": {
                                "text": "boolean"
                            },
                            "privacy": "private",
                            "default": "false"
                        },
                        {
                            "kind": "field",
                            "name": "checked",
                            "type": {
                                "text": "boolean"
                            },
                            "default": "false",
                            "attribute": "checked",
                            "reflects": true
                        },
                        {
                            "kind": "field",
                            "name": "defaultChecked",
                            "type": {
                                "text": "boolean"
                            },
                            "default": "false"
                        },
                        {
                            "kind": "field",
                            "name": "disabled",
                            "type": {
                                "text": "boolean"
                            },
                            "default": "false",
                            "attribute": "disabled",
                            "reflects": true
                        },
                        {
                            "kind": "field",
                            "name": "form",
                            "type": {
                                "text": "string"
                            },
                            "default": "\"\"",
                            "attribute": "form",
                            "reflects": true
                        },
                        {
                            "kind": "field",
                            "name": "hint",
                            "type": {
                                "text": "string"
                            },
                            "default": "\"\"",
                            "attribute": "hint"
                        },
                        {
                            "kind": "field",
                            "name": "indeterminate",
                            "type": {
                                "text": "boolean"
                            },
                            "default": "false",
                            "attribute": "indeterminate",
                            "reflects": true
                        },
                        {
                            "kind": "field",
                            "name": "invalid",
                            "type": {
                                "text": "boolean"
                            },
                            "default": "false",
                            "attribute": "invalid",
                            "reflects": true
                        },
                        {
                            "kind": "field",
                            "name": "name",
                            "type": {
                                "text": "string"
                            },
                            "default": "\"\"",
                            "attribute": "name"
                        },
                        {
                            "kind": "field",
                            "name": "pressed",
                            "type": {
                                "text": "boolean"
                            },
                            "default": "false",
                            "attribute": "pressed",
                            "reflects": true
                        },
                        {
                            "kind": "field",
                            "name": "required",
                            "type": {
                                "text": "boolean"
                            },
                            "default": "false",
                            "attribute": "required"
                        },
                        {
                            "kind": "field",
                            "name": "size",
                            "type": {
                                "text": "\"small\" | \"medium\" | \"large\""
                            },
                            "default": "\"medium\"",
                            "attribute": "size",
                            "reflects": true
                        },
                        {
                            "kind": "field",
                            "name": "title",
                            "type": {
                                "text": "string"
                            },
                            "default": "\"\"",
                            "attribute": "title"
                        },
                        {
                            "kind": "field",
                            "name": "value",
                            "type": {
                                "text": "string"
                            },
                            "default": "\"\"",
                            "attribute": "value"
                        },
                        {
                            "kind": "field",
                            "name": "validity",
                            "readonly": true
                        },
                        {
                            "kind": "field",
                            "name": "validationMessage",
                            "readonly": true
                        },
                        {
                            "kind": "method",
                            "name": "handleClick",
                            "privacy": "private"
                        },
                        {
                            "kind": "method",
                            "name": "handleFocus",
                            "privacy": "private"
                        },
                        {
                            "kind": "method",
                            "name": "handleBlur",
                            "privacy": "private"
                        },
                        {
                            "kind": "method",
                            "name": "handleInput",
                            "privacy": "private"
                        },
                        {
                            "kind": "method",
                            "name": "handleInvalid",
                            "privacy": "private",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": {
                                        "text": "Event"
                                    }
                                }
                            ]
                        },
                        {
                            "kind": "method",
                            "name": "handleDisabledChange"
                        },
                        {
                            "kind": "method",
                            "name": "handleStateChange"
                        },
                        {
                            "kind": "method",
                            "name": "click"
                        },
                        {
                            "kind": "method",
                            "name": "focus",
                            "parameters": [
                                {
                                    "name": "options",
                                    "optional": true,
                                    "type": {
                                        "text": "FocusOptions"
                                    }
                                }
                            ]
                        },
                        {
                            "kind": "method",
                            "name": "blur"
                        },
                        {
                            "kind": "method",
                            "name": "checkValidity"
                        },
                        {
                            "kind": "method",
                            "name": "getForm",
                            "return": {
                                "type": {
                                    "text": "HTMLFormElement | null"
                                }
                            }
                        },
                        {
                            "kind": "method",
                            "name": "reportValidity"
                        },
                        {
                            "kind": "method",
                            "name": "setCustomValidity",
                            "parameters": [
                                {
                                    "name": "message",
                                    "type": {
                                        "text": "string"
                                    }
                                }
                            ]
                        }
                    ],
                    "attributes": [
                        {
                            "name": "checked",
                            "type": {
                                "text": "boolean"
                            },
                            "default": "false",
                            "fieldName": "checked"
                        },
                        {
                            "name": "disabled",
                            "type": {
                                "text": "boolean"
                            },
                            "default": "false",
                            "fieldName": "disabled"
                        },
                        {
                            "name": "form",
                            "type": {
                                "text": "string"
                            },
                            "default": "\"\"",
                            "fieldName": "form"
                        },
                        {
                            "name": "hint",
                            "type": {
                                "text": "string"
                            },
                            "default": "\"\"",
                            "fieldName": "hint"
                        },
                        {
                            "name": "indeterminate",
                            "type": {
                                "text": "boolean"
                            },
                            "default": "false",
                            "fieldName": "indeterminate"
                        },
                        {
                            "name": "invalid",
                            "type": {
                                "text": "boolean"
                            },
                            "default": "false",
                            "fieldName": "invalid"
                        },
                        {
                            "name": "name",
                            "type": {
                                "text": "string"
                            },
                            "default": "\"\"",
                            "fieldName": "name"
                        },
                        {
                            "name": "pressed",
                            "type": {
                                "text": "boolean"
                            },
                            "default": "false",
                            "fieldName": "pressed"
                        },
                        {
                            "name": "required",
                            "type": {
                                "text": "boolean"
                            },
                            "default": "false",
                            "fieldName": "required"
                        },
                        {
                            "name": "size",
                            "type": {
                                "text": "\"small\" | \"medium\" | \"large\""
                            },
                            "default": "\"medium\"",
                            "fieldName": "size"
                        },
                        {
                            "name": "title",
                            "type": {
                                "text": "string"
                            },
                            "default": "\"\"",
                            "fieldName": "title"
                        },
                        {
                            "name": "value",
                            "type": {
                                "text": "string"
                            },
                            "default": "\"\"",
                            "fieldName": "value"
                        }
                    ],
                    "superclass": {
                        "name": "LitElement",
                        "package": "lit"
                    },
                    "tagName": "pc-checkbox",
                    "customElement": true
                }
            ],
            "exports": [
                {
                    "kind": "js",
                    "name": "PcCheckbox",
                    "declaration": {
                        "name": "PcCheckbox",
                        "module": "src/components/checkbox/checkbox.component.ts"
                    }
                },
                {
                    "kind": "custom-element-definition",
                    "name": "pc-checkbox",
                    "declaration": {
                        "name": "PcCheckbox",
                        "module": "src/components/checkbox/checkbox.component.ts"
                    }
                }
            ]
        },
        {
            "kind": "javascript-module",
            "path": "src/components/checkbox/Checkbox.stories.ts",
            "declarations": [
                {
                    "kind": "variable",
                    "name": "meta",
                    "type": {
                        "text": "Meta"
                    },
                    "default": "{ title: \"Components/Checkbox\", component: \"pc-checkbox\", argTypes: { checked: { control: \"boolean\" }, defaultChecked: { control: \"boolean\" }, disabled: { control: \"boolean\" }, hint: { control: \"text\" }, indeterminate: { control: \"boolean\" }, invalid: { control: \"boolean\" }, label: { control: \"text\" }, name: { control: \"text\" }, pressed: { control: \"boolean\" }, required: { control: \"boolean\" }, size: { control: \"select\", options: [\"small\", \"medium\", \"large\"], }, title: { control: \"text\" }, value: { control: \"text\" }, }, args: { checked: false, defaultChecked: false, disabled: false, hint: \"\", indeterminate: false, invalid: false, label: \"Checkbox\", name: \"\", pressed: false, required: false, size: \"medium\", title: \"\", value: \"\", }, }"
                },
                {
                    "kind": "variable",
                    "name": "Default",
                    "type": {
                        "text": "Story"
                    },
                    "default": "{ render: ({ checked, defaultChecked, disabled, hint, indeterminate, invalid, label, name, pressed, required, size, title, value, }) => html` <pc-checkbox ?checked=${checked} ?defaultChecked=${defaultChecked} ?disabled=${disabled} hint=${hint} ?indeterminate=${indeterminate} ?invalid=${invalid} name=${name} ?pressed=${pressed} ?required=${required} size=${size} title=${title} value=${value} > ${label} </pc-checkbox> `, }"
                },
                {
                    "kind": "variable",
                    "name": "Checked",
                    "type": {
                        "text": "Story"
                    },
                    "default": "{ args: { checked: true, defaultChecked: false, disabled: false, hint: \"\", indeterminate: false, invalid: false, label: \"Checked\", name: \"\", pressed: false, required: false, size: \"medium\", title: \"\", value: \"\", }, render: ({ checked, defaultChecked, disabled, hint, indeterminate, invalid, label, name, pressed, required, size, title, value, }) => html` <pc-checkbox ?checked=${checked} ?defaultChecked=${defaultChecked} ?disabled=${disabled} hint=${hint} ?indeterminate=${indeterminate} ?invalid=${invalid} name=${name} ?pressed=${pressed} ?required=${required} size=${size} title=${title} value=${value} > ${label} </pc-checkbox> `, }"
                },
                {
                    "kind": "variable",
                    "name": "Indeterminate",
                    "type": {
                        "text": "Story"
                    },
                    "default": "{ args: { checked: false, defaultChecked: false, disabled: false, hint: \"\", indeterminate: true, invalid: false, label: \"Indeterminate\", name: \"\", pressed: false, required: false, size: \"medium\", title: \"\", value: \"\", }, render: ({ checked, defaultChecked, disabled, hint, indeterminate, invalid, label, name, pressed, required, size, title, value, }) => html` <pc-checkbox ?checked=${checked} ?defaultChecked=${defaultChecked} ?disabled=${disabled} hint=${hint} ?indeterminate=${indeterminate} ?invalid=${invalid} name=${name} ?pressed=${pressed} ?required=${required} size=${size} title=${title} value=${value} > ${label} </pc-checkbox> `, }"
                },
                {
                    "kind": "variable",
                    "name": "Hint",
                    "type": {
                        "text": "Story"
                    },
                    "default": "{ args: { checked: false, defaultChecked: false, disabled: false, hint: \"What does this checkbox do?\", indeterminate: false, invalid: false, label: \"Checkbox with hint\", name: \"\", pressed: false, required: false, size: \"medium\", title: \"\", value: \"\", }, render: ({ checked, defaultChecked, disabled, hint, indeterminate, invalid, label, name, pressed, required, size, title, value, }) => html` <pc-checkbox ?checked=${checked} ?defaultChecked=${defaultChecked} ?disabled=${disabled} hint=${hint} ?indeterminate=${indeterminate} ?invalid=${invalid} name=${name} ?pressed=${pressed} ?required=${required} size=${size} title=${title} value=${value} > ${label} </pc-checkbox> `, }"
                },
                {
                    "kind": "variable",
                    "name": "Disabled",
                    "type": {
                        "text": "Story"
                    },
                    "default": "{ args: { checked: false, defaultChecked: false, disabled: true, hint: \"\", indeterminate: false, invalid: false, label: \"Disabled\", name: \"\", pressed: false, required: false, size: \"medium\", title: \"\", value: \"\", }, render: ({ checked, defaultChecked, disabled, hint, indeterminate, invalid, label, name, pressed, required, size, title, value, }) => html` <pc-checkbox ?checked=${checked} ?defaultChecked=${defaultChecked} ?disabled=${disabled} hint=${hint} ?indeterminate=${indeterminate} ?invalid=${invalid} name=${name} ?pressed=${pressed} ?required=${required} size=${size} title=${title} value=${value} > ${label} </pc-checkbox> `, }"
                },
                {
                    "kind": "variable",
                    "name": "Large",
                    "type": {
                        "text": "Story"
                    },
                    "default": "{ args: { checked: false, defaultChecked: false, disabled: false, hint: \"\", indeterminate: false, invalid: false, label: \"Large\", name: \"\", pressed: false, required: false, size: \"large\", title: \"\", value: \"\", }, render: ({ checked, defaultChecked, disabled, hint, indeterminate, invalid, label, name, pressed, required, size, title, value, }) => html` <pc-checkbox ?checked=${checked} ?defaultChecked=${defaultChecked} ?disabled=${disabled} hint=${hint} ?indeterminate=${indeterminate} ?invalid=${invalid} name=${name} ?pressed=${pressed} ?required=${required} size=${size} title=${title} value=${value} > ${label} </pc-checkbox> `, }"
                },
                {
                    "kind": "variable",
                    "name": "Small",
                    "type": {
                        "text": "Story"
                    },
                    "default": "{ args: { checked: false, defaultChecked: false, disabled: false, hint: \"\", indeterminate: false, invalid: false, label: \"Small\", name: \"\", pressed: false, required: false, size: \"small\", title: \"\", value: \"\", }, render: ({ checked, defaultChecked, disabled, hint, indeterminate, invalid, label, name, pressed, required, size, title, value, }) => html` <pc-checkbox ?checked=${checked} ?defaultChecked=${defaultChecked} ?disabled=${disabled} hint=${hint} ?indeterminate=${indeterminate} ?invalid=${invalid} name=${name} ?pressed=${pressed} ?required=${required} size=${size} title=${title} value=${value} > ${label} </pc-checkbox> `, }"
                }
            ],
            "exports": [
                {
                    "kind": "js",
                    "name": "default",
                    "declaration": {
                        "name": "meta",
                        "module": "src/components/checkbox/Checkbox.stories.ts"
                    }
                },
                {
                    "kind": "js",
                    "name": "Default",
                    "declaration": {
                        "name": "Default",
                        "module": "src/components/checkbox/Checkbox.stories.ts"
                    }
                },
                {
                    "kind": "js",
                    "name": "Checked",
                    "declaration": {
                        "name": "Checked",
                        "module": "src/components/checkbox/Checkbox.stories.ts"
                    }
                },
                {
                    "kind": "js",
                    "name": "Indeterminate",
                    "declaration": {
                        "name": "Indeterminate",
                        "module": "src/components/checkbox/Checkbox.stories.ts"
                    }
                },
                {
                    "kind": "js",
                    "name": "Hint",
                    "declaration": {
                        "name": "Hint",
                        "module": "src/components/checkbox/Checkbox.stories.ts"
                    }
                },
                {
                    "kind": "js",
                    "name": "Disabled",
                    "declaration": {
                        "name": "Disabled",
                        "module": "src/components/checkbox/Checkbox.stories.ts"
                    }
                },
                {
                    "kind": "js",
                    "name": "Large",
                    "declaration": {
                        "name": "Large",
                        "module": "src/components/checkbox/Checkbox.stories.ts"
                    }
                },
                {
                    "kind": "js",
                    "name": "Small",
                    "declaration": {
                        "name": "Small",
                        "module": "src/components/checkbox/Checkbox.stories.ts"
                    }
                }
            ]
        },
        {
            "kind": "javascript-module",
            "path": "src/components/checkbox/checkbox.styles.ts",
            "declarations": [
                {
                    "kind": "variable",
                    "name": "styles",
                    "default": "css` :host { display: inline-block; } .checkbox { display: inline-flex; align-items: flex-start; position: relative; font-family: var(--pc-input-font-family); font-weight: var(--pc-input-font-weight); color: var(--pc-input-label-color); vertical-align: middle; cursor: pointer; } .size-small { --toggle-size: var(--pc-toggle-size-s); font-size: var(--pc-input-font-size-s); } .size-medium { --toggle-size: var(--pc-toggle-size-m); font-size: var(--pc-input-font-size-m); } .size-large { --toggle-size: var(--pc-toggle-size-l); font-size: var(--pc-input-font-size-l); } .checkbox-control { display: inline-flex; align-items: center; justify-content: center; flex: 0 0 auto; position: relative; width: var(--toggle-size); height: var(--toggle-size); border: var(--pc-input-border-width) solid var(--pc-input-border-color); border-radius: var(--pc-input-border-radius-s); background-color: transparent; color: var(--pc-color-neutral-0); transition: all var(--pc-transition-fast) ease-in-out; } .checkbox-control pc-icon { opacity: 0; visibility: hidden; transition: opacity var(--pc-transition-fast) ease-in-out, visibility var(--pc-transition-fast) ease-in-out; } .is-checked .checkbox-control pc-icon, .is-indeterminate .checkbox-control pc-icon { opacity: 1; visibility: visible; } .is-checked:not(.is-fading-out) .checkbox-control pc-icon { opacity: 1; visibility: visible; } .is-fading-out .checkbox-control pc-icon { opacity: 0; visibility: hidden; } .checkbox-input { position: absolute; margin: 0; padding: 0; opacity: 0; pointer-events: none; } pc-icon { display: inline-flex; width: calc(var(--toggle-size) / 1.25); height: calc(var(--toggle-size) / 1.25); transition: all var(--pc-transition-fast) ease-in-out; } .checkbox:not(.is-checked):not(.is-disabled) .checkbox-control:hover { border-color: var(--pc-input-border-color-hover); } .checkbox:not(.is-checked):not(.is-disabled) .checkbox-control:hover:active { border-color: var(--pc-input-border-color-active); } .checkbox:not(.is-checked):not(.is-disabled) .checkbox-input:focus-visible ~ .checkbox-control { outline: var(--pc-focus-ring); outline-offset: var(--pc-focus-ring-offset); } .is-checked .checkbox-control, .is-indeterminate .checkbox-control { border-color: var(--pc-color-primary-500); background-color: var(--pc-color-primary-500); } .checkbox.is-checked:not(.is-disabled) .checkbox-control:hover, .checkbox.is-indeterminate:not(.is-disabled) .checkbox-control:hover { border-color: var(--pc-color-primary-600); background-color: var(--pc-color-primary-600); } .checkbox.is-checked:not(.is-disabled) .checkbox-control:hover:active, .checkbox.is-indeterminate:not(.is-disabled) .checkbox-control:hover:active { border-color: var(--pc-color-primary-400); background-color: var(--pc-color-primary-400); } .checkbox.is-checked:not(.is-disabled) .checkbox-input:focus-visible ~ .checkbox-control, .checkbox.is-indeterminate:not(.is-disabled) .checkbox-input:focus-visible ~ .checkbox-control { outline: var(--pc-focus-ring); outline-offset: var(--pc-focus-ring-offset); } .is-disabled { opacity: 0.6; cursor: not-allowed; } .label { display: inline-block; color: var(--pc-input-label-color); line-height: var(--toggle-size); margin-inline-start: var(--pc-spacing-s); user-select: none; -webkit-user-select: none; transition: color var(--pc-transition-fast) ease-in-out; } :host([required]) .label::after { content: var(--pc-input-required-content); color: var(--pc-input-required-content-color); margn-inline-start: var(--pc-input-required-content-offset); } .hint { color: var(--pc-input-hint-text-color); font-family: var(--pc-input-font-family); } `"
                }
            ],
            "exports": [
                {
                    "kind": "js",
                    "name": "styles",
                    "declaration": {
                        "name": "styles",
                        "module": "src/components/checkbox/checkbox.styles.ts"
                    }
                }
            ]
        },
        {
            "kind": "javascript-module",
            "path": "src/components/checkbox/checkbox.ts",
            "declarations": [],
            "exports": [
                {
                    "kind": "js",
                    "name": "*",
                    "declaration": {
                        "name": "*",
                        "package": "\"./checkbox.component.js\""
                    }
                },
                {
                    "kind": "js",
                    "name": "default",
                    "declaration": {
                        "name": "PcCheckbox",
                        "module": "src/components/checkbox/checkbox.ts"
                    }
                }
            ]
        },
        {
            "kind": "javascript-module",
            "path": "src/components/card/card.component.ts",
            "declarations": [
                {
                    "kind": "class",
                    "description": "",
                    "name": "PcCard",
                    "members": [
                        {
                            "kind": "field",
                            "name": "hasSlotController",
                            "privacy": "private",
                            "readonly": true,
                            "default": "new HasSlotController( this, \"image\", \"header\", \"footer\" )"
                        }
                    ],
                    "superclass": {
                        "name": "LitElement",
                        "package": "lit"
                    },
                    "tagName": "pc-card",
                    "customElement": true
                }
            ],
            "exports": [
                {
                    "kind": "js",
                    "name": "PcCard",
                    "declaration": {
                        "name": "PcCard",
                        "module": "src/components/card/card.component.ts"
                    }
                },
                {
                    "kind": "custom-element-definition",
                    "name": "pc-card",
                    "declaration": {
                        "name": "PcCard",
                        "module": "src/components/card/card.component.ts"
                    }
                }
            ]
        },
        {
            "kind": "javascript-module",
            "path": "src/components/card/card.styles.ts",
            "declarations": [
                {
                    "kind": "variable",
                    "name": "styles",
                    "default": "css` :host { --border-color: var(--pc-color-neutral-200); --border-radius: var(--pc-border-radius-l); --border-width: 1px; --padding: var(--pc-spacing-l); display: inline-block; } .card { display: flex; flex-direction: column; background-color: var(--pc-panel-background-color); border: var(--border-width) solid var(--border-color); border-radius: var(--border-radius); box-shadow: var(--pc-shadow-l); } .image { display: flex; border-radius: var(--border-radius) var(--border-radius) 0 0; margin: calc(-1 * var(--border-width)); overflow: hidden; } .image::slotted(img) { display: block; width: 100%; } .card:not(.has-image) .image { display: none; } .header { display: block; border-bottom: var(--border-width) solid var(--border-color); padding: calc(var(--padding) / 2) var(--padding); } .card:not(.has-header) .header { display: none; } .body { display: block; padding: var(--padding); } .has-footer .footer { display: block; border-top: var(--border-width) solid var(--border-color); padding: var(--padding); } .card:not(.has-footer) .footer { display: none; } `"
                }
            ],
            "exports": [
                {
                    "kind": "js",
                    "name": "styles",
                    "declaration": {
                        "name": "styles",
                        "module": "src/components/card/card.styles.ts"
                    }
                }
            ]
        },
        {
            "kind": "javascript-module",
            "path": "src/components/card/card.ts",
            "declarations": [],
            "exports": [
                {
                    "kind": "js",
                    "name": "*",
                    "declaration": {
                        "name": "*",
                        "package": "\"./card.component.js\""
                    }
                },
                {
                    "kind": "js",
                    "name": "default",
                    "declaration": {
                        "name": "PcCard",
                        "module": "src/components/card/card.ts"
                    }
                }
            ]
        },
        {
            "kind": "javascript-module",
            "path": "src/components/icon/icon.component.ts",
            "declarations": [
                {
                    "kind": "class",
                    "description": "",
                    "name": "PcIcon",
                    "members": [
                        {
                            "kind": "field",
                            "name": "initialRender",
                            "type": {
                                "text": "boolean"
                            },
                            "privacy": "private",
                            "default": "false"
                        },
                        {
                            "kind": "method",
                            "name": "resolveIcon",
                            "privacy": "private",
                            "return": {
                                "type": {
                                    "text": "Promise<SVGResult>"
                                }
                            },
                            "parameters": [
                                {
                                    "name": "url",
                                    "type": {
                                        "text": "string"
                                    }
                                },
                                {
                                    "name": "library",
                                    "optional": true,
                                    "type": {
                                        "text": "IconLibrary"
                                    }
                                }
                            ]
                        },
                        {
                            "kind": "field",
                            "name": "svg",
                            "type": {
                                "text": "SVGElement | HTMLTemplateResult | null"
                            },
                            "privacy": "private",
                            "default": "null"
                        },
                        {
                            "kind": "field",
                            "name": "iconStyle",
                            "type": {
                                "text": "string | undefined"
                            },
                            "attribute": "iconStyle",
                            "reflects": true
                        },
                        {
                            "kind": "field",
                            "name": "label",
                            "type": {
                                "text": "string"
                            },
                            "default": "\"\"",
                            "attribute": "label"
                        },
                        {
                            "kind": "field",
                            "name": "library",
                            "type": {
                                "text": "string"
                            },
                            "default": "\"default\"",
                            "attribute": "library",
                            "reflects": true
                        },
                        {
                            "kind": "field",
                            "name": "name",
                            "type": {
                                "text": "string | undefined"
                            },
                            "attribute": "name",
                            "reflects": true
                        },
                        {
                            "kind": "field",
                            "name": "src",
                            "type": {
                                "text": "string | undefined"
                            },
                            "attribute": "src"
                        },
                        {
                            "kind": "method",
                            "name": "getIconSource",
                            "privacy": "private",
                            "return": {
                                "type": {
                                    "text": "IconSource"
                                }
                            }
                        },
                        {
                            "kind": "method",
                            "name": "handleLabelChange"
                        },
                        {
                            "kind": "method",
                            "name": "setIcon"
                        }
                    ],
                    "attributes": [
                        {
                            "name": "iconStyle",
                            "type": {
                                "text": "string | undefined"
                            },
                            "fieldName": "iconStyle"
                        },
                        {
                            "name": "label",
                            "type": {
                                "text": "string"
                            },
                            "default": "\"\"",
                            "fieldName": "label"
                        },
                        {
                            "name": "library",
                            "type": {
                                "text": "string"
                            },
                            "default": "\"default\"",
                            "fieldName": "library"
                        },
                        {
                            "name": "name",
                            "type": {
                                "text": "string | undefined"
                            },
                            "fieldName": "name"
                        },
                        {
                            "name": "src",
                            "type": {
                                "text": "string | undefined"
                            },
                            "fieldName": "src"
                        }
                    ],
                    "superclass": {
                        "name": "LitElement",
                        "package": "lit"
                    },
                    "tagName": "pc-icon",
                    "customElement": true
                }
            ],
            "exports": [
                {
                    "kind": "js",
                    "name": "PcIcon",
                    "declaration": {
                        "name": "PcIcon",
                        "module": "src/components/icon/icon.component.ts"
                    }
                },
                {
                    "kind": "custom-element-definition",
                    "name": "pc-icon",
                    "declaration": {
                        "name": "PcIcon",
                        "module": "src/components/icon/icon.component.ts"
                    }
                }
            ]
        },
        {
            "kind": "javascript-module",
            "path": "src/components/icon/Icon.stories.ts",
            "declarations": [
                {
                    "kind": "variable",
                    "name": "meta",
                    "type": {
                        "text": "Meta"
                    },
                    "default": "{ title: \"Components/Icon\", component: \"pc-icon\", argTypes: { iconStyle: { control: \"select\", options: [\"solid\", \"regular\", \"brands\"], }, label: { control: \"text\" }, library: { control: \"text\" }, name: { control: \"text\" }, src: { control: \"file\" }, // CSS styles fontSize: { control: \"text\" }, color: { control: \"color\" }, }, args: { iconStyle: \"solid\", label: \"An icon\", library: \"default\", name: \"house\", src: undefined, // CSS styles fontSize: \"1rem\", color: \"var(--pc-color-neutral-1000)\", }, }"
                },
                {
                    "kind": "variable",
                    "name": "Default",
                    "type": {
                        "text": "Story"
                    },
                    "default": "{ render: ({ iconStyle, label, library, name, src, fontSize, color }) => html` <pc-icon library=${library} iconStyle=${iconStyle} name=${name} src=${src} label=${label} style=\"display: inline-flex; font-size: ${fontSize}; color: ${color}\" ></pc-icon> `, }"
                },
                {
                    "kind": "variable",
                    "name": "Colour",
                    "type": {
                        "text": "Story"
                    },
                    "default": "{ args: { iconStyle: \"solid\", label: \"A coloured icon\", library: \"default\", name: \"battery-three-quarters\", fontSize: \"1rem\", color: \"var(--pc-color-success-500)\", }, render: ({ iconStyle, label, library, name, src, fontSize, color }) => html` <pc-icon library=${library} iconStyle=${iconStyle} name=${name} src=${src} label=${label} style=\"display: inline-flex; font-size: ${fontSize}; color: ${color}\" ></pc-icon> `, }"
                },
                {
                    "kind": "variable",
                    "name": "Sizing",
                    "type": {
                        "text": "Story"
                    },
                    "default": "{ args: { iconStyle: \"solid\", label: \"A large icon\", library: \"default\", name: \"house\", fontSize: \"5rem\", color: \"var(--pc-color-neutral-1000)\", }, render: ({ iconStyle, label, library, name, src, fontSize, color }) => html` <pc-icon library=${library} iconStyle=${iconStyle} name=${name} src=${src} label=${label} style=\"display: inline-flex; font-size: ${fontSize}; color: ${color}\" ></pc-icon> `, }"
                },
                {
                    "kind": "variable",
                    "name": "Label",
                    "type": {
                        "text": "Story"
                    },
                    "default": "{ args: { iconStyle: \"solid\", label: \"Add to favourites\", library: \"default\", name: \"star\", fontSize: \"1rem\", color: \"var(--pc-color-amber-500)\", }, render: ({ iconStyle, label, library, name, src, fontSize, color }) => html` <pc-icon library=${library} iconStyle=${iconStyle} name=${name} src=${src} label=${label} style=\"display: inline-flex; font-size: ${fontSize}; color: ${color}\" ></pc-icon> `, }"
                },
                {
                    "kind": "variable",
                    "name": "Custom",
                    "type": {
                        "text": "Story"
                    },
                    "default": "{ args: { iconStyle: undefined, label: \"A custom icon of an epic awesome face\", library: undefined, name: undefined, src: \"/face-awesome.svg\", fontSize: \"1rem\", color: undefined, }, render: ({ iconStyle, label, library, name, src, fontSize, color }) => html` <pc-icon library=${library} iconStyle=${iconStyle} name=${name} src=${src} label=${label} style=\"display: inline-flex; font-size: ${fontSize}; color: ${color}\" ></pc-icon> `, }"
                }
            ],
            "exports": [
                {
                    "kind": "js",
                    "name": "default",
                    "declaration": {
                        "name": "meta",
                        "module": "src/components/icon/Icon.stories.ts"
                    }
                },
                {
                    "kind": "js",
                    "name": "Default",
                    "declaration": {
                        "name": "Default",
                        "module": "src/components/icon/Icon.stories.ts"
                    }
                },
                {
                    "kind": "js",
                    "name": "Colour",
                    "declaration": {
                        "name": "Colour",
                        "module": "src/components/icon/Icon.stories.ts"
                    }
                },
                {
                    "kind": "js",
                    "name": "Sizing",
                    "declaration": {
                        "name": "Sizing",
                        "module": "src/components/icon/Icon.stories.ts"
                    }
                },
                {
                    "kind": "js",
                    "name": "Label",
                    "declaration": {
                        "name": "Label",
                        "module": "src/components/icon/Icon.stories.ts"
                    }
                },
                {
                    "kind": "js",
                    "name": "Custom",
                    "declaration": {
                        "name": "Custom",
                        "module": "src/components/icon/Icon.stories.ts"
                    }
                }
            ]
        },
        {
            "kind": "javascript-module",
            "path": "src/components/icon/icon.styles.ts",
            "declarations": [
                {
                    "kind": "variable",
                    "name": "styles",
                    "default": "css` :host { display: inline-block; box-sizing: content-box !important; width: 1em; height: 1em; } svg { display: block; width: 100%; height: 100%; fill: currentColor; } `"
                }
            ],
            "exports": [
                {
                    "kind": "js",
                    "name": "styles",
                    "declaration": {
                        "name": "styles",
                        "module": "src/components/icon/icon.styles.ts"
                    }
                }
            ]
        },
        {
            "kind": "javascript-module",
            "path": "src/components/icon/icon.ts",
            "declarations": [],
            "exports": [
                {
                    "kind": "js",
                    "name": "*",
                    "declaration": {
                        "name": "*",
                        "package": "\"./icon.component.js\""
                    }
                },
                {
                    "kind": "js",
                    "name": "default",
                    "declaration": {
                        "name": "PcIcon",
                        "module": "src/components/icon/icon.ts"
                    }
                }
            ]
        },
        {
            "kind": "javascript-module",
            "path": "src/components/icon/library.default.ts",
            "declarations": [
                {
                    "kind": "variable",
                    "name": "library",
                    "type": {
                        "text": "IconLibrary"
                    },
                    "default": "{ name: \"default\", resolver: (name, iconStyle = \"solid\") => { return `https://use.fontawesome.com/releases/v6.7.2/svgs/${iconStyle}/${name}.svg`; }, }"
                }
            ],
            "exports": [
                {
                    "kind": "js",
                    "name": "default",
                    "declaration": {
                        "name": "library",
                        "module": "src/components/icon/library.default.ts"
                    }
                }
            ]
        },
        {
            "kind": "javascript-module",
            "path": "src/components/icon/library.ts",
            "declarations": [
                {
                    "kind": "function",
                    "name": "watchIcon",
                    "parameters": [
                        {
                            "name": "icon",
                            "type": {
                                "text": "PcIcon"
                            }
                        }
                    ]
                },
                {
                    "kind": "function",
                    "name": "unwatchIcon",
                    "parameters": [
                        {
                            "name": "icon",
                            "type": {
                                "text": "PcIcon"
                            }
                        }
                    ]
                },
                {
                    "kind": "function",
                    "name": "getIconLibrary",
                    "parameters": [
                        {
                            "name": "name",
                            "optional": true,
                            "type": {
                                "text": "string"
                            }
                        }
                    ]
                },
                {
                    "kind": "function",
                    "name": "registerIconLibrary",
                    "parameters": [
                        {
                            "name": "name",
                            "type": {
                                "text": "string"
                            }
                        },
                        {
                            "name": "options",
                            "type": {
                                "text": "Omit<IconLibrary, \"name\">"
                            }
                        }
                    ]
                },
                {
                    "kind": "function",
                    "name": "unregisterIconLibrary",
                    "parameters": [
                        {
                            "name": "name",
                            "type": {
                                "text": "string"
                            }
                        }
                    ]
                }
            ],
            "exports": [
                {
                    "kind": "js",
                    "name": "watchIcon",
                    "declaration": {
                        "name": "watchIcon",
                        "module": "src/components/icon/library.ts"
                    }
                },
                {
                    "kind": "js",
                    "name": "unwatchIcon",
                    "declaration": {
                        "name": "unwatchIcon",
                        "module": "src/components/icon/library.ts"
                    }
                },
                {
                    "kind": "js",
                    "name": "getIconLibrary",
                    "declaration": {
                        "name": "getIconLibrary",
                        "module": "src/components/icon/library.ts"
                    }
                },
                {
                    "kind": "js",
                    "name": "registerIconLibrary",
                    "declaration": {
                        "name": "registerIconLibrary",
                        "module": "src/components/icon/library.ts"
                    }
                },
                {
                    "kind": "js",
                    "name": "unregisterIconLibrary",
                    "declaration": {
                        "name": "unregisterIconLibrary",
                        "module": "src/components/icon/library.ts"
                    }
                }
            ]
        },
        {
            "kind": "javascript-module",
            "path": "src/components/qr-code/qr-code.component.ts",
            "declarations": [
                {
                    "kind": "class",
                    "description": "",
                    "name": "PcQrCode",
                    "members": [
                        {
                            "kind": "field",
                            "name": "canvas",
                            "type": {
                                "text": "HTMLElement"
                            }
                        },
                        {
                            "kind": "field",
                            "name": "background",
                            "type": {
                                "text": "string"
                            },
                            "default": "\"white\"",
                            "attribute": "background"
                        },
                        {
                            "kind": "field",
                            "name": "errorCorrection",
                            "type": {
                                "text": "| \"L\"\r\n        | \"M\"\r\n        | \"Q\"\r\n        | \"H\""
                            },
                            "default": "\"M\"",
                            "attribute": "error-correction"
                        },
                        {
                            "kind": "field",
                            "name": "fill",
                            "type": {
                                "text": "string"
                            },
                            "default": "\"black\"",
                            "attribute": "fill"
                        },
                        {
                            "kind": "field",
                            "name": "label",
                            "type": {
                                "text": "string"
                            },
                            "default": "\"\"",
                            "attribute": "label"
                        },
                        {
                            "kind": "field",
                            "name": "radius",
                            "type": {
                                "text": "number"
                            },
                            "default": "0",
                            "attribute": "radius"
                        },
                        {
                            "kind": "field",
                            "name": "size",
                            "type": {
                                "text": "number"
                            },
                            "default": "128",
                            "attribute": "size"
                        },
                        {
                            "kind": "field",
                            "name": "value",
                            "type": {
                                "text": "string"
                            },
                            "default": "\"\"",
                            "attribute": "value"
                        },
                        {
                            "kind": "method",
                            "name": "generate"
                        }
                    ],
                    "attributes": [
                        {
                            "name": "background",
                            "type": {
                                "text": "string"
                            },
                            "default": "\"white\"",
                            "fieldName": "background"
                        },
                        {
                            "name": "error-correction",
                            "type": {
                                "text": "| \"L\"\r\n        | \"M\"\r\n        | \"Q\"\r\n        | \"H\""
                            },
                            "default": "\"M\"",
                            "fieldName": "errorCorrection"
                        },
                        {
                            "name": "fill",
                            "type": {
                                "text": "string"
                            },
                            "default": "\"black\"",
                            "fieldName": "fill"
                        },
                        {
                            "name": "label",
                            "type": {
                                "text": "string"
                            },
                            "default": "\"\"",
                            "fieldName": "label"
                        },
                        {
                            "name": "radius",
                            "type": {
                                "text": "number"
                            },
                            "default": "0",
                            "fieldName": "radius"
                        },
                        {
                            "name": "size",
                            "type": {
                                "text": "number"
                            },
                            "default": "128",
                            "fieldName": "size"
                        },
                        {
                            "name": "value",
                            "type": {
                                "text": "string"
                            },
                            "default": "\"\"",
                            "fieldName": "value"
                        }
                    ],
                    "superclass": {
                        "name": "LitElement",
                        "package": "lit"
                    },
                    "tagName": "pc-qr-code",
                    "customElement": true
                }
            ],
            "exports": [
                {
                    "kind": "js",
                    "name": "PcQrCode",
                    "declaration": {
                        "name": "PcQrCode",
                        "module": "src/components/qr-code/qr-code.component.ts"
                    }
                },
                {
                    "kind": "custom-element-definition",
                    "name": "pc-qr-code",
                    "declaration": {
                        "name": "PcQrCode",
                        "module": "src/components/qr-code/qr-code.component.ts"
                    }
                }
            ]
        },
        {
            "kind": "javascript-module",
            "path": "src/components/qr-code/qr-code.styles.ts",
            "declarations": [
                {
                    "kind": "variable",
                    "name": "styles",
                    "default": "css` :host { display: inline-block; } `"
                }
            ],
            "exports": [
                {
                    "kind": "js",
                    "name": "styles",
                    "declaration": {
                        "name": "styles",
                        "module": "src/components/qr-code/qr-code.styles.ts"
                    }
                }
            ]
        },
        {
            "kind": "javascript-module",
            "path": "src/components/qr-code/qr-code.ts",
            "declarations": [],
            "exports": [
                {
                    "kind": "js",
                    "name": "*",
                    "declaration": {
                        "name": "*",
                        "package": "\"./qr-code.component.js\""
                    }
                },
                {
                    "kind": "js",
                    "name": "default",
                    "declaration": {
                        "name": "PcQrCode",
                        "module": "src/components/qr-code/qr-code.ts"
                    }
                }
            ]
        },
        {
            "kind": "javascript-module",
            "path": "src/components/qr-code/QRCode.stories.ts",
            "declarations": [
                {
                    "kind": "variable",
                    "name": "meta",
                    "type": {
                        "text": "Meta"
                    },
                    "default": "{ title: \"Components/QR Code\", component: \"pc-qr-code\", argTypes: { background: { control: \"color\" }, errorCorrection: { control: \"select\", options: [\"L\", \"M\", \"Q\", \"H\"], }, fill: { control: \"color\" }, label: { control: \"text\" }, radius: { control: { type: \"number\", min: 0, max: 0.5, step: 0.01, }, }, size: { control: \"number\" }, value: { control: \"text\" }, }, args: { background: \"white\", errorCorrection: \"M\", fill: \"black\", label: \"A QR Code\", radius: 0, size: 128, value: \"https://example.com\", }, }"
                },
                {
                    "kind": "variable",
                    "name": "Default",
                    "type": {
                        "text": "Story"
                    },
                    "default": "{ render: ({ background, errorCorrection, fill, label, radius, size, value, }) => html` <pc-qr-code background=${background} error-correction=${errorCorrection} fill=${fill} label=${label} radius=${radius} size=${size} value=${value} ></pc-qr-code> `, }"
                },
                {
                    "kind": "variable",
                    "name": "Sizing",
                    "type": {
                        "text": "Story"
                    },
                    "default": "{ args: { background: \"white\", errorCorrection: \"M\", fill: \"black\", label: \"A large QR Code\", radius: 0, size: 256, value: \"https://example.com\", }, render: ({ background, errorCorrection, fill, label, radius, size, value, }) => html` <pc-qr-code background=${background} error-correction=${errorCorrection} fill=${fill} label=${label} radius=${radius} size=${size} value=${value} ></pc-qr-code> `, }"
                },
                {
                    "kind": "variable",
                    "name": "Colour",
                    "type": {
                        "text": "Story"
                    },
                    "default": "{ args: { background: \"white\", errorCorrection: \"M\", fill: \"#184050\", label: \"A coloured QR Code\", radius: 0, size: 128, value: \"https://example.com\", }, render: ({ background, errorCorrection, fill, label, radius, size, value, }) => html` <pc-qr-code background=${background} error-correction=${errorCorrection} fill=${fill} label=${label} radius=${radius} size=${size} value=${value} ></pc-qr-code> `, }"
                },
                {
                    "kind": "variable",
                    "name": "Radius",
                    "type": {
                        "text": "Story"
                    },
                    "default": "{ args: { background: \"white\", errorCorrection: \"M\", fill: \"black\", label: \"A QR Code with rounded data\", radius: 0.5, size: 128, value: \"https://example.com\", }, render: ({ background, errorCorrection, fill, label, radius, size, value, }) => html` <pc-qr-code background=${background} error-correction=${errorCorrection} fill=${fill} label=${label} radius=${radius} size=${size} value=${value} ></pc-qr-code> `, }"
                },
                {
                    "kind": "variable",
                    "name": "ErrorCorrection",
                    "type": {
                        "text": "Story"
                    },
                    "default": "{ args: { background: \"white\", errorCorrection: \"H\", fill: \"black\", label: \"A QR Code with error correction set to high\", radius: 0, size: 128, value: \"https://example.com\", }, render: ({ background, errorCorrection, fill, label, radius, size, value, }) => html` <pc-qr-code background=${background} error-correction=${errorCorrection} fill=${fill} label=${label} radius=${radius} size=${size} value=${value} ></pc-qr-code> `, }"
                }
            ],
            "exports": [
                {
                    "kind": "js",
                    "name": "default",
                    "declaration": {
                        "name": "meta",
                        "module": "src/components/qr-code/QRCode.stories.ts"
                    }
                },
                {
                    "kind": "js",
                    "name": "Default",
                    "declaration": {
                        "name": "Default",
                        "module": "src/components/qr-code/QRCode.stories.ts"
                    }
                },
                {
                    "kind": "js",
                    "name": "Sizing",
                    "declaration": {
                        "name": "Sizing",
                        "module": "src/components/qr-code/QRCode.stories.ts"
                    }
                },
                {
                    "kind": "js",
                    "name": "Colour",
                    "declaration": {
                        "name": "Colour",
                        "module": "src/components/qr-code/QRCode.stories.ts"
                    }
                },
                {
                    "kind": "js",
                    "name": "Radius",
                    "declaration": {
                        "name": "Radius",
                        "module": "src/components/qr-code/QRCode.stories.ts"
                    }
                },
                {
                    "kind": "js",
                    "name": "ErrorCorrection",
                    "declaration": {
                        "name": "ErrorCorrection",
                        "module": "src/components/qr-code/QRCode.stories.ts"
                    }
                }
            ]
        },
        {
            "kind": "javascript-module",
            "path": "src/components/icon-button/icon-button.component.ts",
            "declarations": [
                {
                    "kind": "class",
                    "description": "",
                    "name": "PcIconButton",
                    "members": [
                        {
                            "kind": "field",
                            "name": "dependencies",
                            "type": {
                                "text": "object"
                            },
                            "static": true,
                            "default": "{ \"pc-icon\": PcIcon }"
                        },
                        {
                            "kind": "field",
                            "name": "button",
                            "type": {
                                "text": "HTMLButtonElement | HTMLLinkElement"
                            }
                        },
                        {
                            "kind": "field",
                            "name": "hasFocus",
                            "type": {
                                "text": "boolean"
                            },
                            "privacy": "private",
                            "default": "false"
                        },
                        {
                            "kind": "field",
                            "name": "disabled",
                            "type": {
                                "text": "boolean"
                            },
                            "default": "false",
                            "attribute": "disabled",
                            "reflects": true
                        },
                        {
                            "kind": "field",
                            "name": "download",
                            "type": {
                                "text": "string | undefined"
                            },
                            "attribute": "download"
                        },
                        {
                            "kind": "field",
                            "name": "href",
                            "type": {
                                "text": "string | undefined"
                            },
                            "attribute": "href"
                        },
                        {
                            "kind": "field",
                            "name": "iconStyle",
                            "type": {
                                "text": "string | undefined"
                            },
                            "attribute": "iconStyle"
                        },
                        {
                            "kind": "field",
                            "name": "label",
                            "type": {
                                "text": "string"
                            },
                            "default": "\"\"",
                            "attribute": "label"
                        },
                        {
                            "kind": "field",
                            "name": "library",
                            "type": {
                                "text": "string | undefined"
                            },
                            "attribute": "library"
                        },
                        {
                            "kind": "field",
                            "name": "name",
                            "type": {
                                "text": "string | undefined"
                            },
                            "attribute": "name"
                        },
                        {
                            "kind": "field",
                            "name": "src",
                            "type": {
                                "text": "string | undefined"
                            },
                            "attribute": "src"
                        },
                        {
                            "kind": "field",
                            "name": "target",
                            "type": {
                                "text": "\"_blank\" | \"_parent\" | \"_self\" | \"_top\" | undefined"
                            },
                            "attribute": "target"
                        },
                        {
                            "kind": "method",
                            "name": "handleClick",
                            "privacy": "private",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": {
                                        "text": "MouseEvent"
                                    }
                                }
                            ]
                        },
                        {
                            "kind": "method",
                            "name": "handleFocus",
                            "privacy": "private"
                        },
                        {
                            "kind": "method",
                            "name": "handleBlur",
                            "privacy": "private"
                        },
                        {
                            "kind": "method",
                            "name": "click"
                        },
                        {
                            "kind": "method",
                            "name": "focus",
                            "parameters": [
                                {
                                    "name": "options",
                                    "optional": true,
                                    "type": {
                                        "text": "FocusOptions"
                                    }
                                }
                            ]
                        },
                        {
                            "kind": "method",
                            "name": "blur"
                        }
                    ],
                    "attributes": [
                        {
                            "name": "disabled",
                            "type": {
                                "text": "boolean"
                            },
                            "default": "false",
                            "fieldName": "disabled"
                        },
                        {
                            "name": "download",
                            "type": {
                                "text": "string | undefined"
                            },
                            "fieldName": "download"
                        },
                        {
                            "name": "href",
                            "type": {
                                "text": "string | undefined"
                            },
                            "fieldName": "href"
                        },
                        {
                            "name": "iconStyle",
                            "type": {
                                "text": "string | undefined"
                            },
                            "fieldName": "iconStyle"
                        },
                        {
                            "name": "label",
                            "type": {
                                "text": "string"
                            },
                            "default": "\"\"",
                            "fieldName": "label"
                        },
                        {
                            "name": "library",
                            "type": {
                                "text": "string | undefined"
                            },
                            "fieldName": "library"
                        },
                        {
                            "name": "name",
                            "type": {
                                "text": "string | undefined"
                            },
                            "fieldName": "name"
                        },
                        {
                            "name": "src",
                            "type": {
                                "text": "string | undefined"
                            },
                            "fieldName": "src"
                        },
                        {
                            "name": "target",
                            "type": {
                                "text": "\"_blank\" | \"_parent\" | \"_self\" | \"_top\" | undefined"
                            },
                            "fieldName": "target"
                        }
                    ],
                    "superclass": {
                        "name": "LitElement",
                        "package": "lit"
                    },
                    "tagName": "pc-icon-button",
                    "customElement": true
                }
            ],
            "exports": [
                {
                    "kind": "js",
                    "name": "PcIconButton",
                    "declaration": {
                        "name": "PcIconButton",
                        "module": "src/components/icon-button/icon-button.component.ts"
                    }
                },
                {
                    "kind": "custom-element-definition",
                    "name": "pc-icon-button",
                    "declaration": {
                        "name": "PcIconButton",
                        "module": "src/components/icon-button/icon-button.component.ts"
                    }
                }
            ]
        },
        {
            "kind": "javascript-module",
            "path": "src/components/icon-button/icon-button.styles.ts",
            "declarations": [
                {
                    "kind": "variable",
                    "name": "styles",
                    "default": "css` :host { display: inline-flex; color: var(--pc-color-neutral-600); } .icon-button { display: flex; align-items: center; flex: 0 0 auto; background: none; border: none; border-radius: var(--pc-border-radius-m); font-size: inherit; color: inherit; padding: var(--pc-spacing-xs); cursor: pointer; -webkit-appearance: none; transition: all var(--pc-transition-fast) ease-in-out; } .icon-button:hover:not(.icon-button-disabled), .icon-button:focus-visible:not(.icon-button-disabled) { color: var(--pc-color-primary-600); } .icon-button:hover:active:not(.icon-button-disabled) { color: var(--pc-color-primary-500); } .icon-button:focus { outline: none; } .icon-button-disabled { opacity: 0.6; cursor: not-allowed; } .icon-button:focus-visible { outline: var(--pc-focus-ring); outline-offset: var(--pc-focus-ring-offset); } .icon { pointer-events: none; } `"
                }
            ],
            "exports": [
                {
                    "kind": "js",
                    "name": "styles",
                    "declaration": {
                        "name": "styles",
                        "module": "src/components/icon-button/icon-button.styles.ts"
                    }
                }
            ]
        },
        {
            "kind": "javascript-module",
            "path": "src/components/icon-button/icon-button.ts",
            "declarations": [],
            "exports": [
                {
                    "kind": "js",
                    "name": "*",
                    "declaration": {
                        "name": "*",
                        "package": "\"./icon-button.component.js\""
                    }
                },
                {
                    "kind": "js",
                    "name": "default",
                    "declaration": {
                        "name": "PcIconButton",
                        "module": "src/components/icon-button/icon-button.ts"
                    }
                }
            ]
        },
        {
            "kind": "javascript-module",
            "path": "src/components/icon-button/IconButton.stories.ts",
            "declarations": [
                {
                    "kind": "variable",
                    "name": "meta",
                    "type": {
                        "text": "Meta"
                    },
                    "default": "{ title: \"Components/Icon Button\", component: \"pc-icon-button\", argTypes: { disabled: { control: \"boolean\" }, download: { control: \"text\" }, href: { control: \"text\" }, iconStyle: { control: \"select\", options: [\"solid\", \"regular\", \"brands\"], }, label: { control: \"text\" }, library: { control: \"text\" }, name: { control: \"text\" }, src: { control: \"text\" }, target: { control: \"select\", options: [\"_blank\", \"_parent\", \"_self\"], }, // CSS styles fontSize: { control: \"text\" }, colorRest: { control: \"color\" }, colorHover: { control: \"color\" }, colorPressed: { control: \"color\" }, }, args: { disabled: false, download: undefined, href: undefined, iconStyle: \"solid\", label: \"An icon button with a gear icon\", library: \"default\", name: \"gear\", src: undefined, target: undefined, // CSS styles fontSize: \"1rem\", colorRest: \"var(--pc-color-neutral-600)\", colorHover: \"var(--pc-color-primary-600)\", colorPressed: \"var(--pc-color-primary-500)\", }, }"
                },
                {
                    "kind": "variable",
                    "name": "Default",
                    "type": {
                        "text": "Story"
                    },
                    "default": "{ render: ({ disabled, download, href, iconStyle, label, library, name, src, target, // CSS styles fontSize, colorRest, colorHover, colorPressed, }) => html` <pc-icon-button library=${library} iconStyle=${iconStyle} name=${name} label=${label} src=${src} download=${download} href=${href} target=${target} ?disabled=${disabled} ></pc-icon-button> <style> pc-icon-button::part(base) { color: ${colorRest} !important; font-size: ${fontSize} !important; } pc-icon-button::part(base):hover { color: ${colorHover} !important; } pc-icon-button::part(base):hover:active { color: ${colorPressed} !important; } </style> `, }"
                },
                {
                    "kind": "variable",
                    "name": "Sizing",
                    "type": {
                        "text": "Story"
                    },
                    "default": "{ args: { disabled: false, iconStyle: \"solid\", label: \"A large icon button with a gear icon\", library: \"default\", name: \"gear\", fontSize: \"5rem\", colorRest: \"var(--pc-color-neutral-600)\", colorHover: \"var(--pc-color-primary-600)\", colorPressed: \"var(--pc-color-primary-500)\", }, render: ({ disabled, download, href, iconStyle, label, library, name, src, target, fontSize, colorRest, colorHover, colorPressed, }) => html` <pc-icon-button library=${library} iconStyle=${iconStyle} name=${name} label=${label} src=${src} download=${download} href=${href} target=${target} ?disabled=${disabled} ></pc-icon-button> <style> pc-icon-button::part(base) { color: ${colorRest} !important; font-size: ${fontSize} !important; } pc-icon-button::part(base):hover { color: ${colorHover} !important; } pc-icon-button::part(base):hover:active { color: ${colorPressed} !important; } </style> `, }"
                },
                {
                    "kind": "variable",
                    "name": "Colour",
                    "type": {
                        "text": "Story"
                    },
                    "default": "{ args: { disabled: false, iconStyle: \"solid\", label: \"An icon button with a warning icon\", library: \"default\", name: \"triangle-exclamation\", fontSize: \"1rem\", colorRest: \"var(--pc-color-neutral-600)\", colorHover: \"var(--pc-color-warning-600)\", colorPressed: \"var(--pc-color-warning-500)\", }, render: ({ disabled, download, href, iconStyle, label, library, name, src, target, fontSize, colorRest, colorHover, colorPressed, }) => html` <pc-icon-button library=${library} iconStyle=${iconStyle} name=${name} label=${label} src=${src} download=${download} href=${href} target=${target} ?disabled=${disabled} ></pc-icon-button> <style> pc-icon-button::part(base) { color: ${colorRest} !important; font-size: ${fontSize} !important; } pc-icon-button::part(base):hover { color: ${colorHover} !important; } pc-icon-button::part(base):hover:active { color: ${colorPressed} !important; } </style> `, }"
                },
                {
                    "kind": "variable",
                    "name": "Disabled",
                    "type": {
                        "text": "Story"
                    },
                    "default": "{ args: { disabled: true, iconStyle: \"solid\", label: \"A disabled icon button with a gear icon\", library: \"default\", name: \"gear\", fontSize: \"1rem\", colorRest: \"var(--pc-color-neutral-600)\", colorHover: \"var(--pc-color-primary-600)\", colorPressed: \"var(--pc-color-primary-500)\", }, render: ({ disabled, download, href, iconStyle, label, library, name, src, target, fontSize, colorRest, colorHover, colorPressed, }) => html` <pc-icon-button library=${library} iconStyle=${iconStyle} name=${name} label=${label} src=${src} download=${download} href=${href} target=${target} ?disabled=${disabled} ></pc-icon-button> <style> pc-icon-button::part(base) { color: ${colorRest} !important; font-size: ${fontSize} !important; } pc-icon-button::part(base):hover { color: ${colorHover} !important; } pc-icon-button::part(base):hover:active { color: ${colorPressed} !important; } </style> `, }"
                }
            ],
            "exports": [
                {
                    "kind": "js",
                    "name": "default",
                    "declaration": {
                        "name": "meta",
                        "module": "src/components/icon-button/IconButton.stories.ts"
                    }
                },
                {
                    "kind": "js",
                    "name": "Default",
                    "declaration": {
                        "name": "Default",
                        "module": "src/components/icon-button/IconButton.stories.ts"
                    }
                },
                {
                    "kind": "js",
                    "name": "Sizing",
                    "declaration": {
                        "name": "Sizing",
                        "module": "src/components/icon-button/IconButton.stories.ts"
                    }
                },
                {
                    "kind": "js",
                    "name": "Colour",
                    "declaration": {
                        "name": "Colour",
                        "module": "src/components/icon-button/IconButton.stories.ts"
                    }
                },
                {
                    "kind": "js",
                    "name": "Disabled",
                    "declaration": {
                        "name": "Disabled",
                        "module": "src/components/icon-button/IconButton.stories.ts"
                    }
                }
            ]
        },
        {
            "kind": "javascript-module",
            "path": "src/components/radio/radio.component.ts",
            "declarations": [
                {
                    "kind": "class",
                    "description": "",
                    "name": "PcRadio",
                    "members": [
                        {
                            "kind": "field",
                            "name": "checked",
                            "type": {
                                "text": "boolean"
                            },
                            "default": "false"
                        },
                        {
                            "kind": "field",
                            "name": "hasFocus",
                            "type": {
                                "text": "boolean"
                            },
                            "privacy": "protected",
                            "default": "false"
                        },
                        {
                            "kind": "field",
                            "name": "disabled",
                            "type": {
                                "text": "boolean"
                            },
                            "default": "false",
                            "attribute": "disabled",
                            "reflects": true
                        },
                        {
                            "kind": "field",
                            "name": "size",
                            "type": {
                                "text": "\"small\" | \"medium\" | \"large\""
                            },
                            "default": "\"medium\"",
                            "attribute": "size",
                            "reflects": true
                        },
                        {
                            "kind": "field",
                            "name": "value",
                            "type": {
                                "text": "string | undefined"
                            },
                            "attribute": "value"
                        },
                        {
                            "kind": "method",
                            "name": "handleClick",
                            "privacy": "private"
                        },
                        {
                            "kind": "method",
                            "name": "handleFocus",
                            "privacy": "private"
                        },
                        {
                            "kind": "method",
                            "name": "handleBlur",
                            "privacy": "private"
                        },
                        {
                            "kind": "method",
                            "name": "setInitialAttributes",
                            "privacy": "private"
                        },
                        {
                            "kind": "method",
                            "name": "handleCheckedChange"
                        },
                        {
                            "kind": "method",
                            "name": "handleDisabledChange"
                        }
                    ],
                    "attributes": [
                        {
                            "name": "disabled",
                            "type": {
                                "text": "boolean"
                            },
                            "default": "false",
                            "fieldName": "disabled"
                        },
                        {
                            "name": "size",
                            "type": {
                                "text": "\"small\" | \"medium\" | \"large\""
                            },
                            "default": "\"medium\"",
                            "fieldName": "size"
                        },
                        {
                            "name": "value",
                            "type": {
                                "text": "string | undefined"
                            },
                            "fieldName": "value"
                        }
                    ],
                    "superclass": {
                        "name": "LitElement",
                        "package": "lit"
                    },
                    "tagName": "pc-radio",
                    "customElement": true
                }
            ],
            "exports": [
                {
                    "kind": "js",
                    "name": "PcRadio",
                    "declaration": {
                        "name": "PcRadio",
                        "module": "src/components/radio/radio.component.ts"
                    }
                },
                {
                    "kind": "custom-element-definition",
                    "name": "pc-radio",
                    "declaration": {
                        "name": "PcRadio",
                        "module": "src/components/radio/radio.component.ts"
                    }
                }
            ]
        },
        {
            "kind": "javascript-module",
            "path": "src/components/radio/Radio.stories.ts",
            "declarations": [
                {
                    "kind": "variable",
                    "name": "meta",
                    "type": {
                        "text": "Meta"
                    },
                    "default": "{ title: \"Components/Radio\", component: \"pc-radio\", argTypes: { disabled: { control: \"boolean\" }, size: { control: \"select\", options: [\"small\", \"medium\", \"large\"], }, value: { control: \"text\" }, }, args: { disabled: false, size: \"medium\", value: \"radio\", }, }"
                },
                {
                    "kind": "variable",
                    "name": "Default",
                    "type": {
                        "text": "Story"
                    },
                    "default": "{ render: ({ disabled, size, value }) => html` <pc-radio ?disabled=${disabled} size=${size} value=${value}></pc-radio> `, }"
                }
            ],
            "exports": [
                {
                    "kind": "js",
                    "name": "default",
                    "declaration": {
                        "name": "meta",
                        "module": "src/components/radio/Radio.stories.ts"
                    }
                },
                {
                    "kind": "js",
                    "name": "Default",
                    "declaration": {
                        "name": "Default",
                        "module": "src/components/radio/Radio.stories.ts"
                    }
                }
            ]
        },
        {
            "kind": "javascript-module",
            "path": "src/components/radio/radio.styles.ts",
            "declarations": [
                {
                    "kind": "variable",
                    "name": "styles",
                    "default": "css` :host { display: block; } :host(:focus-visible) { outline: 0; } .radio { display: inline-flex; align-items: top; font-family: var(--pc-input-font-family); font-size: var(--pc-input-font-size-m); font-weight: var(--pc-input-font-weight); color: var(--pc-input-label-color); vertical-align: middle; cursor: pointer; } .radio-small { --toggle-size: var(--pc-toggle-size-s); font-size: var(--pc-input-font-size-s); } .radio-medium { --toggle-size: var(--pc-toggle-size-m); font-size: var(--pc-input-font-size-m); } .radio-large { --toggle-size: var(--pc-toggle-size-l); font-size: var(--pc-input-font-size-l); } .checked-icon { display: inline-flex; width: var(--toggle-size); height: var(--toggle-size); } .radio-control { display: inline-flex; position: relative; align-items: center; justify-content: center; flex: 0 0 auto; width: var(--toggle-size); height: var(--toggle-size); border: var(--pc-input-border-width) solid var(--pc-input-border-color); border-radius: var(--pc-border-radius-circle); background-color: transparent; color: transparent; transition: all var(--pc-transition-fast) ease-in-out; } .radio-input { position: absolute; margin: 0; padding: 0; opacity: 0; pointer-events: none; transition: opacity var(--pc-transition-fast) ease-in-out; } .radio:not(.radio-checked):not(.radio-disabled) .radio-control:hover { border-color: var(--pc-input-border-color-hover); } .radio:not(.radio-checked):not(.radio-disabled) .radio-control:hover:active { border-color: var(--pc-input-border-color-active); } .radio-checked .radio-control { color: var(--pc-color-neutral-0); background-color: var(--pc-color-primary-500); border-color: var(--pc-color-primary-500); } .radio.radio-checked:not(.radio-disabled) .radio-control:hover { background-color: var(--pc-color-primary-600); border-color: var(--pc-color-primary-600); } .radio.radio-checked:not(.radio-disabled) .radio-control:hover:active { background-color: var(--pc-color-primary-400); border-color: var(--pc-color-primary-400); } :host(:focus-visible) .radio-control { outline: var(--pc-focus-ring); outline-offset: var(--pc-focus-ring-offset); } .radio-disabled { opacity: 0.6; cursor: not-allowed; } /* If the radio isn’t checked, hide the circle icon in High Contrast mode on Windows */ .radio:not(.radio-checked) svg { opacity: 0; } .label { display: inline-block; color: var(--pc-input-label-color); line-height: var(--toggle-size); margin-inline-start: 0.5em; user-select: none; -webkit-user-select: none; } `"
                }
            ],
            "exports": [
                {
                    "kind": "js",
                    "name": "styles",
                    "declaration": {
                        "name": "styles",
                        "module": "src/components/radio/radio.styles.ts"
                    }
                }
            ]
        },
        {
            "kind": "javascript-module",
            "path": "src/components/radio/radio.ts",
            "declarations": [],
            "exports": [
                {
                    "kind": "js",
                    "name": "*",
                    "declaration": {
                        "name": "*",
                        "package": "\"./radio.component.js\""
                    }
                },
                {
                    "kind": "js",
                    "name": "default",
                    "declaration": {
                        "name": "PcRadio",
                        "module": "src/components/radio/radio.ts"
                    }
                }
            ]
        },
        {
            "kind": "javascript-module",
            "path": "src/components/rating/rating.component.ts",
            "declarations": [
                {
                    "kind": "class",
                    "description": "",
                    "name": "PcRating",
                    "members": [
                        {
                            "kind": "field",
                            "name": "dependencies",
                            "type": {
                                "text": "object"
                            },
                            "static": true,
                            "default": "{ \"pc-icon\": PcIcon }"
                        },
                        {
                            "kind": "field",
                            "name": "rating",
                            "type": {
                                "text": "HTMLElement"
                            }
                        },
                        {
                            "kind": "field",
                            "name": "hoverValue",
                            "type": {
                                "text": "number"
                            },
                            "privacy": "private",
                            "default": "0"
                        },
                        {
                            "kind": "field",
                            "name": "isHovering",
                            "type": {
                                "text": "boolean"
                            },
                            "privacy": "private",
                            "default": "false"
                        },
                        {
                            "kind": "field",
                            "name": "disabled",
                            "type": {
                                "text": "boolean"
                            },
                            "default": "false",
                            "attribute": "disabled",
                            "reflects": true
                        },
                        {
                            "kind": "field",
                            "name": "label",
                            "type": {
                                "text": "string"
                            },
                            "default": "\"\"",
                            "attribute": "label"
                        },
                        {
                            "kind": "field",
                            "name": "max",
                            "type": {
                                "text": "number"
                            },
                            "default": "5",
                            "attribute": "max"
                        },
                        {
                            "kind": "field",
                            "name": "precision",
                            "type": {
                                "text": "number"
                            },
                            "default": "1",
                            "attribute": "precision"
                        },
                        {
                            "kind": "field",
                            "name": "readonly",
                            "type": {
                                "text": "boolean"
                            },
                            "default": "false",
                            "attribute": "readonly",
                            "reflects": true
                        },
                        {
                            "kind": "field",
                            "name": "value",
                            "type": {
                                "text": "number"
                            },
                            "default": "0",
                            "attribute": "value"
                        },
                        {
                            "kind": "field",
                            "name": "getIcon",
                            "type": {
                                "text": "(value: number) => string"
                            },
                            "attribute": "getIcon"
                        },
                        {
                            "kind": "method",
                            "name": "getValueFromMousePosition",
                            "privacy": "private",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": {
                                        "text": "MouseEvent"
                                    }
                                }
                            ]
                        },
                        {
                            "kind": "method",
                            "name": "getValueFromTouchPosition",
                            "privacy": "private",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": {
                                        "text": "TouchEvent"
                                    }
                                }
                            ]
                        },
                        {
                            "kind": "method",
                            "name": "getValueFromXCoordinate",
                            "privacy": "private",
                            "parameters": [
                                {
                                    "name": "coordinate",
                                    "type": {
                                        "text": "number"
                                    }
                                }
                            ]
                        },
                        {
                            "kind": "method",
                            "name": "handleClick",
                            "privacy": "private",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": {
                                        "text": "MouseEvent"
                                    }
                                }
                            ]
                        },
                        {
                            "kind": "method",
                            "name": "setValue",
                            "privacy": "private",
                            "parameters": [
                                {
                                    "name": "newValue",
                                    "type": {
                                        "text": "number"
                                    }
                                }
                            ]
                        },
                        {
                            "kind": "method",
                            "name": "handleKeyDown",
                            "privacy": "private",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": {
                                        "text": "KeyboardEvent"
                                    }
                                }
                            ]
                        },
                        {
                            "kind": "method",
                            "name": "handleMouseEnter",
                            "privacy": "private",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": {
                                        "text": "MouseEvent"
                                    }
                                }
                            ]
                        },
                        {
                            "kind": "method",
                            "name": "handleMouseMove",
                            "privacy": "private",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": {
                                        "text": "MouseEvent"
                                    }
                                }
                            ]
                        },
                        {
                            "kind": "method",
                            "name": "handleMouseLeave",
                            "privacy": "private"
                        },
                        {
                            "kind": "method",
                            "name": "handleTouchStart",
                            "privacy": "private",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": {
                                        "text": "TouchEvent"
                                    }
                                }
                            ]
                        },
                        {
                            "kind": "method",
                            "name": "handleTouchMove",
                            "privacy": "private",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": {
                                        "text": "TouchEvent"
                                    }
                                }
                            ]
                        },
                        {
                            "kind": "method",
                            "name": "handleTouchEnd",
                            "privacy": "private",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": {
                                        "text": "TouchEvent"
                                    }
                                }
                            ]
                        },
                        {
                            "kind": "method",
                            "name": "roundToPrecision",
                            "privacy": "private",
                            "parameters": [
                                {
                                    "name": "numberToRound",
                                    "type": {
                                        "text": "number"
                                    }
                                },
                                {
                                    "name": "precision",
                                    "default": "0.5"
                                }
                            ]
                        },
                        {
                            "kind": "method",
                            "name": "handleHoverValueChange"
                        },
                        {
                            "kind": "method",
                            "name": "handleIsHoveringChange"
                        },
                        {
                            "kind": "method",
                            "name": "focus",
                            "parameters": [
                                {
                                    "name": "options",
                                    "optional": true,
                                    "type": {
                                        "text": "FocusOptions"
                                    }
                                }
                            ]
                        },
                        {
                            "kind": "method",
                            "name": "blur"
                        }
                    ],
                    "attributes": [
                        {
                            "name": "disabled",
                            "type": {
                                "text": "boolean"
                            },
                            "default": "false",
                            "fieldName": "disabled"
                        },
                        {
                            "name": "label",
                            "type": {
                                "text": "string"
                            },
                            "default": "\"\"",
                            "fieldName": "label"
                        },
                        {
                            "name": "max",
                            "type": {
                                "text": "number"
                            },
                            "default": "5",
                            "fieldName": "max"
                        },
                        {
                            "name": "precision",
                            "type": {
                                "text": "number"
                            },
                            "default": "1",
                            "fieldName": "precision"
                        },
                        {
                            "name": "readonly",
                            "type": {
                                "text": "boolean"
                            },
                            "default": "false",
                            "fieldName": "readonly"
                        },
                        {
                            "name": "value",
                            "type": {
                                "text": "number"
                            },
                            "default": "0",
                            "fieldName": "value"
                        },
                        {
                            "name": "getIcon",
                            "type": {
                                "text": "(value: number) => string"
                            },
                            "fieldName": "getIcon"
                        }
                    ],
                    "superclass": {
                        "name": "LitElement",
                        "package": "lit"
                    },
                    "tagName": "pc-rating",
                    "customElement": true
                }
            ],
            "exports": [
                {
                    "kind": "js",
                    "name": "PcRating",
                    "declaration": {
                        "name": "PcRating",
                        "module": "src/components/rating/rating.component.ts"
                    }
                },
                {
                    "kind": "custom-element-definition",
                    "name": "pc-rating",
                    "declaration": {
                        "name": "PcRating",
                        "module": "src/components/rating/rating.component.ts"
                    }
                }
            ]
        },
        {
            "kind": "javascript-module",
            "path": "src/components/rating/Rating.stories.ts",
            "declarations": [
                {
                    "kind": "variable",
                    "name": "meta",
                    "type": {
                        "text": "Meta"
                    },
                    "default": "{ title: \"Components/Rating\", component: \"pc-rating\", argTypes: { disabled: { control: \"boolean\" }, label: { control: \"text\" }, max: { control: { type: \"number\", min: 0 }, }, precision: { control: { type: \"number\", step: 0.01 }, }, readonly: { control: \"boolean\" }, value: { control: \"number\" }, getIcon: { control: \"text\" }, // CSS styles iconSize: { control: \"text\" }, }, args: { disabled: false, label: \"Rating\", max: 5, precision: 1, readonly: false, value: 0, getIcon: `<pc-icon library=\"default\" iconStyle=\"solid\" name=\"star\"></pc-icon>`, // CSS styles iconSize: \"1.2rem\", }, }"
                },
                {
                    "kind": "variable",
                    "name": "Default",
                    "type": {
                        "text": "Story"
                    },
                    "default": "{ render: ({ disabled, label, max, precision, readonly, value, getIcon, // CSS styles iconSize, }) => html` <pc-rating class=\"rating-default\" ?disabled=${disabled} label=${label} max=${max} precision=${precision} ?readonly=${readonly} value=${value} style=\"--icon-size: ${iconSize}\" .getIcon=${() => getIcon} ></pc-rating> `, }"
                },
                {
                    "kind": "variable",
                    "name": "MaximumValue",
                    "type": {
                        "text": "Story"
                    },
                    "default": "{ args: { disabled: false, label: \"Rating with three stars\", max: 3, precision: 1, readonly: false, value: 0, // CSS styles iconSize: \"1rem\", }, render: ({ disabled, label, max, precision, readonly, value, getIcon, // CSS styles iconSize, }) => html` <pc-rating class=\"rating-max-value\" ?disabled=${disabled} label=${label} max=${max} precision=${precision} ?readonly=${readonly} value=${value} style=\"--icon-size: ${iconSize}\" .getIcon=${() => getIcon} ></pc-rating> `, }"
                },
                {
                    "kind": "variable",
                    "name": "Precision",
                    "type": {
                        "text": "Story"
                    },
                    "default": "{ args: { disabled: false, label: \"A rating that allows fractions of 0.5\", max: 5, precision: 0.5, readonly: false, value: 0, // CSS styles iconSize: \"1rem\", }, render: ({ disabled, label, max, precision, readonly, value, getIcon, // CSS styles iconSize, }) => html` <pc-rating class=\"rating-precision\" ?disabled=${disabled} label=${label} max=${max} precision=${precision} ?readonly=${readonly} value=${value} style=\"--icon-size: ${iconSize}\" .getIcon=${() => getIcon} ></pc-rating> `, }"
                },
                {
                    "kind": "variable",
                    "name": "IconSize",
                    "type": {
                        "text": "Story"
                    },
                    "default": "{ args: { disabled: false, label: \"Rating with large stars\", max: 5, precision: 1, readonly: false, value: 0, // CSS styles iconSize: \"2rem\", }, render: ({ disabled, label, max, precision, readonly, value, getIcon, // CSS styles iconSize, }) => html` <pc-rating class=\"rating-icon-size\" ?disabled=${disabled} label=${label} max=${max} precision=${precision} ?readonly=${readonly} value=${value} style=\"--icon-size: ${iconSize}\" .getIcon=${() => getIcon} ></pc-rating> `, }"
                },
                {
                    "kind": "variable",
                    "name": "CustomIcon",
                    "type": {
                        "text": "Story"
                    },
                    "default": "{ args: { disabled: false, label: \"Rating with hearts\", max: 5, precision: 1, readonly: false, value: 0, getIcon: '<pc-icon library=\"default\" iconStyle=\"solid\" name=\"heart\"></pc-icon>', iconSize: \"1rem\", }, render: ({ disabled, label, max, precision, readonly, value, getIcon, iconSize, }) => html` <pc-rating class=\"rating-default\" ?disabled=${disabled} label=${label} max=${max} precision=${precision} ?readonly=${readonly} value=${value} style=\"--icon-size: ${iconSize}; --icon-color-active: #ff4136\" .getIcon=${() => getIcon} ></pc-rating> `, }"
                }
            ],
            "exports": [
                {
                    "kind": "js",
                    "name": "default",
                    "declaration": {
                        "name": "meta",
                        "module": "src/components/rating/Rating.stories.ts"
                    }
                },
                {
                    "kind": "js",
                    "name": "Default",
                    "declaration": {
                        "name": "Default",
                        "module": "src/components/rating/Rating.stories.ts"
                    }
                },
                {
                    "kind": "js",
                    "name": "MaximumValue",
                    "declaration": {
                        "name": "MaximumValue",
                        "module": "src/components/rating/Rating.stories.ts"
                    }
                },
                {
                    "kind": "js",
                    "name": "Precision",
                    "declaration": {
                        "name": "Precision",
                        "module": "src/components/rating/Rating.stories.ts"
                    }
                },
                {
                    "kind": "js",
                    "name": "IconSize",
                    "declaration": {
                        "name": "IconSize",
                        "module": "src/components/rating/Rating.stories.ts"
                    }
                },
                {
                    "kind": "js",
                    "name": "CustomIcon",
                    "declaration": {
                        "name": "CustomIcon",
                        "module": "src/components/rating/Rating.stories.ts"
                    }
                }
            ]
        },
        {
            "kind": "javascript-module",
            "path": "src/components/rating/rating.styles.ts",
            "declarations": [
                {
                    "kind": "variable",
                    "name": "styles",
                    "default": "css` :host { --icon-color: var(--pc-color-neutral-300); --icon-color-active: var(--pc-color-amber-500); --icon-size: 1.2rem; display: inline-flex; } .rating { position: relative; display: inline-flex; border-radius: var(--pc-border-radius-m); vertical-align: middle; } .rating:focus { outline: none; } .rating:focus-visible { outline: var(--pc-focus-ring); outline-offset: var(--pc-focus-ring-offset); } .rating-icons { display: inline-flex; position: relative; font-size: var(--icon-size); line-height: 0; color: var(--icon-color); white-space: nowrap; cursor: pointer; } .rating-icons > * { padding: 0.0625rem; } .rating-icon-active, .rating-partial-filled { color: var(--icon-color-active); } .rating-partial-icon-container { position: relative; } .rating-partial-filled { position: absolute; top: 0.0625rem; left: 0.0625rem; } .rating-icon { pointer-events: none; transition: all var(--pc-transition-fast) ease-in-out; } .rating-icon pc-icon::part(svg) { overflow: visible; } .rating-icon-hover { scale: 1.15; } .rating-disabled .rating-icons, .rating-readonly .rating-icons { cursor: default; } .rating-disabled .rating-icon-hover, .rating-readonly .rating-icon-hover { scale: none; } .rating-disabled { opacity: 0.6; } .rating-disabled .rating-icons { cursor: not-allowed; } @media (forced-colors: active) { .rating-icon-active { color: SelectedItem; } } `"
                }
            ],
            "exports": [
                {
                    "kind": "js",
                    "name": "styles",
                    "declaration": {
                        "name": "styles",
                        "module": "src/components/rating/rating.styles.ts"
                    }
                }
            ]
        },
        {
            "kind": "javascript-module",
            "path": "src/components/rating/rating.ts",
            "declarations": [],
            "exports": [
                {
                    "kind": "js",
                    "name": "*",
                    "declaration": {
                        "name": "*",
                        "package": "\"./rating.component.js\""
                    }
                },
                {
                    "kind": "js",
                    "name": "default",
                    "declaration": {
                        "name": "PcRating",
                        "module": "src/components/rating/rating.ts"
                    }
                }
            ]
        },
        {
            "kind": "javascript-module",
            "path": "src/components/resize-observer/resize-observer.component.ts",
            "declarations": [
                {
                    "kind": "class",
                    "description": "",
                    "name": "PcResizeObserver",
                    "members": [
                        {
                            "kind": "field",
                            "name": "resizeObserver",
                            "type": {
                                "text": "ResizeObserver"
                            },
                            "privacy": "private"
                        },
                        {
                            "kind": "field",
                            "name": "observedElements",
                            "type": {
                                "text": "HTMLElement[]"
                            },
                            "privacy": "private",
                            "default": "[]"
                        },
                        {
                            "kind": "field",
                            "name": "disabled",
                            "type": {
                                "text": "boolean"
                            },
                            "default": "false",
                            "attribute": "disabled",
                            "reflects": true
                        },
                        {
                            "kind": "method",
                            "name": "handleSlotChange",
                            "privacy": "private"
                        },
                        {
                            "kind": "method",
                            "name": "startObserver",
                            "privacy": "private"
                        },
                        {
                            "kind": "method",
                            "name": "stopObserver",
                            "privacy": "private"
                        },
                        {
                            "kind": "method",
                            "name": "handleDisabledChange"
                        }
                    ],
                    "attributes": [
                        {
                            "name": "disabled",
                            "type": {
                                "text": "boolean"
                            },
                            "default": "false",
                            "fieldName": "disabled"
                        }
                    ],
                    "superclass": {
                        "name": "LitElement",
                        "package": "lit"
                    },
                    "tagName": "pc-resize-observer",
                    "customElement": true
                }
            ],
            "exports": [
                {
                    "kind": "js",
                    "name": "PcResizeObserver",
                    "declaration": {
                        "name": "PcResizeObserver",
                        "module": "src/components/resize-observer/resize-observer.component.ts"
                    }
                },
                {
                    "kind": "custom-element-definition",
                    "name": "pc-resize-observer",
                    "declaration": {
                        "name": "PcResizeObserver",
                        "module": "src/components/resize-observer/resize-observer.component.ts"
                    }
                }
            ]
        },
        {
            "kind": "javascript-module",
            "path": "src/components/resize-observer/resize-observer.styles.ts",
            "declarations": [
                {
                    "kind": "variable",
                    "name": "styles",
                    "default": "css` :host { display: contents; } `"
                }
            ],
            "exports": [
                {
                    "kind": "js",
                    "name": "styles",
                    "declaration": {
                        "name": "styles",
                        "module": "src/components/resize-observer/resize-observer.styles.ts"
                    }
                }
            ]
        },
        {
            "kind": "javascript-module",
            "path": "src/components/resize-observer/resize-observer.ts",
            "declarations": [],
            "exports": [
                {
                    "kind": "js",
                    "name": "*",
                    "declaration": {
                        "name": "*",
                        "package": "\"./resize-observer.component.js\""
                    }
                },
                {
                    "kind": "js",
                    "name": "default",
                    "declaration": {
                        "name": "PcResizeObserver",
                        "module": "src/components/resize-observer/resize-observer.ts"
                    }
                }
            ]
        },
        {
            "kind": "javascript-module",
            "path": "src/components/resize-observer/ResizeObserver.stories.ts",
            "declarations": [
                {
                    "kind": "variable",
                    "name": "meta",
                    "type": {
                        "text": "Meta"
                    },
                    "default": "{ title: \"Components/Resize Observer\", component: \"pc-resize-observer\", argTypes: { disabled: { control: \"boolean\" }, }, args: { disabled: false, }, }"
                },
                {
                    "kind": "variable",
                    "name": "Default",
                    "type": {
                        "text": "Story"
                    },
                    "default": "{ render: ({ disabled }) => html` <div class=\"resize-observer-overview\"> <pc-resize-observer ?disabled=${disabled}> <span>Resize this box and watch the console ↘️</span> </pc-resize-observer> </div> <script> const container = document.querySelector( \".resize-observer-overview\" ); const resizeObserver = container.querySelector(\"pc-resize-observer\"); resizeObserver.addEventListener(\"pc-resize\", (event) => { console.log(event.detail); }); </script> <style> .resize-observer-overview { display: flex; align-items: center; justify-content: center; padding: var(--pc-spacing-xxxl) var(--pc-spacing-xxl); border: 2px solid var(--pc-input-border-color); border-radius: var(--pc-border-radius-l) var(--pc-border-radius-l) 0 var(--pc-border-radius-l); overflow: auto; resize: both; } </style> `, }"
                }
            ],
            "exports": [
                {
                    "kind": "js",
                    "name": "default",
                    "declaration": {
                        "name": "meta",
                        "module": "src/components/resize-observer/ResizeObserver.stories.ts"
                    }
                },
                {
                    "kind": "js",
                    "name": "Default",
                    "declaration": {
                        "name": "Default",
                        "module": "src/components/resize-observer/ResizeObserver.stories.ts"
                    }
                }
            ]
        },
        {
            "kind": "javascript-module",
            "path": "src/components/spinner/spinner.component.ts",
            "declarations": [
                {
                    "kind": "class",
                    "description": "",
                    "name": "PcSpinner",
                    "members": [],
                    "superclass": {
                        "name": "LitElement",
                        "package": "lit"
                    },
                    "tagName": "pc-spinner",
                    "customElement": true
                }
            ],
            "exports": [
                {
                    "kind": "js",
                    "name": "PcSpinner",
                    "declaration": {
                        "name": "PcSpinner",
                        "module": "src/components/spinner/spinner.component.ts"
                    }
                },
                {
                    "kind": "custom-element-definition",
                    "name": "pc-spinner",
                    "declaration": {
                        "name": "PcSpinner",
                        "module": "src/components/spinner/spinner.component.ts"
                    }
                }
            ]
        },
        {
            "kind": "javascript-module",
            "path": "src/components/spinner/Spinner.stories.ts",
            "declarations": [
                {
                    "kind": "variable",
                    "name": "meta",
                    "type": {
                        "text": "Meta"
                    },
                    "default": "{ title: \"Components/Spinner\", component: \"pc-spinner\", argTypes: { // CSS styles fontSize: { control: \"text\" }, indicatorColor: { control: \"color\" }, speed: { control: \"text\" }, trackColor: { control: \"color\" }, trackWidth: { control: \"text\" }, }, args: { fontSize: \"1rem\", indicatorColor: \"var(--pc-color-primary-600)\", speed: \"2s\", trackColor: \"rgba(112, 120, 128, 0.25)\", trackWidth: \"0.125rem\", }, }"
                },
                {
                    "kind": "variable",
                    "name": "Default",
                    "type": {
                        "text": "Story"
                    },
                    "default": "{ render: ({ fontSize, indicatorColor, speed, trackColor, trackWidth, }) => html` <pc-spinner style=\" --indicator-color: ${indicatorColor}; --speed: ${speed}; --track-color: ${trackColor}; --track-width: ${trackWidth}; font-size: ${fontSize}; \" ></pc-spinner> `, }"
                },
                {
                    "kind": "variable",
                    "name": "Sizing",
                    "type": {
                        "text": "Story"
                    },
                    "default": "{ args: { fontSize: \"3rem\", indicatorColor: \"var(--pc-color-primary-600)\", speed: \"2s\", trackColor: \"rgba(112, 120, 128, 0.25)\", trackWidth: \"0.125rem\", }, render: ({ fontSize, indicatorColor, speed, trackColor, trackWidth, }) => html` <pc-spinner style=\" --indicator-color: ${indicatorColor}; --speed: ${speed}; --track-color: ${trackColor}; --track-width: ${trackWidth}; font-size: ${fontSize}; \" ></pc-spinner> `, }"
                },
                {
                    "kind": "variable",
                    "name": "TrackWidth",
                    "type": {
                        "text": "Story"
                    },
                    "default": "{ args: { fontSize: \"1rem\", indicatorColor: \"var(--pc-color-primary-600)\", speed: \"2s\", trackColor: \"rgba(112, 120, 128, 0.25)\", trackWidth: \"0.25rem\", }, render: ({ fontSize, indicatorColor, speed, trackColor, trackWidth, }) => html` <pc-spinner style=\" --indicator-color: ${indicatorColor}; --speed: ${speed}; --track-color: ${trackColor}; --track-width: ${trackWidth}; font-size: ${fontSize}; \" ></pc-spinner> `, }"
                },
                {
                    "kind": "variable",
                    "name": "Colour",
                    "type": {
                        "text": "Story"
                    },
                    "default": "{ args: { fontSize: \"1rem\", indicatorColor: \"var(--pc-color-pink-800)\", speed: \"2s\", trackColor: \"var(--pc-color-pink-500)\", trackWidth: \"0.125rem\", }, render: ({ fontSize, indicatorColor, speed, trackColor, trackWidth, }) => html` <pc-spinner style=\" --indicator-color: ${indicatorColor}; --speed: ${speed}; --track-color: ${trackColor}; --track-width: ${trackWidth}; font-size: ${fontSize}; \" ></pc-spinner> `, }"
                },
                {
                    "kind": "variable",
                    "name": "Speed",
                    "type": {
                        "text": "Story"
                    },
                    "default": "{ args: { fontSize: \"1rem\", indicatorColor: \"var(--pc-color-primary-600)\", speed: \"5s\", trackColor: \"rgba(112, 120, 128, 0.25)\", trackWidth: \"0.125rem\", }, render: ({ fontSize, indicatorColor, speed, trackColor, trackWidth, }) => html` <pc-spinner style=\" --indicator-color: ${indicatorColor}; --speed: ${speed}; --track-color: ${trackColor}; --track-width: ${trackWidth}; font-size: ${fontSize}; \" ></pc-spinner> `, }"
                }
            ],
            "exports": [
                {
                    "kind": "js",
                    "name": "default",
                    "declaration": {
                        "name": "meta",
                        "module": "src/components/spinner/Spinner.stories.ts"
                    }
                },
                {
                    "kind": "js",
                    "name": "Default",
                    "declaration": {
                        "name": "Default",
                        "module": "src/components/spinner/Spinner.stories.ts"
                    }
                },
                {
                    "kind": "js",
                    "name": "Sizing",
                    "declaration": {
                        "name": "Sizing",
                        "module": "src/components/spinner/Spinner.stories.ts"
                    }
                },
                {
                    "kind": "js",
                    "name": "TrackWidth",
                    "declaration": {
                        "name": "TrackWidth",
                        "module": "src/components/spinner/Spinner.stories.ts"
                    }
                },
                {
                    "kind": "js",
                    "name": "Colour",
                    "declaration": {
                        "name": "Colour",
                        "module": "src/components/spinner/Spinner.stories.ts"
                    }
                },
                {
                    "kind": "js",
                    "name": "Speed",
                    "declaration": {
                        "name": "Speed",
                        "module": "src/components/spinner/Spinner.stories.ts"
                    }
                }
            ]
        },
        {
            "kind": "javascript-module",
            "path": "src/components/spinner/spinner.styles.ts",
            "declarations": [
                {
                    "kind": "variable",
                    "name": "styles",
                    "default": "css` :host { --track-width: 0.125rem; --track-color: rgba(112, 120, 128, 0.25); --indicator-color: var(--pc-color-primary-600); --speed: 2s; display: inline-flex; width: 1em; height: 1em; flex: none; } .spinner { flex: 1 1 auto; height: 100%; width: 100%; } .track, .indicator { fill: none; stroke-width: var(--track-width); r: calc(0.5em - var(--track-width) / 2); cx: 0.5em; cy: 0.5em; transform-origin: 50% 50%; } .track { stroke: var(--track-color); transform-origin: 0% 0%; } .indicator { stroke: var(--indicator-color); stroke-linecap: round; stroke-dasharray: 150% 75%; animation: spin var(--speed) linear infinite; } @keyframes spin { 0% { transform: rotate(0deg); stroke-dasharray: 0% 314.159%; } 50% { transform: rotate(450deg); stroke-dasharray: 157.08% 157.08%; } 100% { transform: rotate(1080deg); stroke-dasharray: 0% 314.159%; } } `"
                }
            ],
            "exports": [
                {
                    "kind": "js",
                    "name": "styles",
                    "declaration": {
                        "name": "styles",
                        "module": "src/components/spinner/spinner.styles.ts"
                    }
                }
            ]
        },
        {
            "kind": "javascript-module",
            "path": "src/components/spinner/spinner.ts",
            "declarations": [],
            "exports": [
                {
                    "kind": "js",
                    "name": "*",
                    "declaration": {
                        "name": "*",
                        "package": "\"./spinner.component.js\""
                    }
                },
                {
                    "kind": "js",
                    "name": "default",
                    "declaration": {
                        "name": "PcSpinner",
                        "module": "src/components/spinner/spinner.ts"
                    }
                }
            ]
        },
        {
            "kind": "javascript-module",
            "path": "src/components/switch/switch.component.ts",
            "declarations": [
                {
                    "kind": "class",
                    "description": "",
                    "name": "PcSwitch",
                    "members": [
                        {
                            "kind": "field",
                            "name": "formControlController",
                            "privacy": "private",
                            "readonly": true,
                            "default": "new FormControlController(this, { value: (control: PcSwitch) => control.checked ? control.value || \"on\" : undefined, defaultValue: (control: PcSwitch) => control.defaultChecked, setValue: (control: PcSwitch, checked: boolean) => (control.checked = checked), })"
                        },
                        {
                            "kind": "field",
                            "name": "hasSlotController",
                            "privacy": "private",
                            "readonly": true,
                            "default": "new HasSlotController(this, \"hint\")"
                        },
                        {
                            "kind": "field",
                            "name": "input",
                            "type": {
                                "text": "HTMLInputElement"
                            }
                        },
                        {
                            "kind": "field",
                            "name": "hasFocus",
                            "type": {
                                "text": "boolean"
                            },
                            "privacy": "private",
                            "default": "false"
                        },
                        {
                            "kind": "field",
                            "name": "title",
                            "type": {
                                "text": "string"
                            },
                            "default": "\"\"",
                            "attribute": "title"
                        },
                        {
                            "kind": "field",
                            "name": "checked",
                            "type": {
                                "text": "boolean"
                            },
                            "default": "false",
                            "attribute": "checked",
                            "reflects": true
                        },
                        {
                            "kind": "field",
                            "name": "defaultChecked",
                            "type": {
                                "text": "boolean"
                            },
                            "default": "false"
                        },
                        {
                            "kind": "field",
                            "name": "disabled",
                            "type": {
                                "text": "boolean"
                            },
                            "default": "false",
                            "attribute": "disabled",
                            "reflects": true
                        },
                        {
                            "kind": "field",
                            "name": "form",
                            "type": {
                                "text": "string"
                            },
                            "default": "\"\"",
                            "attribute": "form",
                            "reflects": true
                        },
                        {
                            "kind": "field",
                            "name": "hint",
                            "type": {
                                "text": "string"
                            },
                            "default": "\"\"",
                            "attribute": "hint"
                        },
                        {
                            "kind": "field",
                            "name": "name",
                            "type": {
                                "text": "string"
                            },
                            "default": "\"\"",
                            "attribute": "name"
                        },
                        {
                            "kind": "field",
                            "name": "required",
                            "type": {
                                "text": "boolean"
                            },
                            "default": "false",
                            "attribute": "required",
                            "reflects": true
                        },
                        {
                            "kind": "field",
                            "name": "size",
                            "type": {
                                "text": "\"small\" | \"medium\" | \"large\""
                            },
                            "default": "\"medium\"",
                            "attribute": "size",
                            "reflects": true
                        },
                        {
                            "kind": "field",
                            "name": "value",
                            "type": {
                                "text": "string | undefined"
                            },
                            "attribute": "value"
                        },
                        {
                            "kind": "field",
                            "name": "validity",
                            "readonly": true
                        },
                        {
                            "kind": "field",
                            "name": "validationMessage",
                            "readonly": true
                        },
                        {
                            "kind": "method",
                            "name": "handleClick",
                            "privacy": "private"
                        },
                        {
                            "kind": "method",
                            "name": "handleInput",
                            "privacy": "private"
                        },
                        {
                            "kind": "method",
                            "name": "handleFocus",
                            "privacy": "private"
                        },
                        {
                            "kind": "method",
                            "name": "handleBlur",
                            "privacy": "private"
                        },
                        {
                            "kind": "method",
                            "name": "handleInvalid",
                            "privacy": "private",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": {
                                        "text": "Event"
                                    }
                                }
                            ]
                        },
                        {
                            "kind": "method",
                            "name": "handleKeyDown",
                            "privacy": "private",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": {
                                        "text": "KeyboardEvent"
                                    }
                                }
                            ]
                        },
                        {
                            "kind": "method",
                            "name": "handleCheckedChange"
                        },
                        {
                            "kind": "method",
                            "name": "handleDisabledChange"
                        },
                        {
                            "kind": "method",
                            "name": "click"
                        },
                        {
                            "kind": "method",
                            "name": "focus",
                            "parameters": [
                                {
                                    "name": "options",
                                    "optional": true,
                                    "type": {
                                        "text": "FocusOptions"
                                    }
                                }
                            ]
                        },
                        {
                            "kind": "method",
                            "name": "blur"
                        },
                        {
                            "kind": "method",
                            "name": "checkValidity"
                        },
                        {
                            "kind": "method",
                            "name": "getForm",
                            "return": {
                                "type": {
                                    "text": "HTMLFormElement | null"
                                }
                            }
                        },
                        {
                            "kind": "method",
                            "name": "reportValidity"
                        },
                        {
                            "kind": "method",
                            "name": "setCustomValidity",
                            "parameters": [
                                {
                                    "name": "message",
                                    "type": {
                                        "text": "string"
                                    }
                                }
                            ]
                        }
                    ],
                    "attributes": [
                        {
                            "name": "title",
                            "type": {
                                "text": "string"
                            },
                            "default": "\"\"",
                            "fieldName": "title"
                        },
                        {
                            "name": "checked",
                            "type": {
                                "text": "boolean"
                            },
                            "default": "false",
                            "fieldName": "checked"
                        },
                        {
                            "name": "disabled",
                            "type": {
                                "text": "boolean"
                            },
                            "default": "false",
                            "fieldName": "disabled"
                        },
                        {
                            "name": "form",
                            "type": {
                                "text": "string"
                            },
                            "default": "\"\"",
                            "fieldName": "form"
                        },
                        {
                            "name": "hint",
                            "type": {
                                "text": "string"
                            },
                            "default": "\"\"",
                            "fieldName": "hint"
                        },
                        {
                            "name": "name",
                            "type": {
                                "text": "string"
                            },
                            "default": "\"\"",
                            "fieldName": "name"
                        },
                        {
                            "name": "required",
                            "type": {
                                "text": "boolean"
                            },
                            "default": "false",
                            "fieldName": "required"
                        },
                        {
                            "name": "size",
                            "type": {
                                "text": "\"small\" | \"medium\" | \"large\""
                            },
                            "default": "\"medium\"",
                            "fieldName": "size"
                        },
                        {
                            "name": "value",
                            "type": {
                                "text": "string | undefined"
                            },
                            "fieldName": "value"
                        }
                    ],
                    "superclass": {
                        "name": "LitElement",
                        "package": "lit"
                    },
                    "tagName": "pc-switch",
                    "customElement": true
                }
            ],
            "exports": [
                {
                    "kind": "js",
                    "name": "PcSwitch",
                    "declaration": {
                        "name": "PcSwitch",
                        "module": "src/components/switch/switch.component.ts"
                    }
                },
                {
                    "kind": "custom-element-definition",
                    "name": "pc-switch",
                    "declaration": {
                        "name": "PcSwitch",
                        "module": "src/components/switch/switch.component.ts"
                    }
                }
            ]
        },
        {
            "kind": "javascript-module",
            "path": "src/components/switch/Switch.stories.ts",
            "declarations": [
                {
                    "kind": "variable",
                    "name": "meta",
                    "type": {
                        "text": "Meta"
                    },
                    "default": "{ title: \"Components/Switch\", component: \"pc-switch\", argTypes: { checked: { control: \"boolean\" }, defaultChecked: { control: \"boolean\" }, disabled: { control: \"boolean\" }, form: { control: \"text\" }, hint: { control: \"text\" }, label: { control: \"text\" }, name: { control: \"text\" }, required: { control: \"boolean\" }, size: { control: \"select\", options: [\"small\", \"medium\", \"large\"], }, title: { control: \"text\" }, value: { control: \"text\" }, }, args: { checked: false, defaultChecked: false, disabled: false, form: \"\", hint: \"\", label: \"Switch\", name: \"\", required: false, size: \"medium\", title: \"\", value: \"\", }, }"
                },
                {
                    "kind": "variable",
                    "name": "Default",
                    "type": {
                        "text": "Story"
                    },
                    "default": "{ render: ({ checked, defaultChecked, disabled, form, hint, label, name, required, size, title, value, }) => html` <pc-switch ?checked=${checked} ?defaultChecked=${defaultChecked} ?disabled=${disabled} form=${form} hint=${hint} name=${name} ?required=${required} size=${size} title=${title} value=${value} > ${label} </pc-switch> `, }"
                },
                {
                    "kind": "variable",
                    "name": "Checked",
                    "type": {
                        "text": "Story"
                    },
                    "default": "{ args: { checked: true, defaultChecked: false, disabled: false, form: \"\", hint: \"\", label: \"Checked\", name: \"\", required: false, size: \"medium\", title: \"\", value: \"\", }, render: ({ checked, defaultChecked, disabled, form, hint, label, name, required, size, title, value, }) => html` <pc-switch ?checked=${checked} ?defaultChecked=${defaultChecked} ?disabled=${disabled} form=${form} hint=${hint} name=${name} ?required=${required} size=${size} title=${title} value=${value} > ${label} </pc-switch> `, }"
                },
                {
                    "kind": "variable",
                    "name": "Large",
                    "type": {
                        "text": "Story"
                    },
                    "default": "{ args: { checked: false, defaultChecked: false, disabled: false, form: \"\", hint: \"\", label: \"Large\", name: \"\", required: false, size: \"large\", title: \"\", value: \"\", }, render: ({ checked, defaultChecked, disabled, form, hint, label, name, required, size, title, value, }) => html` <pc-switch ?checked=${checked} ?defaultChecked=${defaultChecked} ?disabled=${disabled} form=${form} hint=${hint} name=${name} ?required=${required} size=${size} title=${title} value=${value} > ${label} </pc-switch> `, }"
                },
                {
                    "kind": "variable",
                    "name": "Small",
                    "type": {
                        "text": "Story"
                    },
                    "default": "{ args: { checked: false, defaultChecked: false, disabled: false, form: \"\", hint: \"\", label: \"Small\", name: \"\", required: false, size: \"small\", title: \"\", value: \"\", }, render: ({ checked, defaultChecked, disabled, form, hint, label, name, required, size, title, value, }) => html` <pc-switch ?checked=${checked} ?defaultChecked=${defaultChecked} ?disabled=${disabled} form=${form} hint=${hint} name=${name} ?required=${required} size=${size} title=${title} value=${value} > ${label} </pc-switch> `, }"
                },
                {
                    "kind": "variable",
                    "name": "Disabled",
                    "type": {
                        "text": "Story"
                    },
                    "default": "{ args: { checked: false, defaultChecked: false, disabled: true, form: \"\", hint: \"\", label: \"Disabled\", name: \"\", required: false, size: \"medium\", title: \"\", value: \"\", }, render: ({ checked, defaultChecked, disabled, form, hint, label, name, required, size, title, value, }) => html` <pc-switch ?checked=${checked} ?defaultChecked=${defaultChecked} ?disabled=${disabled} form=${form} hint=${hint} name=${name} ?required=${required} size=${size} title=${title} value=${value} > ${label} </pc-switch> `, }"
                },
                {
                    "kind": "variable",
                    "name": "Hint",
                    "type": {
                        "text": "Story"
                    },
                    "default": "{ args: { checked: false, defaultChecked: false, disabled: false, form: \"\", hint: \"What does this switch do?\", label: \"Switch with hint\", name: \"\", required: false, size: \"medium\", title: \"\", value: \"\", }, render: ({ checked, defaultChecked, disabled, form, hint, label, name, required, size, title, value, }) => html` <pc-switch ?checked=${checked} ?defaultChecked=${defaultChecked} ?disabled=${disabled} form=${form} hint=${hint} name=${name} ?required=${required} size=${size} title=${title} value=${value} > ${label} </pc-switch> `, }"
                },
                {
                    "kind": "variable",
                    "name": "Required",
                    "type": {
                        "text": "Story"
                    },
                    "default": "{ args: { checked: false, defaultChecked: false, disabled: false, form: \"\", hint: \"\", label: \"Required\", name: \"\", required: true, size: \"medium\", title: \"\", value: \"\", }, render: ({ checked, defaultChecked, disabled, form, hint, label, name, required, size, title, value, }) => html` <pc-switch ?checked=${checked} ?defaultChecked=${defaultChecked} ?disabled=${disabled} form=${form} hint=${hint} name=${name} ?required=${required} size=${size} title=${title} value=${value} > ${label} </pc-switch> `, }"
                }
            ],
            "exports": [
                {
                    "kind": "js",
                    "name": "default",
                    "declaration": {
                        "name": "meta",
                        "module": "src/components/switch/Switch.stories.ts"
                    }
                },
                {
                    "kind": "js",
                    "name": "Default",
                    "declaration": {
                        "name": "Default",
                        "module": "src/components/switch/Switch.stories.ts"
                    }
                },
                {
                    "kind": "js",
                    "name": "Checked",
                    "declaration": {
                        "name": "Checked",
                        "module": "src/components/switch/Switch.stories.ts"
                    }
                },
                {
                    "kind": "js",
                    "name": "Large",
                    "declaration": {
                        "name": "Large",
                        "module": "src/components/switch/Switch.stories.ts"
                    }
                },
                {
                    "kind": "js",
                    "name": "Small",
                    "declaration": {
                        "name": "Small",
                        "module": "src/components/switch/Switch.stories.ts"
                    }
                },
                {
                    "kind": "js",
                    "name": "Disabled",
                    "declaration": {
                        "name": "Disabled",
                        "module": "src/components/switch/Switch.stories.ts"
                    }
                },
                {
                    "kind": "js",
                    "name": "Hint",
                    "declaration": {
                        "name": "Hint",
                        "module": "src/components/switch/Switch.stories.ts"
                    }
                },
                {
                    "kind": "js",
                    "name": "Required",
                    "declaration": {
                        "name": "Required",
                        "module": "src/components/switch/Switch.stories.ts"
                    }
                }
            ]
        },
        {
            "kind": "javascript-module",
            "path": "src/components/switch/switch.styles.ts",
            "declarations": [
                {
                    "kind": "variable",
                    "name": "styles",
                    "default": "css` :host { display: inline-block; } :host([size=\"small\"]) { --height: var(--pc-toggle-size-s); --thumb-size: calc(var(--pc-toggle-size-s) - 2px); --width: calc(var(--height) * 1.75); font-size: var(--pc-input-font-size-s); } :host([size=\"medium\"]) { --height: var(--pc-toggle-size-m); --thumb-size: calc(var(--pc-toggle-size-m) - 2px); --width: calc(var(--height) * 1.75); font-size: var(--pc-input-font-size-m); } :host([size=\"large\"]) { --height: var(--pc-toggle-size-l); --thumb-size: calc(var(--pc-toggle-size-l) - 2px); --width: calc(var(--height) * 1.75); font-size: var(--pc-input-font-size-l); } .switch { display: inline-flex; position: relative; align-items: center; vertical-align: middle; color: var(--pc-input-label-color); font-size: inherit; font-family: var(--pc-input-font-family); font-weight: var(--pc-input-font-weight); cursor: pointer; } .control { display: inline-flex; position: relative; align-items: center; justify-content: center; flex: 0 0 auto; width: var(--width); height: var(--height); background-color: var(--pc-color-neutral-200); border: var(--pc-input-border-width) solid var(--pc-color-neutral-200); border-radius: var(--pc-border-radius-pill); transition: all var(--pc-transition-fast) ease-in-out; } .control .thumb { background-color: hsl(220, 25%, 96%); width: var(--thumb-size); height: var(--thumb-size); border-radius: var(--pc-border-radius-circle); translate: calc((var(--width) - var(--height)) / -2); box-shadow: var(--pc-shadow-xs); transition: outline var(--pc-transition-fast) ease-in-out, translate var(--pc-transition-medium) cubic-bezier(0.34, 1.35, 0.64, 1); } .switch-input { position: absolute; margin: 0; padding: 0; opacity: 0; pointer-events: none; } .switch:not(.switch-checked):not(.switch-disabled) .control:hover { background-color: var(--pc-color-neutral-300); border-color: var(--pc-color-neutral-300); } .switch:not(.switch-checked):not(.switch-disabled) .control:hover:active { background-color: var(--pc-color-neutral-100); border-color: var(--pc-color-neutral-100); } .switch:not(.switch-checked):not(.switch-disabled) .switch-input:focus-visible ~ .control .thumb { outline: var(--pc-focus-ring); outline-offset: var(--pc-focus-ring-offset); } .switch-checked .control { background-color: var(--pc-color-primary-400); border-color: var(--pc-color-primary-400); } .switch-checked .control .thumb { translate: calc((var(--width) - var(--height)) / 2); } .switch.switch-checked:not(.switch-disabled) .control:hover { background-color: var(--pc-color-primary-500); border-color: var(--pc-color-primary-500); } .switch.switch-checked:not(.switch-disabled) .control:hover:active { background-color: var(--pc-color-primary-300); border-color: var(--pc-color-primary-300); } .switch.switch-checked:not(.switch-disabled) .switch-input:focus-visible ~ .control { background-color: var(--pc-color-primary-600); border-color: var(--pc-color-primary-600); } .switch.switch-checked:not(.switch-disabled) .switch-input:focus-visible ~ .control .thumb { outline: var(--pc-focus-ring); outline-color: var(--pc-color-primary-300); outline-offset: var(--pc-focus-ring-offset); } .switch-disabled { opacity: 0.6; cursor: not-allowed; } .label { display: inline-block; line-height: var(--height); margin-inline-start: var(--pc-spacing-s); user-select: none; -webkit-user-select: none; transition: color var(--pc-transition-fast) ease-in-out; } :host([required]) .label::after { content: var(--pc-input-required-content); color: var(--pc-input-required-content-color); margin-inline-start: var(--pc-input-required-content-offset); } .hint { color: var(--pc-input-hint-text-color); font-family: var(--pc-input-font-family); } @media (forced-colors: active) { .switch:not(.switch-disabled) .control:hover .thumb, .switch .control .thumb { border: 1px solid ButtonText; width: calc(var(--thumb-size) - 2px); height: calc(var(--thumb-size) - 2px); } .switch.switch-checked:not(.switch-disabled) .control:hover .thumb, .switch-checked .control .thumb { background-color: ButtonText; } } `"
                }
            ],
            "exports": [
                {
                    "kind": "js",
                    "name": "styles",
                    "declaration": {
                        "name": "styles",
                        "module": "src/components/switch/switch.styles.ts"
                    }
                }
            ]
        },
        {
            "kind": "javascript-module",
            "path": "src/components/switch/switch.ts",
            "declarations": [],
            "exports": [
                {
                    "kind": "js",
                    "name": "*",
                    "declaration": {
                        "name": "*",
                        "package": "\"./switch.component.js\""
                    }
                },
                {
                    "kind": "js",
                    "name": "default",
                    "declaration": {
                        "name": "PcSwitch",
                        "module": "src/components/switch/switch.ts"
                    }
                }
            ]
        },
        {
            "kind": "javascript-module",
            "path": "src/components/tab/tab.component.ts",
            "declarations": [
                {
                    "kind": "class",
                    "description": "",
                    "name": "PcTab",
                    "members": [
                        {
                            "kind": "field",
                            "name": "dependencies",
                            "type": {
                                "text": "object"
                            },
                            "static": true,
                            "default": "{ \"pc-icon-button\": PcIconButton }"
                        },
                        {
                            "kind": "field",
                            "name": "attributeID",
                            "type": {
                                "text": "number"
                            },
                            "privacy": "private",
                            "readonly": true,
                            "default": "++id"
                        },
                        {
                            "kind": "field",
                            "name": "componentID",
                            "privacy": "private",
                            "readonly": true,
                            "default": "`pc-tab-${this.attributeID}`"
                        },
                        {
                            "kind": "field",
                            "name": "tab",
                            "type": {
                                "text": "HTMLElement"
                            }
                        },
                        {
                            "kind": "field",
                            "name": "active",
                            "type": {
                                "text": "boolean"
                            },
                            "default": "false",
                            "attribute": "active",
                            "reflects": true
                        },
                        {
                            "kind": "field",
                            "name": "closable",
                            "type": {
                                "text": "boolean"
                            },
                            "default": "false",
                            "attribute": "closable",
                            "reflects": true
                        },
                        {
                            "kind": "field",
                            "name": "disabled",
                            "type": {
                                "text": "boolean"
                            },
                            "default": "false",
                            "attribute": "disabled",
                            "reflects": true
                        },
                        {
                            "kind": "field",
                            "name": "panel",
                            "type": {
                                "text": "string"
                            },
                            "default": "\"\"",
                            "attribute": "panel",
                            "reflects": true
                        },
                        {
                            "kind": "field",
                            "name": "tabIndex",
                            "type": {
                                "text": "number"
                            },
                            "default": "0",
                            "attribute": "tabIndex",
                            "reflects": true
                        },
                        {
                            "kind": "method",
                            "name": "handleCloseClick",
                            "privacy": "private",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": {
                                        "text": "Event"
                                    }
                                }
                            ]
                        },
                        {
                            "kind": "method",
                            "name": "handleActiveChange"
                        },
                        {
                            "kind": "method",
                            "name": "handleDisabledChange"
                        }
                    ],
                    "attributes": [
                        {
                            "name": "active",
                            "type": {
                                "text": "boolean"
                            },
                            "default": "false",
                            "fieldName": "active"
                        },
                        {
                            "name": "closable",
                            "type": {
                                "text": "boolean"
                            },
                            "default": "false",
                            "fieldName": "closable"
                        },
                        {
                            "name": "disabled",
                            "type": {
                                "text": "boolean"
                            },
                            "default": "false",
                            "fieldName": "disabled"
                        },
                        {
                            "name": "panel",
                            "type": {
                                "text": "string"
                            },
                            "default": "\"\"",
                            "fieldName": "panel"
                        },
                        {
                            "name": "tabIndex",
                            "type": {
                                "text": "number"
                            },
                            "default": "0",
                            "fieldName": "tabIndex"
                        }
                    ],
                    "superclass": {
                        "name": "LitElement",
                        "package": "lit"
                    },
                    "tagName": "pc-tab",
                    "customElement": true
                }
            ],
            "exports": [
                {
                    "kind": "js",
                    "name": "PcTab",
                    "declaration": {
                        "name": "PcTab",
                        "module": "src/components/tab/tab.component.ts"
                    }
                },
                {
                    "kind": "custom-element-definition",
                    "name": "pc-tab",
                    "declaration": {
                        "name": "PcTab",
                        "module": "src/components/tab/tab.component.ts"
                    }
                }
            ]
        },
        {
            "kind": "javascript-module",
            "path": "src/components/tab/Tab.stories.ts",
            "declarations": [
                {
                    "kind": "variable",
                    "name": "meta",
                    "type": {
                        "text": "Meta"
                    },
                    "default": "{ title: \"Components/Tab\", component: \"pc-tab\", argTypes: { active: { control: \"boolean\" }, closable: { control: \"boolean\" }, disabled: { control: \"boolean\" }, label: { control: \"text\" }, panel: { control: \"text\" }, tabIndex: { control: \"number\" }, }, args: { active: false, closable: false, disabled: false, label: \"Tab\", panel: \"\", tabIndex: 0, }, }"
                },
                {
                    "kind": "variable",
                    "name": "Default",
                    "type": {
                        "text": "Story"
                    },
                    "default": "{ render: ({ active, closable, disabled, label, panel, tabIndex }) => html` <pc-tab ?active=${active} ?closable=${closable} ?disabled=${disabled} panel=${panel} tabIndex=${tabIndex} > ${label} </pc-tab> `, }"
                },
                {
                    "kind": "variable",
                    "name": "Active",
                    "type": {
                        "text": "Story"
                    },
                    "default": "{ args: { active: true, closable: false, disabled: false, label: \"Active\", panel: \"\", tabIndex: 0, }, render: ({ active, closable, disabled, label, panel, tabIndex }) => html` <pc-tab ?active=${active} ?closable=${closable} ?disabled=${disabled} panel=${panel} tabIndex=${tabIndex} > ${label} </pc-tab> `, }"
                },
                {
                    "kind": "variable",
                    "name": "Closable",
                    "type": {
                        "text": "Story"
                    },
                    "default": "{ args: { active: false, closable: true, disabled: false, label: \"Closable\", panel: \"\", tabIndex: 0, }, render: ({ active, closable, disabled, label, panel, tabIndex }) => html` <pc-tab ?active=${active} ?closable=${closable} ?disabled=${disabled} panel=${panel} tabIndex=${tabIndex} > ${label} </pc-tab> `, }"
                },
                {
                    "kind": "variable",
                    "name": "Disabled",
                    "type": {
                        "text": "Story"
                    },
                    "default": "{ args: { active: false, closable: false, disabled: true, label: \"Disabled\", panel: \"\", tabIndex: 0, }, render: ({ active, closable, disabled, label, panel, tabIndex }) => html` <pc-tab ?active=${active} ?closable=${closable} ?disabled=${disabled} panel=${panel} tabIndex=${tabIndex} > ${label} </pc-tab> `, }"
                }
            ],
            "exports": [
                {
                    "kind": "js",
                    "name": "default",
                    "declaration": {
                        "name": "meta",
                        "module": "src/components/tab/Tab.stories.ts"
                    }
                },
                {
                    "kind": "js",
                    "name": "Default",
                    "declaration": {
                        "name": "Default",
                        "module": "src/components/tab/Tab.stories.ts"
                    }
                },
                {
                    "kind": "js",
                    "name": "Active",
                    "declaration": {
                        "name": "Active",
                        "module": "src/components/tab/Tab.stories.ts"
                    }
                },
                {
                    "kind": "js",
                    "name": "Closable",
                    "declaration": {
                        "name": "Closable",
                        "module": "src/components/tab/Tab.stories.ts"
                    }
                },
                {
                    "kind": "js",
                    "name": "Disabled",
                    "declaration": {
                        "name": "Disabled",
                        "module": "src/components/tab/Tab.stories.ts"
                    }
                }
            ]
        },
        {
            "kind": "javascript-module",
            "path": "src/components/tab/tab.styles.ts",
            "declarations": [
                {
                    "kind": "variable",
                    "name": "styles",
                    "default": "css` :host { display: inline-block; } :host(:focus) { outline: transparent; } :host(:focus-visible) { color: var(--pc-color-primary-800); outline: var(--pc-focus-ring); outline-offset: calc( -1 * var(--pc-focus-ring-width) - var(--pc-focus-ring-offset) ); } .tab { display: inline-flex; align-items: center; font-family: var(--pc-font-sans); font-size: var(--pc-font-size-s); font-weight: var(--pc-font-weight-semibold); border-radius: var(--pc-border-radius-m); color: var(--pc-color-neutral-600); padding: var(--pc-spacing-m); white-space: nowrap; user-select: none; -webkit-user-select: none; cursor: pointer; transition: all var(--pc-transition-fast) ease-in-out; } .tab:hover:not(.tab-disabled, .tab-active) { color: var(--pc-color-neutral-700); } .tab:hover:active:not(.tab-disabled, .tab-active) { color: var(--pc-color-neutral-500); } .tab.tab-active:not(.tab-disabled) { color: var(--pc-color-neutral-900); } .tab.tab-closable { padding-inline-end: var(--pc-spacing-s); } .tab.tab-disabled { opacity: 0.6; cursor: not-allowed; } .close-button { font-size: var(--pc-font-size-s); margin-inline-start: var(--pc-spacing-s); } .close-button::part(base) { padding: var(--pc-spacing-xxxs); } @media (forced-colors: active) { .tab.tab-active:not(.tab-disabled) { outline: 1px solid transparent; outline-offset: -3px; } } `"
                }
            ],
            "exports": [
                {
                    "kind": "js",
                    "name": "styles",
                    "declaration": {
                        "name": "styles",
                        "module": "src/components/tab/tab.styles.ts"
                    }
                }
            ]
        },
        {
            "kind": "javascript-module",
            "path": "src/components/tab/tab.ts",
            "declarations": [],
            "exports": [
                {
                    "kind": "js",
                    "name": "*",
                    "declaration": {
                        "name": "*",
                        "package": "\"./tab.component.js\""
                    }
                },
                {
                    "kind": "js",
                    "name": "default",
                    "declaration": {
                        "name": "PcTab",
                        "module": "src/components/tab/tab.ts"
                    }
                }
            ]
        },
        {
            "kind": "javascript-module",
            "path": "src/components/tab-group/tab-group.component.ts",
            "declarations": [
                {
                    "kind": "class",
                    "description": "",
                    "name": "PcTabGroup",
                    "members": [
                        {
                            "kind": "field",
                            "name": "dependencies",
                            "type": {
                                "text": "object"
                            },
                            "static": true,
                            "default": "{ \"pc-icon-button\": PcIconButton, \"pc-resize-observer\": PcResizeObserver, }"
                        },
                        {
                            "kind": "field",
                            "name": "activeTab",
                            "type": {
                                "text": "PcTab | undefined"
                            },
                            "privacy": "private"
                        },
                        {
                            "kind": "field",
                            "name": "mutationObserver",
                            "type": {
                                "text": "MutationObserver"
                            },
                            "privacy": "private"
                        },
                        {
                            "kind": "field",
                            "name": "resizeObserver",
                            "type": {
                                "text": "ResizeObserver"
                            },
                            "privacy": "private"
                        },
                        {
                            "kind": "field",
                            "name": "tabs",
                            "type": {
                                "text": "PcTab[]"
                            },
                            "privacy": "private",
                            "default": "[]"
                        },
                        {
                            "kind": "field",
                            "name": "focusableTabs",
                            "type": {
                                "text": "PcTab[]"
                            },
                            "privacy": "private",
                            "default": "[]"
                        },
                        {
                            "kind": "field",
                            "name": "panels",
                            "type": {
                                "text": "PcTabPanel[]"
                            },
                            "privacy": "private",
                            "default": "[]"
                        },
                        {
                            "kind": "field",
                            "name": "tabGroup",
                            "type": {
                                "text": "HTMLElement"
                            }
                        },
                        {
                            "kind": "field",
                            "name": "body",
                            "type": {
                                "text": "HTMLSlotElement"
                            }
                        },
                        {
                            "kind": "field",
                            "name": "navigation",
                            "type": {
                                "text": "HTMLElement"
                            }
                        },
                        {
                            "kind": "field",
                            "name": "indicator",
                            "type": {
                                "text": "HTMLElement"
                            }
                        },
                        {
                            "kind": "field",
                            "name": "hasScrollControls",
                            "type": {
                                "text": "boolean"
                            },
                            "privacy": "private",
                            "default": "false"
                        },
                        {
                            "kind": "field",
                            "name": "shouldHideScrollStartButton",
                            "type": {
                                "text": "boolean"
                            },
                            "privacy": "private",
                            "default": "false"
                        },
                        {
                            "kind": "field",
                            "name": "shouldHideScrollEndButton",
                            "type": {
                                "text": "boolean"
                            },
                            "privacy": "private",
                            "default": "false"
                        },
                        {
                            "kind": "field",
                            "name": "activation",
                            "type": {
                                "text": "\"auto\" | \"manual\""
                            },
                            "default": "\"auto\"",
                            "attribute": "activation"
                        },
                        {
                            "kind": "field",
                            "name": "fixedScrollControls",
                            "type": {
                                "text": "boolean"
                            },
                            "default": "false",
                            "attribute": "fixed-scroll-controls"
                        },
                        {
                            "kind": "field",
                            "name": "noScrollControls",
                            "type": {
                                "text": "boolean"
                            },
                            "default": "false",
                            "attribute": "no-scroll-controls"
                        },
                        {
                            "kind": "field",
                            "name": "placement",
                            "type": {
                                "text": "\"top\" | \"bottom\" | \"start\" | \"end\""
                            },
                            "default": "\"top\"",
                            "attribute": "placement"
                        },
                        {
                            "kind": "method",
                            "name": "getAllTabs",
                            "privacy": "private"
                        },
                        {
                            "kind": "method",
                            "name": "getAllPanels",
                            "privacy": "private"
                        },
                        {
                            "kind": "method",
                            "name": "getActiveTab",
                            "privacy": "private"
                        },
                        {
                            "kind": "method",
                            "name": "handleClick",
                            "privacy": "private",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": {
                                        "text": "MouseEvent"
                                    }
                                }
                            ]
                        },
                        {
                            "kind": "method",
                            "name": "handleKeyDown",
                            "privacy": "private",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": {
                                        "text": "KeyboardEvent"
                                    }
                                }
                            ]
                        },
                        {
                            "kind": "method",
                            "name": "handleScrollToStart",
                            "privacy": "private"
                        },
                        {
                            "kind": "method",
                            "name": "handleScrollToEnd",
                            "privacy": "private"
                        },
                        {
                            "kind": "method",
                            "name": "setActiveTab",
                            "privacy": "private",
                            "parameters": [
                                {
                                    "name": "tab",
                                    "type": {
                                        "text": "PcTab"
                                    }
                                },
                                {
                                    "name": "options",
                                    "optional": true,
                                    "type": {
                                        "text": "{ emitEvents?: boolean; scrollBehavior?: \"auto\" | \"smooth\" }"
                                    }
                                }
                            ]
                        },
                        {
                            "kind": "method",
                            "name": "setAriaLabels",
                            "privacy": "private"
                        },
                        {
                            "kind": "method",
                            "name": "repositionIndicator",
                            "privacy": "private"
                        },
                        {
                            "kind": "method",
                            "name": "syncTabsAndPanels",
                            "privacy": "private"
                        },
                        {
                            "kind": "method",
                            "name": "findNextFocusableTab",
                            "privacy": "private",
                            "parameters": [
                                {
                                    "name": "currentIndex",
                                    "type": {
                                        "text": "number"
                                    }
                                },
                                {
                                    "name": "direction",
                                    "type": {
                                        "text": "\"forward\" | \"backward\""
                                    }
                                }
                            ]
                        },
                        {
                            "kind": "field",
                            "name": "scrollOffset",
                            "type": {
                                "text": "number"
                            },
                            "privacy": "private",
                            "default": "1"
                        },
                        {
                            "kind": "method",
                            "name": "updateScrollButtons",
                            "privacy": "private"
                        },
                        {
                            "kind": "method",
                            "name": "isScrolledToEnd",
                            "privacy": "private"
                        },
                        {
                            "kind": "method",
                            "name": "scrollFromStart",
                            "privacy": "private"
                        },
                        {
                            "kind": "method",
                            "name": "updateScrollControls"
                        },
                        {
                            "kind": "method",
                            "name": "syncIndicator"
                        },
                        {
                            "kind": "method",
                            "name": "show",
                            "parameters": [
                                {
                                    "name": "panel",
                                    "type": {
                                        "text": "string"
                                    }
                                }
                            ]
                        }
                    ],
                    "attributes": [
                        {
                            "name": "activation",
                            "type": {
                                "text": "\"auto\" | \"manual\""
                            },
                            "default": "\"auto\"",
                            "fieldName": "activation"
                        },
                        {
                            "name": "fixed-scroll-controls",
                            "type": {
                                "text": "boolean"
                            },
                            "default": "false",
                            "fieldName": "fixedScrollControls"
                        },
                        {
                            "name": "no-scroll-controls",
                            "type": {
                                "text": "boolean"
                            },
                            "default": "false",
                            "fieldName": "noScrollControls"
                        },
                        {
                            "name": "placement",
                            "type": {
                                "text": "\"top\" | \"bottom\" | \"start\" | \"end\""
                            },
                            "default": "\"top\"",
                            "fieldName": "placement"
                        }
                    ],
                    "superclass": {
                        "name": "LitElement",
                        "package": "lit"
                    },
                    "tagName": "pc-tab-group",
                    "customElement": true
                }
            ],
            "exports": [
                {
                    "kind": "js",
                    "name": "PcTabGroup",
                    "declaration": {
                        "name": "PcTabGroup",
                        "module": "src/components/tab-group/tab-group.component.ts"
                    }
                },
                {
                    "kind": "custom-element-definition",
                    "name": "pc-tab-group",
                    "declaration": {
                        "name": "PcTabGroup",
                        "module": "src/components/tab-group/tab-group.component.ts"
                    }
                }
            ]
        },
        {
            "kind": "javascript-module",
            "path": "src/components/tab-group/tab-group.styles.ts",
            "declarations": [
                {
                    "kind": "variable",
                    "name": "styles",
                    "default": "css` :host { --indicator-color: var(--pc-color-primary-500); --track-width: 4px; display: block; } .tab-group { display: flex; border-radius: 0; } .tab-group-tabs { display: flex; position: relative; } .tab-group-indicator { position: absolute; transition: all var(--pc-transition-medium) ease-in-out; } .tab-group-has-scroll-controls .tab-group-navigation-container { position: relative; padding: 0 var(--pc-spacing-xl); } .tab-group-has-scroll-controls .tab-group-scroll-button-start-hidden, .tab-group-has-scroll-controls .tab-group-scroll-button-end-hidden { opacity: 0; pointer-events: none; } .tab-group-navigation-container { outline: none; } .tab-group-body { display: block; overflow: auto; } .tab-group-scroll-button { display: flex; position: absolute; align-items: center; justify-content: center; top: 0; bottom: 0; width: var(--pc-spacing-xl); opacity: 1; pointer-events: auto; transition: opacity var(--pc-transition-fast) ease-in-out; } .tab-group-scroll-button-start { left: 0; } .tab-group-scroll-button-end { right: 0; } .tab-group-rtl .tab-group-scroll-button-start { left: auto; right: 0; } .tab-group-rtl .tab-group-scroll-button-end { left: 0; right: auto; } .tab-group-top { flex-direction: column; } .tab-group-top .tab-group-navigation-container { order: 1; } .tab-group-top .tab-group-navigation { display: flex; overflow-x: auto; scrollbar-width: none; } .tab-group-top .tab-group-navigation::-webkit-scrollbar { width: 0; height: 0; } .tab-group-top .tab-group-tabs { position: relative; flex-direction: row; flex: 1 1 auto; } .tab-group-top .tab-group-indicator { bottom: 0; min-height: var(--track-width); background-color: var(--indicator-color); border-radius: var(--pc-border-radius-pill); } .tab-group-top .tab-group-body { order: 2; } .tab-group-top ::slotted(pc-tab-panel) { padding: var(--pc-spacing-m) 0; } .tab-group-bottom { flex-direction: column; } .tab-group-bottom .tab-group-navigation-container { order: 2; } .tab-group-bottom .tab-group-navigation { display: flex; overflow-x: auto; scrollbar-width: none; } .tab-group-bottom .tab-group-tabs { position: relative; flex-direction: row; flex: 1 1 auto; } .tab-group-bottom .tab-group-indicator { top: 0; min-height: var(--track-width); background-color: var(--indicator-color); border-radius: var(--pc-border-radius-pill); } .tab-group-bottom .tab-group-body { order: 1; } .tab-group-bottom ::slotted(pc-tab-panel) { padding: var(--pc-spacing-m) 0; } .tab-group-start { flex-direction: row; } .tab-group-start .tab-group-navigation-container { order: 1; } .tab-group-start .tab-group-tabs { flex-direction: column; flex: 0 0 auto; } .tab-group-start .tab-group-indicator { right: 0; min-width: var(--track-width); background-color: var(--indicator-color); border-radius: var(--pc-border-radius-pill); } .tab-group-start .tab-group-body { flex: 1 1 auto; order: 2; } .tab-group-start ::slotted(pc-tab-panel) { padding: 0 var(--pc-spacing-m); } .tab-group-end { flex-direction: row; } .tab-group-end .tab-group-navigation-container { order: 2; } .tab-group-end .tab-group-tabs { flex-direction: column; flex: 0 0 auto; } .tab-group-end .tab-group-indicator { left: 0; min-width: var(--track-width); background-color: var(--indicator-color); border-radius: var(--pc-border-radius-pill); } .tab-group-end.tab-group-rtl .tab-group-indicator { right: 0; left: auto; } .tab-group-end .tab-group-body { flex: 1 1 auto; order: 1; } .tab-group-end ::slotted(pc-tab-panel) { padding: 0 var(--pc-spacing-m); } `"
                }
            ],
            "exports": [
                {
                    "kind": "js",
                    "name": "styles",
                    "declaration": {
                        "name": "styles",
                        "module": "src/components/tab-group/tab-group.styles.ts"
                    }
                }
            ]
        },
        {
            "kind": "javascript-module",
            "path": "src/components/tab-group/tab-group.ts",
            "declarations": [],
            "exports": [
                {
                    "kind": "js",
                    "name": "*",
                    "declaration": {
                        "name": "*",
                        "package": "\"./tab-group.component.js\""
                    }
                },
                {
                    "kind": "js",
                    "name": "default",
                    "declaration": {
                        "name": "PcTabGroup",
                        "module": "src/components/tab-group/tab-group.ts"
                    }
                }
            ]
        },
        {
            "kind": "javascript-module",
            "path": "src/components/tab-group/TabGroup.stories.ts",
            "declarations": [
                {
                    "kind": "variable",
                    "name": "meta",
                    "type": {
                        "text": "Meta"
                    },
                    "default": "{ title: \"Components/Tab Group\", component: \"Tab Group\", subcomponents: { \"Tab\": \"pc-tab\", \"Tab Panel\": \"pc-tab-panel\", }, argTypes: { activation: { control: \"select\", options: [\"auto\", \"manual\"], }, fixedScrollControls: { control: \"boolean\" }, noScrollControls: { control: \"boolean\" }, placement: { control: \"select\", options: [\"top\", \"bottom\", \"start\", \"end\"], }, }, args: { activation: \"auto\", fixedScrollControls: false, noScrollControls: false, placement: \"top\", }, }"
                },
                {
                    "kind": "variable",
                    "name": "Default",
                    "type": {
                        "text": "Story"
                    },
                    "default": "{ render: ({ activation, fixedScrollControls, noScrollControls, placement, }) => html` <pc-tab-group activation=${activation} ?fixed-scroll-controls=${fixedScrollControls} ?no-scroll-controls=${noScrollControls} placement=${placement} > <pc-tab slot=\"navigation\" panel=\"general\">General</pc-tab> <pc-tab slot=\"navigation\" panel=\"custom\">Custom</pc-tab> <pc-tab slot=\"navigation\" panel=\"advanced\">Advanced</pc-tab> <pc-tab slot=\"navigation\" panel=\"disabled\" disabled=\"\"> Disabled </pc-tab> <pc-tab-panel name=\"general\"> This is the general tab panel. </pc-tab-panel> <pc-tab-panel name=\"custom\"> This is the custom tab panel. </pc-tab-panel> <pc-tab-panel name=\"advanced\"> This is the advanced tab panel. </pc-tab-panel> <pc-tab-panel name=\"disabled\"> This is a disabled tab panel. </pc-tab-panel> </pc-tab-group> `, }"
                }
            ],
            "exports": [
                {
                    "kind": "js",
                    "name": "default",
                    "declaration": {
                        "name": "meta",
                        "module": "src/components/tab-group/TabGroup.stories.ts"
                    }
                },
                {
                    "kind": "js",
                    "name": "Default",
                    "declaration": {
                        "name": "Default",
                        "module": "src/components/tab-group/TabGroup.stories.ts"
                    }
                }
            ]
        },
        {
            "kind": "javascript-module",
            "path": "src/components/tab-panel/tab-panel.component.ts",
            "declarations": [
                {
                    "kind": "class",
                    "description": "",
                    "name": "PcTabPanel",
                    "members": [
                        {
                            "kind": "field",
                            "name": "attributeID",
                            "type": {
                                "text": "number"
                            },
                            "privacy": "private",
                            "readonly": true,
                            "default": "++id"
                        },
                        {
                            "kind": "field",
                            "name": "componentID",
                            "privacy": "private",
                            "readonly": true,
                            "default": "`pc-tab-panel-${this.attributeID}`"
                        },
                        {
                            "kind": "field",
                            "name": "active",
                            "type": {
                                "text": "boolean"
                            },
                            "default": "false",
                            "attribute": "active",
                            "reflects": true
                        },
                        {
                            "kind": "field",
                            "name": "name",
                            "type": {
                                "text": "string"
                            },
                            "default": "\"\"",
                            "attribute": "name",
                            "reflects": true
                        },
                        {
                            "kind": "method",
                            "name": "handleActiveChange"
                        }
                    ],
                    "attributes": [
                        {
                            "name": "active",
                            "type": {
                                "text": "boolean"
                            },
                            "default": "false",
                            "fieldName": "active"
                        },
                        {
                            "name": "name",
                            "type": {
                                "text": "string"
                            },
                            "default": "\"\"",
                            "fieldName": "name"
                        }
                    ],
                    "superclass": {
                        "name": "LitElement",
                        "package": "lit"
                    },
                    "tagName": "pc-tab-panel",
                    "customElement": true
                }
            ],
            "exports": [
                {
                    "kind": "js",
                    "name": "PcTabPanel",
                    "declaration": {
                        "name": "PcTabPanel",
                        "module": "src/components/tab-panel/tab-panel.component.ts"
                    }
                },
                {
                    "kind": "custom-element-definition",
                    "name": "pc-tab-panel",
                    "declaration": {
                        "name": "PcTabPanel",
                        "module": "src/components/tab-panel/tab-panel.component.ts"
                    }
                }
            ]
        },
        {
            "kind": "javascript-module",
            "path": "src/components/tab-panel/tab-panel.styles.ts",
            "declarations": [
                {
                    "kind": "variable",
                    "name": "styles",
                    "default": "css` :host { display: none; } :host([active]) { display: block; } .tab-panel { display: block; padding: 0; } `"
                }
            ],
            "exports": [
                {
                    "kind": "js",
                    "name": "styles",
                    "declaration": {
                        "name": "styles",
                        "module": "src/components/tab-panel/tab-panel.styles.ts"
                    }
                }
            ]
        },
        {
            "kind": "javascript-module",
            "path": "src/components/tab-panel/tab-panel.ts",
            "declarations": [],
            "exports": [
                {
                    "kind": "js",
                    "name": "*",
                    "declaration": {
                        "name": "*",
                        "package": "\"./tab-panel.component.js\""
                    }
                },
                {
                    "kind": "js",
                    "name": "default",
                    "declaration": {
                        "name": "PcTabPanel",
                        "module": "src/components/tab-panel/tab-panel.ts"
                    }
                }
            ]
        },
        {
            "kind": "javascript-module",
            "path": "src/components/visually-hidden/visually-hidden.component.ts",
            "declarations": [
                {
                    "kind": "class",
                    "description": "",
                    "name": "PcVisuallyHidden",
                    "members": [],
                    "superclass": {
                        "name": "LitElement",
                        "package": "lit"
                    },
                    "tagName": "pc-visually-hidden",
                    "customElement": true
                }
            ],
            "exports": [
                {
                    "kind": "js",
                    "name": "PcVisuallyHidden",
                    "declaration": {
                        "name": "PcVisuallyHidden",
                        "module": "src/components/visually-hidden/visually-hidden.component.ts"
                    }
                },
                {
                    "kind": "custom-element-definition",
                    "name": "pc-visually-hidden",
                    "declaration": {
                        "name": "PcVisuallyHidden",
                        "module": "src/components/visually-hidden/visually-hidden.component.ts"
                    }
                }
            ]
        },
        {
            "kind": "javascript-module",
            "path": "src/components/visually-hidden/visually-hidden.styles.ts",
            "declarations": [
                {
                    "kind": "variable",
                    "name": "styles",
                    "default": "css` :host(:not(:focus-within)) { position: absolute !important; margin: -1px !important; padding: 0 !important; width: 1px !important; height: 1px !important; clip-path: inset(50%) !important; border: none !important; overflow: hidden !important; white-space: nowrap !important; } `"
                }
            ],
            "exports": [
                {
                    "kind": "js",
                    "name": "styles",
                    "declaration": {
                        "name": "styles",
                        "module": "src/components/visually-hidden/visually-hidden.styles.ts"
                    }
                }
            ]
        },
        {
            "kind": "javascript-module",
            "path": "src/components/visually-hidden/visually-hidden.ts",
            "declarations": [],
            "exports": [
                {
                    "kind": "js",
                    "name": "*",
                    "declaration": {
                        "name": "*",
                        "package": "\"./visually-hidden.component.js\""
                    }
                },
                {
                    "kind": "js",
                    "name": "default",
                    "declaration": {
                        "name": "PcVisuallyHidden",
                        "module": "src/components/visually-hidden/visually-hidden.ts"
                    }
                }
            ]
        }
    ]
}
